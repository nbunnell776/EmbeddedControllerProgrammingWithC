
UCSD-Embedded-C-Assignment-8-I2C-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067cc  080067cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d4  080067d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000070  0800684c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800684c  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a02c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b9  00000000  00000000  0003a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0003d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0003e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282d8  00000000  00000000  0003fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cd7  00000000  00000000  00067f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3d2b  00000000  00000000  0007fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017393a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061fc  00000000  00000000  00173990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006608 	.word	0x08006608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006608 	.word	0x08006608

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HTS221_pwr_en>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void HTS221_pwr_en(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
	// Configure control register 1 (CTRL_REG1, 0x20) bit 7 to enable one-shot
    uint8_t ctrlReg1 = 0x20;
 800057e:	2320      	movs	r3, #32
 8000580:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrlData[] = {ctrlReg1, (1 << 7)};
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	713b      	strb	r3, [r7, #4]
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	717b      	strb	r3, [r7, #5]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, ctrlData, sizeof(ctrlData), 1000);
 800058a:	1d3a      	adds	r2, r7, #4
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	21be      	movs	r1, #190	; 0xbe
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HTS221_pwr_en+0x2c>)
 8000598:	f002 f956 	bl	8002848 <HAL_I2C_Master_Transmit>

}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000588 	.word	0x20000588

080005a8 <HTS221_get_cal_data>:

static void HTS221_get_cal_data(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8

    /*****************************************************************************************************************/
    // Humidity calibration values

    // Register H0_rh_x2, address 0x30. Divide register value by 2 for calibration value
    uint8_t H0_rH_Address = 0x30;
 80005ae:	2330      	movs	r3, #48	; 0x30
 80005b0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_rH_Address, sizeof(H0_rH_Address), 1000);
 80005b2:	f107 020f 	add.w	r2, r7, #15
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	21be      	movs	r1, #190	; 0xbe
 80005c0:	487f      	ldr	r0, [pc, #508]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80005c2:	f002 f941 	bl	8002848 <HAL_I2C_Master_Transmit>
	H0_rH_Value = 0xff; // Junk default value
 80005c6:	4b7f      	ldr	r3, [pc, #508]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_rH_Value, sizeof(H0_rH_Value), 1000);
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	4a7b      	ldr	r2, [pc, #492]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005d6:	21bf      	movs	r1, #191	; 0xbf
 80005d8:	4879      	ldr	r0, [pc, #484]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80005da:	f002 fa29 	bl	8002a30 <HAL_I2C_Master_Receive>
	H0_rH_Value = H0_rH_Value / 2;
 80005de:	4b79      	ldr	r3, [pc, #484]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b77      	ldr	r3, [pc, #476]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005e8:	701a      	strb	r2, [r3, #0]

	// Register H1_rh_x2, address 0x31. Divide register value by 2 for calibration value
	uint8_t H1_rH_Address = 0x31;
 80005ea:	2331      	movs	r3, #49	; 0x31
 80005ec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_rH_Address, sizeof(H1_rH_Address), 1000);
 80005ee:	f107 020e 	add.w	r2, r7, #14
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	21be      	movs	r1, #190	; 0xbe
 80005fc:	4870      	ldr	r0, [pc, #448]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80005fe:	f002 f923 	bl	8002848 <HAL_I2C_Master_Transmit>
	H1_rH_Value = 0xff; // Junk default value
 8000602:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <HTS221_get_cal_data+0x220>)
 8000604:	22ff      	movs	r2, #255	; 0xff
 8000606:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_rH_Value, sizeof(H1_rH_Value), 1000);
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	4a6d      	ldr	r2, [pc, #436]	; (80007c8 <HTS221_get_cal_data+0x220>)
 8000612:	21bf      	movs	r1, #191	; 0xbf
 8000614:	486a      	ldr	r0, [pc, #424]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000616:	f002 fa0b 	bl	8002a30 <HAL_I2C_Master_Receive>
	H1_rH_Value = H1_rH_Value / 2;
 800061a:	4b6b      	ldr	r3, [pc, #428]	; (80007c8 <HTS221_get_cal_data+0x220>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	085b      	lsrs	r3, r3, #1
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b69      	ldr	r3, [pc, #420]	; (80007c8 <HTS221_get_cal_data+0x220>)
 8000624:	701a      	strb	r2, [r3, #0]

	// Register H0_T0_OUT, addresses 0x36 and 0x37
	uint8_t H0_T0_OUT_Address = 0x36 | 0x80;
 8000626:	23b6      	movs	r3, #182	; 0xb6
 8000628:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_T0_OUT_Address, sizeof(H0_T0_OUT_Address), 1000);
 800062a:	f107 020d 	add.w	r2, r7, #13
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	21be      	movs	r1, #190	; 0xbe
 8000638:	4861      	ldr	r0, [pc, #388]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800063a:	f002 f905 	bl	8002848 <HAL_I2C_Master_Transmit>
	H0_T0_OUT_Value = 0xffff; // Junk default value
 800063e:	4b63      	ldr	r3, [pc, #396]	; (80007cc <HTS221_get_cal_data+0x224>)
 8000640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000644:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_T0_OUT_Value, sizeof(H0_T0_OUT_Value), 1000);
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2302      	movs	r3, #2
 800064e:	4a5f      	ldr	r2, [pc, #380]	; (80007cc <HTS221_get_cal_data+0x224>)
 8000650:	21bf      	movs	r1, #191	; 0xbf
 8000652:	485b      	ldr	r0, [pc, #364]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000654:	f002 f9ec 	bl	8002a30 <HAL_I2C_Master_Receive>

	// Register H1_T0_OUT, addresses 0x3A and 0x3B
	uint8_t H1_T0_OUT_Address = 0x3A | 0x80;
 8000658:	23ba      	movs	r3, #186	; 0xba
 800065a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_T0_OUT_Address, sizeof(H1_T0_OUT_Address), 1000);
 800065c:	f107 020c 	add.w	r2, r7, #12
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21be      	movs	r1, #190	; 0xbe
 800066a:	4855      	ldr	r0, [pc, #340]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800066c:	f002 f8ec 	bl	8002848 <HAL_I2C_Master_Transmit>
	H1_T0_OUT_Value = 0xffff; // Junk default value
 8000670:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <HTS221_get_cal_data+0x228>)
 8000672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000676:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_T0_OUT_Value, sizeof(H1_T0_OUT_Value), 1000);
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2302      	movs	r3, #2
 8000680:	4a53      	ldr	r2, [pc, #332]	; (80007d0 <HTS221_get_cal_data+0x228>)
 8000682:	21bf      	movs	r1, #191	; 0xbf
 8000684:	484e      	ldr	r0, [pc, #312]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000686:	f002 f9d3 	bl	8002a30 <HAL_I2C_Master_Receive>

    /*****************************************************************************************************************/
    // Temperature calibration values

    // Register T0_degC_x8, address 0x32. Divide register value by 8 for calibration value
    uint8_t T0_degC_Address = 0x32;
 800068a:	2332      	movs	r3, #50	; 0x32
 800068c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_degC_Address, sizeof(T0_degC_Address), 1000);
 800068e:	f107 020b 	add.w	r2, r7, #11
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	21be      	movs	r1, #190	; 0xbe
 800069c:	4848      	ldr	r0, [pc, #288]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800069e:	f002 f8d3 	bl	8002848 <HAL_I2C_Master_Transmit>
	T0_degC_Value = 0xff; // Junk default value
 80006a2:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_degC_Value, sizeof(T0_degC_Value), 1000);
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4a48      	ldr	r2, [pc, #288]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006b2:	21bf      	movs	r1, #191	; 0xbf
 80006b4:	4842      	ldr	r0, [pc, #264]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80006b6:	f002 f9bb 	bl	8002a30 <HAL_I2C_Master_Receive>
	T0_degC_Value = T0_degC_Value / 8;
 80006ba:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	08db      	lsrs	r3, r3, #3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b44      	ldr	r3, [pc, #272]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006c4:	701a      	strb	r2, [r3, #0]

    // Register T1_degC_x8, address 0x33. Divide register value by 8 for calibration value
    uint8_t T1_degC_Address = 0x33;
 80006c6:	2333      	movs	r3, #51	; 0x33
 80006c8:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_degC_Address, sizeof(T1_degC_Address), 1000);
 80006ca:	f107 020a 	add.w	r2, r7, #10
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2301      	movs	r3, #1
 80006d6:	21be      	movs	r1, #190	; 0xbe
 80006d8:	4839      	ldr	r0, [pc, #228]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80006da:	f002 f8b5 	bl	8002848 <HAL_I2C_Master_Transmit>
	T1_degC_Value = 0xff; // Junk default value
 80006de:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <HTS221_get_cal_data+0x230>)
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_degC_Value, sizeof(T1_degC_Value), 1000);
 80006e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <HTS221_get_cal_data+0x230>)
 80006ee:	21bf      	movs	r1, #191	; 0xbf
 80006f0:	4833      	ldr	r0, [pc, #204]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80006f2:	f002 f99d 	bl	8002a30 <HAL_I2C_Master_Receive>
	T1_degC_Value = T1_degC_Value / 8;
 80006f6:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <HTS221_get_cal_data+0x230>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <HTS221_get_cal_data+0x230>)
 8000700:	701a      	strb	r2, [r3, #0]

    // Register T1/T0 msb, address 0x35. Mask bits (0 & 1), (2 & 3) to get values of T0_degC & T1_degC
    uint8_t T1_T0_msb_Address = 0x35;
 8000702:	2335      	movs	r3, #53	; 0x35
 8000704:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_T0_msb_Address, sizeof(T1_T0_msb_Address), 1000);
 8000706:	f107 0209 	add.w	r2, r7, #9
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	21be      	movs	r1, #190	; 0xbe
 8000714:	482a      	ldr	r0, [pc, #168]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000716:	f002 f897 	bl	8002848 <HAL_I2C_Master_Transmit>
	uint8_t T1_T0_msb_Value = 0xff; // Junk default value
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_T0_msb_Value, sizeof(T1_T0_msb_Value), 1000);
 800071e:	f107 0208 	add.w	r2, r7, #8
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2301      	movs	r3, #1
 800072a:	21bf      	movs	r1, #191	; 0xbf
 800072c:	4824      	ldr	r0, [pc, #144]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800072e:	f002 f97f 	bl	8002a30 <HAL_I2C_Master_Receive>
	T0_degC = (T1_T0_msb_Value && (0b0011));
 8000732:	7a3b      	ldrb	r3, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <HTS221_get_cal_data+0x234>)
 8000742:	701a      	strb	r2, [r3, #0]
    T1_degC = (T1_T0_msb_Value && (0b1100));
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HTS221_get_cal_data+0x238>)
 8000754:	701a      	strb	r2, [r3, #0]

    // Register T0_OUT, addresses 0x3C and 0x3D
	uint8_t T0_OUT_Address = 0x3C | 0x80;
 8000756:	23bc      	movs	r3, #188	; 0xbc
 8000758:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_OUT_Address, sizeof(T0_OUT_Address), 1000);
 800075a:	1dfa      	adds	r2, r7, #7
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	21be      	movs	r1, #190	; 0xbe
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000768:	f002 f86e 	bl	8002848 <HAL_I2C_Master_Transmit>
	T0_OUT_Value = 0xffff; // Junk default value
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <HTS221_get_cal_data+0x23c>)
 800076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000772:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_OUT_Value, sizeof(T0_OUT_Value), 1000);
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2302      	movs	r3, #2
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HTS221_get_cal_data+0x23c>)
 800077e:	21bf      	movs	r1, #191	; 0xbf
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000782:	f002 f955 	bl	8002a30 <HAL_I2C_Master_Receive>

    // Register T1_OUT, addresses 0x3C and 0x3D
	uint8_t T1_OUT_Address = 0x3C | 0x80;
 8000786:	23bc      	movs	r3, #188	; 0xbc
 8000788:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_OUT_Address, sizeof(T1_OUT_Address), 1000);
 800078a:	1dba      	adds	r2, r7, #6
 800078c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	21be      	movs	r1, #190	; 0xbe
 8000796:	480a      	ldr	r0, [pc, #40]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000798:	f002 f856 	bl	8002848 <HAL_I2C_Master_Transmit>
	T1_OUT_Value = 0xffff; // Junk default value
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HTS221_get_cal_data+0x240>)
 800079e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a2:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_OUT_Value, sizeof(T1_OUT_Value), 1000);
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2302      	movs	r3, #2
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HTS221_get_cal_data+0x240>)
 80007ae:	21bf      	movs	r1, #191	; 0xbf
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80007b2:	f002 f93d 	bl	8002a30 <HAL_I2C_Master_Receive>

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000588 	.word	0x20000588
 80007c4:	20000758 	.word	0x20000758
 80007c8:	2000075c 	.word	0x2000075c
 80007cc:	200005d4 	.word	0x200005d4
 80007d0:	20000684 	.word	0x20000684
 80007d4:	200000f8 	.word	0x200000f8
 80007d8:	2000075d 	.word	0x2000075d
 80007dc:	200005d6 	.word	0x200005d6
 80007e0:	20000754 	.word	0x20000754
 80007e4:	2000075a 	.word	0x2000075a
 80007e8:	20000756 	.word	0x20000756

080007ec <HTS221_get_sensor_data>:

static void HTS221_get_sensor_data(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a2      	sub	sp, #136	; 0x88
 80007f0:	af02      	add	r7, sp, #8
    // Large char buffer for strings sent over the console
    char buffer[100] = {0};
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	; 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fab8 	bl	8005d74 <memset>

	// Configure control register 2 (CTRL_REG2, 0x21) bit 0 to enable one-shot
    uint8_t ctrlReg2 = 0x21;
 8000804:	2321      	movs	r3, #33	; 0x21
 8000806:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint8_t ctrlData[] = {ctrlReg2, (1 << 0)};
 800080a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800080e:	743b      	strb	r3, [r7, #16]
 8000810:	2301      	movs	r3, #1
 8000812:	747b      	strb	r3, [r7, #17]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, ctrlData, sizeof(ctrlData), 1000);
 8000814:	f107 0210 	add.w	r2, r7, #16
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2302      	movs	r3, #2
 8000820:	21be      	movs	r1, #190	; 0xbe
 8000822:	486a      	ldr	r0, [pc, #424]	; (80009cc <HTS221_get_sensor_data+0x1e0>)
 8000824:	f002 f810 	bl	8002848 <HAL_I2C_Master_Transmit>

    // Define status register (STATUS_REG2, 0x27) bit 0 to monitor for new sample available
    uint8_t statusReg = 0x27;
 8000828:	2327      	movs	r3, #39	; 0x27
 800082a:	73fb      	strb	r3, [r7, #15]
    uint8_t sampleReady = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73bb      	strb	r3, [r7, #14]

    // Loiter for a bit to allow time for conversion to complete and be made available
    uint8_t count = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 8000836:	e020      	b.n	800087a <HTS221_get_sensor_data+0x8e>
    {
        // Send the address of the status register
        HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &statusReg, sizeof(statusReg), 1000);
 8000838:	f107 020f 	add.w	r2, r7, #15
 800083c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	21be      	movs	r1, #190	; 0xbe
 8000846:	4861      	ldr	r0, [pc, #388]	; (80009cc <HTS221_get_sensor_data+0x1e0>)
 8000848:	f001 fffe 	bl	8002848 <HAL_I2C_Master_Transmit>

        // Read back the value of the status register
        HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&sampleReady, sizeof(sampleReady), 1000);
 800084c:	f107 020e 	add.w	r2, r7, #14
 8000850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	21bf      	movs	r1, #191	; 0xbf
 800085a:	485c      	ldr	r0, [pc, #368]	; (80009cc <HTS221_get_sensor_data+0x1e0>)
 800085c:	f002 f8e8 	bl	8002a30 <HAL_I2C_Master_Receive>

        // If the new sample is ready, break out of while-loop...
        if (sampleReady & 0x01)
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10c      	bne.n	8000884 <HTS221_get_sensor_data+0x98>
        {
            break;
        }

        // Else wait for a bit, increment the counter, and keep looping
        HAL_Delay(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f001 f9ce 	bl	8001c0c <HAL_Delay>
        count++;
 8000870:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000874:	3301      	adds	r3, #1
 8000876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 800087a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800087e:	2b09      	cmp	r3, #9
 8000880:	d9da      	bls.n	8000838 <HTS221_get_sensor_data+0x4c>
 8000882:	e000      	b.n	8000886 <HTS221_get_sensor_data+0x9a>
            break;
 8000884:	bf00      	nop
    }

    // Read the values of the humidity register H_OUT, address 0x28 and 0x29
	uint8_t H_OUT_Address = 0x28 | 0x80;
 8000886:	23a8      	movs	r3, #168	; 0xa8
 8000888:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H_OUT_Address, sizeof(H_OUT_Address), 1000);
 800088a:	f107 020d 	add.w	r2, r7, #13
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	21be      	movs	r1, #190	; 0xbe
 8000898:	484c      	ldr	r0, [pc, #304]	; (80009cc <HTS221_get_sensor_data+0x1e0>)
 800089a:	f001 ffd5 	bl	8002848 <HAL_I2C_Master_Transmit>
	int16_t H_OUT_Value = 0xbeef; // Junk default value
 800089e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80008a2:	817b      	strh	r3, [r7, #10]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H_OUT_Value, sizeof(H_OUT_Value), 1000);
 80008a4:	f107 020a 	add.w	r2, r7, #10
 80008a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2302      	movs	r3, #2
 80008b0:	21bf      	movs	r1, #191	; 0xbf
 80008b2:	4846      	ldr	r0, [pc, #280]	; (80009cc <HTS221_get_sensor_data+0x1e0>)
 80008b4:	f002 f8bc 	bl	8002a30 <HAL_I2C_Master_Receive>

	// Calculate and print value of humidity in %rH.
	int16_t humidityValue = (((H1_rH_Value - H0_rH_Value) * (H_OUT_Value - H0_T0_OUT_Value))/(H1_T0_OUT_Value - H0_T0_OUT_Value)) + (H0_rH_Value);
 80008b8:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <HTS221_get_sensor_data+0x1e4>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <HTS221_get_sensor_data+0x1e8>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008c8:	4611      	mov	r1, r2
 80008ca:	4a43      	ldr	r2, [pc, #268]	; (80009d8 <HTS221_get_sensor_data+0x1ec>)
 80008cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008d0:	1a8a      	subs	r2, r1, r2
 80008d2:	fb02 f203 	mul.w	r2, r2, r3
 80008d6:	4b41      	ldr	r3, [pc, #260]	; (80009dc <HTS221_get_sensor_data+0x1f0>)
 80008d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008dc:	4619      	mov	r1, r3
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <HTS221_get_sensor_data+0x1ec>)
 80008e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e4:	1acb      	subs	r3, r1, r3
 80008e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <HTS221_get_sensor_data+0x1e8>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	snprintf(buffer, sizeof(buffer), "\tHumidity: %d%%rH\n", humidityValue);
 80008fa:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80008fe:	f107 0014 	add.w	r0, r7, #20
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <HTS221_get_sensor_data+0x1f4>)
 8000904:	2164      	movs	r1, #100	; 0x64
 8000906:	f005 fa3d 	bl	8005d84 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc5e 	bl	80001d0 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	f107 0114 	add.w	r1, r7, #20
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	4830      	ldr	r0, [pc, #192]	; (80009e4 <HTS221_get_sensor_data+0x1f8>)
 8000922:	f004 fa3e 	bl	8004da2 <HAL_UART_Transmit>


	// Read the values of the temperature register T_OUT, address 0x2A and 0x2B
	uint8_t T_OUT_Address = 0x28 | 0x80;
 8000926:	23a8      	movs	r3, #168	; 0xa8
 8000928:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T_OUT_Address, sizeof(T_OUT_Address), 1000);
 800092a:	f107 0209 	add.w	r2, r7, #9
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	21be      	movs	r1, #190	; 0xbe
 8000938:	4824      	ldr	r0, [pc, #144]	; (80009cc <HTS221_get_sensor_data+0x1e0>)
 800093a:	f001 ff85 	bl	8002848 <HAL_I2C_Master_Transmit>
	int16_t T_OUT_Value = 0xbeef; // Junk default value
 800093e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000942:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T_OUT_Value, sizeof(T_OUT_Value), 1000);
 8000944:	1dba      	adds	r2, r7, #6
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2302      	movs	r3, #2
 800094e:	21bf      	movs	r1, #191	; 0xbf
 8000950:	481e      	ldr	r0, [pc, #120]	; (80009cc <HTS221_get_sensor_data+0x1e0>)
 8000952:	f002 f86d 	bl	8002a30 <HAL_I2C_Master_Receive>

    // Calculate and print value of temperature in degC.
	int16_t temperatureValue = (((T1_degC_Value - T0_degC_Value) * (T_OUT_Value - T0_OUT_Value))/(T1_OUT_Value - T0_OUT_Value)) + (T0_degC_Value);
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <HTS221_get_sensor_data+0x1fc>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HTS221_get_sensor_data+0x200>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000966:	4611      	mov	r1, r2
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <HTS221_get_sensor_data+0x204>)
 800096a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800096e:	1a8a      	subs	r2, r1, r2
 8000970:	fb02 f203 	mul.w	r2, r2, r3
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HTS221_get_sensor_data+0x208>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	4619      	mov	r1, r3
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HTS221_get_sensor_data+0x204>)
 800097e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000982:	1acb      	subs	r3, r1, r3
 8000984:	fb92 f3f3 	sdiv	r3, r2, r3
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HTS221_get_sensor_data+0x200>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b29b      	uxth	r3, r3
 8000994:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	snprintf(buffer, sizeof(buffer), "\tTemperature: %ddegC\n", temperatureValue);
 8000998:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800099c:	f107 0014 	add.w	r0, r7, #20
 80009a0:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <HTS221_get_sensor_data+0x20c>)
 80009a2:	2164      	movs	r1, #100	; 0x64
 80009a4:	f005 f9ee 	bl	8005d84 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc0f 	bl	80001d0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f107 0114 	add.w	r1, r7, #20
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <HTS221_get_sensor_data+0x1f8>)
 80009c0:	f004 f9ef 	bl	8004da2 <HAL_UART_Transmit>

}
 80009c4:	bf00      	nop
 80009c6:	3780      	adds	r7, #128	; 0x80
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000588 	.word	0x20000588
 80009d0:	2000075c 	.word	0x2000075c
 80009d4:	20000758 	.word	0x20000758
 80009d8:	200005d4 	.word	0x200005d4
 80009dc:	20000684 	.word	0x20000684
 80009e0:	08006620 	.word	0x08006620
 80009e4:	200006d0 	.word	0x200006d0
 80009e8:	2000075d 	.word	0x2000075d
 80009ec:	200000f8 	.word	0x200000f8
 80009f0:	2000075a 	.word	0x2000075a
 80009f4:	20000756 	.word	0x20000756
 80009f8:	08006634 	.word	0x08006634

080009fc <LPS22HB_get_sensor_data>:

static void LPS22HB_get_sensor_data(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0a0      	sub	sp, #128	; 0x80
 8000a00:	af02      	add	r7, sp, #8
	//   read the pressure value in three byte-sized chunks, shifting them into a 32-bit word that is then converted
	//   to units of hPa, as described in the module datasheet, https://www.st.com/resource/en/datasheet/dm00140895.pdf
	/*****************************************************************************************************************/

	// Large char buffer for strings sent over the console
	char buffer[100] = {0};
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2260      	movs	r2, #96	; 0x60
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 f9b0 	bl	8005d74 <memset>

	// Register CTRL_REG2, address 0x11. Configures sensor module for one-shot mode
	uint8_t CTRL_REG2_Address = 0x11;
 8000a14:	2311      	movs	r3, #17
 8000a16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &CTRL_REG2_Address, sizeof(CTRL_REG2_Address), 1000);
 8000a18:	f107 020b 	add.w	r2, r7, #11
 8000a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2301      	movs	r3, #1
 8000a24:	21ba      	movs	r1, #186	; 0xba
 8000a26:	4839      	ldr	r0, [pc, #228]	; (8000b0c <LPS22HB_get_sensor_data+0x110>)
 8000a28:	f001 ff0e 	bl	8002848 <HAL_I2C_Master_Transmit>

	// Register PRESS_OUT_XL, address 0x28. Pressure output value (LSB)
	uint8_t PRESS_OUT_XL_Address = 0x28;
 8000a2c:	2328      	movs	r3, #40	; 0x28
 8000a2e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &PRESS_OUT_XL_Address, sizeof(PRESS_OUT_XL_Address), 1000);
 8000a30:	f107 020a 	add.w	r2, r7, #10
 8000a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	21ba      	movs	r1, #186	; 0xba
 8000a3e:	4833      	ldr	r0, [pc, #204]	; (8000b0c <LPS22HB_get_sensor_data+0x110>)
 8000a40:	f001 ff02 	bl	8002848 <HAL_I2C_Master_Transmit>
	uint8_t PRESS_OUT_XL_Value = 0xff; // Junk default value
 8000a44:	23ff      	movs	r3, #255	; 0xff
 8000a46:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Receive(&hi2c2, LPS22HB_READ_ADDRESS, (uint8_t *)&PRESS_OUT_XL_Value, sizeof(PRESS_OUT_XL_Value), 1000);
 8000a48:	f107 0209 	add.w	r2, r7, #9
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	21bb      	movs	r1, #187	; 0xbb
 8000a56:	482d      	ldr	r0, [pc, #180]	; (8000b0c <LPS22HB_get_sensor_data+0x110>)
 8000a58:	f001 ffea 	bl	8002a30 <HAL_I2C_Master_Receive>

	// Register PRESS_OUT_L, address 0x29. Pressure output value (mid part)
	uint8_t PRESS_OUT_L_Address = 0x29;
 8000a5c:	2329      	movs	r3, #41	; 0x29
 8000a5e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &PRESS_OUT_L_Address, sizeof(PRESS_OUT_L_Address), 1000);
 8000a60:	f107 0208 	add.w	r2, r7, #8
 8000a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	21ba      	movs	r1, #186	; 0xba
 8000a6e:	4827      	ldr	r0, [pc, #156]	; (8000b0c <LPS22HB_get_sensor_data+0x110>)
 8000a70:	f001 feea 	bl	8002848 <HAL_I2C_Master_Transmit>
	uint8_t PRESS_OUT_L_Value = 0xff; // Junk default value
 8000a74:	23ff      	movs	r3, #255	; 0xff
 8000a76:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(&hi2c2, LPS22HB_READ_ADDRESS, (uint8_t *)&PRESS_OUT_L_Value, sizeof(PRESS_OUT_L_Value), 1000);
 8000a78:	1dfa      	adds	r2, r7, #7
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2301      	movs	r3, #1
 8000a82:	21bb      	movs	r1, #187	; 0xbb
 8000a84:	4821      	ldr	r0, [pc, #132]	; (8000b0c <LPS22HB_get_sensor_data+0x110>)
 8000a86:	f001 ffd3 	bl	8002a30 <HAL_I2C_Master_Receive>

	// Register PRESS_OUT_XL, address 0x2A. Pressure output value (MSB)
	uint8_t PRESS_OUT_H_Address = 0x2A;
 8000a8a:	232a      	movs	r3, #42	; 0x2a
 8000a8c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &PRESS_OUT_H_Address, sizeof(PRESS_OUT_H_Address), 1000);
 8000a8e:	1dba      	adds	r2, r7, #6
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	21ba      	movs	r1, #186	; 0xba
 8000a9a:	481c      	ldr	r0, [pc, #112]	; (8000b0c <LPS22HB_get_sensor_data+0x110>)
 8000a9c:	f001 fed4 	bl	8002848 <HAL_I2C_Master_Transmit>
	uint8_t PRESS_OUT_H_Value = 0xff; // Junk default value
 8000aa0:	23ff      	movs	r3, #255	; 0xff
 8000aa2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Receive(&hi2c2, LPS22HB_READ_ADDRESS, (uint8_t *)&PRESS_OUT_H_Value, sizeof(PRESS_OUT_H_Value), 1000);
 8000aa4:	1d7a      	adds	r2, r7, #5
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2301      	movs	r3, #1
 8000aae:	21bb      	movs	r1, #187	; 0xbb
 8000ab0:	4816      	ldr	r0, [pc, #88]	; (8000b0c <LPS22HB_get_sensor_data+0x110>)
 8000ab2:	f001 ffbd 	bl	8002a30 <HAL_I2C_Master_Receive>

	// Variable to hold raw pressure output from sensor. Shift each PRESS_OUT_x variable in as directed in datasheet
	uint32_t PRESS_OUT_Value = (PRESS_OUT_XL_Value << 0);
 8000ab6:	7a7b      	ldrb	r3, [r7, #9]
 8000ab8:	677b      	str	r3, [r7, #116]	; 0x74
	PRESS_OUT_Value = PRESS_OUT_Value | (PRESS_OUT_L_Value << 8);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	461a      	mov	r2, r3
 8000ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	677b      	str	r3, [r7, #116]	; 0x74
	PRESS_OUT_Value = PRESS_OUT_Value | (PRESS_OUT_H_Value << 16);
 8000ac6:	797b      	ldrb	r3, [r7, #5]
 8000ac8:	041b      	lsls	r3, r3, #16
 8000aca:	461a      	mov	r2, r3
 8000acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	677b      	str	r3, [r7, #116]	; 0x74

	// Divide by 4096 as per datasheet to get units hPa and print results to console
	uint32_t pressureValue = PRESS_OUT_Value / 4096;
 8000ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ad4:	0b1b      	lsrs	r3, r3, #12
 8000ad6:	673b      	str	r3, [r7, #112]	; 0x70
	snprintf(buffer, sizeof(buffer), "\tPressure: %luhPa\n", pressureValue);
 8000ad8:	f107 000c 	add.w	r0, r7, #12
 8000adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ade:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <LPS22HB_get_sensor_data+0x114>)
 8000ae0:	2164      	movs	r1, #100	; 0x64
 8000ae2:	f005 f94f 	bl	8005d84 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb70 	bl	80001d0 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f107 010c 	add.w	r1, r7, #12
 8000af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <LPS22HB_get_sensor_data+0x118>)
 8000afe:	f004 f950 	bl	8004da2 <HAL_UART_Transmit>

}
 8000b02:	bf00      	nop
 8000b04:	3778      	adds	r7, #120	; 0x78
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000588 	.word	0x20000588
 8000b10:	0800664c 	.word	0x0800664c
 8000b14:	200006d0 	.word	0x200006d0

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1e:	f001 f800 	bl	8001b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b22:	f000 f893 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f000 fac5 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b2a:	f000 fa9d 	bl	8001068 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000b2e:	f000 f931 	bl	8000d94 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000b32:	f000 f967 	bl	8000e04 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000b36:	f000 f9a5 	bl	8000e84 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000b3a:	f000 f9c9 	bl	8000ed0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000b3e:	f000 fa05 	bl	8000f4c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b42:	f000 fa33 	bl	8000fac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b46:	f000 fa61 	bl	800100c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Enable the HTS221 PD bit in CR1 to allow collection of samples
  HTS221_pwr_en();
 8000b4a:	f7ff fd15 	bl	8000578 <HTS221_pwr_en>

  // Get the calibration data stored in the HTS221 non-volatile memory
  HTS221_get_cal_data();
 8000b4e:	f7ff fd2b 	bl	80005a8 <HTS221_get_cal_data>

  // Header info for CLI
  char* cliHeader = "\nsimpleCLI Interface v0.4\n------------------------------\n";
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <main+0x118>)
 8000b54:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart1, (uint8_t*) cliHeader, strlen(cliHeader), 1000);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fb3a 	bl	80001d0 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	68f9      	ldr	r1, [r7, #12]
 8000b66:	4833      	ldr	r0, [pc, #204]	; (8000c34 <main+0x11c>)
 8000b68:	f004 f91b 	bl	8004da2 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Define strings to structure prompt around
	  char* cliPrompt = "Options:\n\t1: HTS221 read\n\t2: LPS22HB read\n\t3: RTC read (not implemented)\r\n$> ";
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <main+0x120>)
 8000b6e:	60bb      	str	r3, [r7, #8]
	  char* cliResponse = "Invalid input!\r\n";
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <main+0x124>)
 8000b72:	607b      	str	r3, [r7, #4]

	  // Issue prompt
	  HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f7ff fb2b 	bl	80001d0 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	482b      	ldr	r0, [pc, #172]	; (8000c34 <main+0x11c>)
 8000b86:	f004 f90c 	bl	8004da2 <HAL_UART_Transmit>

	  // Get the user selection and echo it on the terminal
	  char cliInput;
	  HAL_UART_Receive(&huart1, (uint8_t*) &cliInput, 1, HAL_MAX_DELAY);
 8000b8a:	1cf9      	adds	r1, r7, #3
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	2201      	movs	r2, #1
 8000b92:	4828      	ldr	r0, [pc, #160]	; (8000c34 <main+0x11c>)
 8000b94:	f004 f999 	bl	8004eca <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, (uint8_t*) &cliInput, 1, 1000);
 8000b98:	1cf9      	adds	r1, r7, #3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4824      	ldr	r0, [pc, #144]	; (8000c34 <main+0x11c>)
 8000ba2:	f004 f8fe 	bl	8004da2 <HAL_UART_Transmit>

	  // Evaluate input
	  switch (cliInput)
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	2b33      	cmp	r3, #51	; 0x33
 8000baa:	d026      	beq.n	8000bfa <main+0xe2>
 8000bac:	2b33      	cmp	r3, #51	; 0x33
 8000bae:	dc32      	bgt.n	8000c16 <main+0xfe>
 8000bb0:	2b31      	cmp	r3, #49	; 0x31
 8000bb2:	d002      	beq.n	8000bba <main+0xa2>
 8000bb4:	2b32      	cmp	r3, #50	; 0x32
 8000bb6:	d010      	beq.n	8000bda <main+0xc2>
 8000bb8:	e02d      	b.n	8000c16 <main+0xfe>
	  {
		case '1':
			cliResponse = "\r\nHTS221 read request:\n";
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <main+0x128>)
 8000bbc:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fb06 	bl	80001d0 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4819      	ldr	r0, [pc, #100]	; (8000c34 <main+0x11c>)
 8000bd0:	f004 f8e7 	bl	8004da2 <HAL_UART_Transmit>
			HTS221_get_sensor_data();
 8000bd4:	f7ff fe0a 	bl	80007ec <HTS221_get_sensor_data>
			break;
 8000bd8:	e029      	b.n	8000c2e <main+0x116>

		case '2':
			cliResponse = "\r\nLPS22HB read request\n";
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <main+0x12c>)
 8000bdc:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff faf6 	bl	80001d0 <strlen>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <main+0x11c>)
 8000bf0:	f004 f8d7 	bl	8004da2 <HAL_UART_Transmit>
			LPS22HB_get_sensor_data();
 8000bf4:	f7ff ff02 	bl	80009fc <LPS22HB_get_sensor_data>
			break;
 8000bf8:	e019      	b.n	8000c2e <main+0x116>

		case '3':
			cliResponse = "\r\nRTC read *not implemented*\n";
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <main+0x130>)
 8000bfc:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fae6 	bl	80001d0 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <main+0x11c>)
 8000c10:	f004 f8c7 	bl	8004da2 <HAL_UART_Transmit>
			// TBD()
			break;
 8000c14:	e00b      	b.n	8000c2e <main+0x116>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fada 	bl	80001d0 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <main+0x11c>)
 8000c28:	f004 f8bb 	bl	8004da2 <HAL_UART_Transmit>
			break;
 8000c2c:	bf00      	nop
  {
 8000c2e:	e79d      	b.n	8000b6c <main+0x54>
 8000c30:	08006660 	.word	0x08006660
 8000c34:	200006d0 	.word	0x200006d0
 8000c38:	0800669c 	.word	0x0800669c
 8000c3c:	080066ec 	.word	0x080066ec
 8000c40:	08006700 	.word	0x08006700
 8000c44:	08006718 	.word	0x08006718
 8000c48:	08006730 	.word	0x08006730

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0b8      	sub	sp, #224	; 0xe0
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c56:	2244      	movs	r2, #68	; 0x44
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 f88a 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2288      	movs	r2, #136	; 0x88
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f005 f87c 	bl	8005d74 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c7c:	f002 fba8 	bl	80033d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <SystemClock_Config+0x140>)
 8000c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c86:	4a41      	ldr	r2, [pc, #260]	; (8000d8c <SystemClock_Config+0x140>)
 8000c88:	f023 0318 	bic.w	r3, r3, #24
 8000c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c90:	2314      	movs	r3, #20
 8000c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ca8:	2360      	movs	r3, #96	; 0x60
 8000caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cc0:	2328      	movs	r3, #40	; 0x28
 8000cc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fcb7 	bl	8003650 <HAL_RCC_OscConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ce8:	f000 fb94 	bl	8001414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cec:	230f      	movs	r3, #15
 8000cee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d0a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d0e:	2104      	movs	r1, #4
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 f883 	bl	8003e1c <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d1c:	f000 fb7a 	bl	8001414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <SystemClock_Config+0x144>)
 8000d22:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d44:	2318      	movs	r3, #24
 8000d46:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000d54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d58:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fa63 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000d68:	f000 fb54 	bl	8001414 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d70:	f002 fb4c 	bl	800340c <HAL_PWREx_ControlVoltageScaling>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000d7a:	f000 fb4b 	bl	8001414 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d7e:	f003 fd3d 	bl	80047fc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d82:	bf00      	nop
 8000d84:	37e0      	adds	r7, #224	; 0xe0
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	00012085 	.word	0x00012085

08000d94 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000d9a:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <MX_DFSDM1_Init+0x6c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_DFSDM1_Init+0x68>)
 8000dea:	f001 f845 	bl	8001e78 <HAL_DFSDM_ChannelInit>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000df4:	f000 fb0e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000c0 	.word	0x200000c0
 8000e00:	40016020 	.word	0x40016020

08000e04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <MX_I2C2_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <MX_I2C2_Init+0x7c>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e40:	f001 fc73 	bl	800272a <HAL_I2C_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e4a:	f000 fae3 	bl	8001414 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e52:	f002 f8dd 	bl	8003010 <HAL_I2CEx_ConfigAnalogFilter>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e5c:	f000 fada 	bl	8001414 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_I2C2_Init+0x74>)
 8000e64:	f002 f91f 	bl	80030a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 fad1 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000588 	.word	0x20000588
 8000e7c:	40005800 	.word	0x40005800
 8000e80:	10909cec 	.word	0x10909cec

08000e84 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <MX_QUADSPI_Init+0x48>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000e9c:	2210      	movs	r2, #16
 8000e9e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000ea2:	2217      	movs	r2, #23
 8000ea4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_QUADSPI_Init+0x44>)
 8000eb4:	f002 fb10 	bl	80034d8 <HAL_QSPI_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ebe:	f000 faa9 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000760 	.word	0x20000760
 8000ecc:	a0001000 	.word	0xa0001000

08000ed0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_SPI3_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000eea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_SPI3_Init+0x74>)
 8000f30:	f003 fe46 	bl	8004bc0 <HAL_SPI_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fa6b 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200005d8 	.word	0x200005d8
 8000f48:	40003c00 	.word	0x40003c00

08000f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_USART1_UART_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f90:	f003 feb9 	bl	8004d06 <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 fa3b 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200006d0 	.word	0x200006d0
 8000fa8:	40013800 	.word	0x40013800

08000fac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_USART3_UART_Init+0x5c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000ff0:	f003 fe89 	bl	8004d06 <HAL_UART_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f000 fa0b 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000fc 	.word	0x200000fc
 8001008:	40004800 	.word	0x40004800

0800100c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001012:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001016:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2206      	movs	r2, #6
 800101c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	2202      	movs	r2, #2
 8001022:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001026:	2202      	movs	r2, #2
 8001028:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001050:	f002 f875 	bl	800313e <HAL_PCD_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800105a:	f000 f9db 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000180 	.word	0x20000180

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <MX_DMA_Init+0x48>)
 8001070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <MX_DMA_Init+0x48>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6493      	str	r3, [r2, #72]	; 0x48
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <MX_DMA_Init+0x48>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200e      	movs	r0, #14
 800108c:	f000 febd 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001090:	200e      	movs	r0, #14
 8001092:	f000 fed6 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200f      	movs	r0, #15
 800109c:	f000 feb5 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010a0:	200f      	movs	r0, #15
 80010a2:	f000 fece 	bl	8001e42 <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ca:	4bba      	ldr	r3, [pc, #744]	; (80013b4 <MX_GPIO_Init+0x300>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4ab9      	ldr	r2, [pc, #740]	; (80013b4 <MX_GPIO_Init+0x300>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4bb7      	ldr	r3, [pc, #732]	; (80013b4 <MX_GPIO_Init+0x300>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4bb4      	ldr	r3, [pc, #720]	; (80013b4 <MX_GPIO_Init+0x300>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4ab3      	ldr	r2, [pc, #716]	; (80013b4 <MX_GPIO_Init+0x300>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4bb1      	ldr	r3, [pc, #708]	; (80013b4 <MX_GPIO_Init+0x300>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4bae      	ldr	r3, [pc, #696]	; (80013b4 <MX_GPIO_Init+0x300>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4aad      	ldr	r2, [pc, #692]	; (80013b4 <MX_GPIO_Init+0x300>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4bab      	ldr	r3, [pc, #684]	; (80013b4 <MX_GPIO_Init+0x300>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4ba8      	ldr	r3, [pc, #672]	; (80013b4 <MX_GPIO_Init+0x300>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4aa7      	ldr	r2, [pc, #668]	; (80013b4 <MX_GPIO_Init+0x300>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4ba5      	ldr	r3, [pc, #660]	; (80013b4 <MX_GPIO_Init+0x300>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	4ba2      	ldr	r3, [pc, #648]	; (80013b4 <MX_GPIO_Init+0x300>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4aa1      	ldr	r2, [pc, #644]	; (80013b4 <MX_GPIO_Init+0x300>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b9f      	ldr	r3, [pc, #636]	; (80013b4 <MX_GPIO_Init+0x300>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001148:	489b      	ldr	r0, [pc, #620]	; (80013b8 <MX_GPIO_Init+0x304>)
 800114a:	f001 fab3 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f248 1104 	movw	r1, #33028	; 0x8104
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f001 faac 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800115c:	2200      	movs	r2, #0
 800115e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001162:	4896      	ldr	r0, [pc, #600]	; (80013bc <MX_GPIO_Init+0x308>)
 8001164:	f001 faa6 	bl	80026b4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f241 0181 	movw	r1, #4225	; 0x1081
 800116e:	4894      	ldr	r0, [pc, #592]	; (80013c0 <MX_GPIO_Init+0x30c>)
 8001170:	f001 faa0 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	4891      	ldr	r0, [pc, #580]	; (80013c0 <MX_GPIO_Init+0x30c>)
 800117c:	f001 fa9a 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001186:	488f      	ldr	r0, [pc, #572]	; (80013c4 <MX_GPIO_Init+0x310>)
 8001188:	f001 fa94 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2120      	movs	r1, #32
 8001190:	488a      	ldr	r0, [pc, #552]	; (80013bc <MX_GPIO_Init+0x308>)
 8001192:	f001 fa8f 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2101      	movs	r1, #1
 800119a:	4887      	ldr	r0, [pc, #540]	; (80013b8 <MX_GPIO_Init+0x304>)
 800119c:	f001 fa8a 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80011a0:	f240 1315 	movw	r3, #277	; 0x115
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	487f      	ldr	r0, [pc, #508]	; (80013b8 <MX_GPIO_Init+0x304>)
 80011ba:	f001 f8d1 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80011be:	236a      	movs	r3, #106	; 0x6a
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c2:	4b81      	ldr	r3, [pc, #516]	; (80013c8 <MX_GPIO_Init+0x314>)
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4879      	ldr	r0, [pc, #484]	; (80013b8 <MX_GPIO_Init+0x304>)
 80011d2:	f001 f8c5 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80011d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011dc:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <MX_GPIO_Init+0x318>)
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4876      	ldr	r0, [pc, #472]	; (80013c4 <MX_GPIO_Init+0x310>)
 80011ec:	f001 f8b8 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80011f0:	233f      	movs	r3, #63	; 0x3f
 80011f2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011f4:	230b      	movs	r3, #11
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4870      	ldr	r0, [pc, #448]	; (80013c4 <MX_GPIO_Init+0x310>)
 8001204:	f001 f8ac 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001208:	2303      	movs	r3, #3
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001218:	2308      	movs	r3, #8
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001226:	f001 f89b 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800122a:	f248 1304 	movw	r3, #33028	; 0x8104
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f001 f88b 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800124a:	2308      	movs	r3, #8
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f001 f87a 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800126c:	2310      	movs	r3, #16
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001270:	230b      	movs	r3, #11
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 f86d 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001286:	23e0      	movs	r3, #224	; 0xe0
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001296:	2305      	movs	r3, #5
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f001 f85c 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ac:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <MX_GPIO_Init+0x314>)
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4840      	ldr	r0, [pc, #256]	; (80013bc <MX_GPIO_Init+0x308>)
 80012bc:	f001 f850 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012c0:	2302      	movs	r3, #2
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012c4:	230b      	movs	r3, #11
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	483a      	ldr	r0, [pc, #232]	; (80013bc <MX_GPIO_Init+0x308>)
 80012d4:	f001 f844 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80012d8:	f24f 0334 	movw	r3, #61492	; 0xf034
 80012dc:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4832      	ldr	r0, [pc, #200]	; (80013bc <MX_GPIO_Init+0x308>)
 80012f2:	f001 f835 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80012f6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80012fa:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <MX_GPIO_Init+0x314>)
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	482d      	ldr	r0, [pc, #180]	; (80013c0 <MX_GPIO_Init+0x30c>)
 800130c:	f001 f828 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001310:	f243 0381 	movw	r3, #12417	; 0x3081
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4825      	ldr	r0, [pc, #148]	; (80013c0 <MX_GPIO_Init+0x30c>)
 800132a:	f001 f819 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800132e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	481f      	ldr	r0, [pc, #124]	; (80013c4 <MX_GPIO_Init+0x310>)
 8001348:	f001 f80a 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800134c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_GPIO_Init+0x314>)
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4818      	ldr	r0, [pc, #96]	; (80013c4 <MX_GPIO_Init+0x310>)
 8001362:	f000 fffd 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001366:	2302      	movs	r3, #2
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001376:	2305      	movs	r3, #5
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <MX_GPIO_Init+0x30c>)
 8001382:	f000 ffed 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001386:	2378      	movs	r3, #120	; 0x78
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001396:	2307      	movs	r3, #7
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_GPIO_Init+0x30c>)
 80013a2:	f000 ffdd 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e00d      	b.n	80013d0 <MX_GPIO_Init+0x31c>
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48001000 	.word	0x48001000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	48000c00 	.word	0x48000c00
 80013c4:	48000800 	.word	0x48000800
 80013c8:	10110000 	.word	0x10110000
 80013cc:	10210000 	.word	0x10210000
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d6:	2304      	movs	r3, #4
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x35c>)
 80013e2:	f000 ffbd 	bl	8002360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2017      	movs	r0, #23
 80013ec:	f000 fd0d 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013f0:	2017      	movs	r0, #23
 80013f2:	f000 fd26 	bl	8001e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2028      	movs	r0, #40	; 0x28
 80013fc:	f000 fd05 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001400:	2028      	movs	r0, #40	; 0x28
 8001402:	f000 fd1e 	bl	8001e42 <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	48000400 	.word	0x48000400

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_MspInit+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_MspInit+0x44>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x44>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x44>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x84>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d12d      	bne.n	80014e4 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800148a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001492:	6613      	str	r3, [r2, #96]	; 0x60
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x88>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x88>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x88>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80014b8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014ca:	2306      	movs	r3, #6
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80014d6:	f000 ff43 	bl	8002360 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x84>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a02      	ldr	r2, [pc, #8]	; (80014ec <HAL_DFSDM_ChannelMspInit+0x84>)
 80014e2:	6013      	str	r3, [r2, #0]
  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000008c 	.word	0x2000008c
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48001000 	.word	0x48001000

080014f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a45      	ldr	r2, [pc, #276]	; (800162c <HAL_I2C_MspInit+0x134>)
 8001516:	4293      	cmp	r3, r2
 8001518:	f040 8083 	bne.w	8001622 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <HAL_I2C_MspInit+0x138>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <HAL_I2C_MspInit+0x138>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_I2C_MspInit+0x138>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001534:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001546:	2304      	movs	r3, #4
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4838      	ldr	r0, [pc, #224]	; (8001634 <HAL_I2C_MspInit+0x13c>)
 8001552:	f000 ff05 	bl	8002360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001556:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_I2C_MspInit+0x138>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a35      	ldr	r2, [pc, #212]	; (8001630 <HAL_I2C_MspInit+0x138>)
 800155c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_I2C_MspInit+0x138>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <HAL_I2C_MspInit+0x140>)
 8001570:	4a32      	ldr	r2, [pc, #200]	; (800163c <HAL_I2C_MspInit+0x144>)
 8001572:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8001574:	4b30      	ldr	r3, [pc, #192]	; (8001638 <HAL_I2C_MspInit+0x140>)
 8001576:	2203      	movs	r2, #3
 8001578:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_I2C_MspInit+0x140>)
 800157c:	2210      	movs	r2, #16
 800157e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_I2C_MspInit+0x140>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <HAL_I2C_MspInit+0x140>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_I2C_MspInit+0x140>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_I2C_MspInit+0x140>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_I2C_MspInit+0x140>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_I2C_MspInit+0x140>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80015a4:	4824      	ldr	r0, [pc, #144]	; (8001638 <HAL_I2C_MspInit+0x140>)
 80015a6:	f000 fd73 	bl	8002090 <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80015b0:	f7ff ff30 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a20      	ldr	r2, [pc, #128]	; (8001638 <HAL_I2C_MspInit+0x140>)
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
 80015ba:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <HAL_I2C_MspInit+0x140>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015c2:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_I2C_MspInit+0x14c>)
 80015c4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015c8:	2203      	movs	r2, #3
 80015ca:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <HAL_I2C_MspInit+0x148>)
 80015f8:	f000 fd4a 	bl	8002090 <HAL_DMA_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8001602:	f7ff ff07 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_I2C_MspInit+0x148>)
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <HAL_I2C_MspInit+0x148>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2021      	movs	r0, #33	; 0x21
 8001618:	f000 fbf7 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800161c:	2021      	movs	r0, #33	; 0x21
 800161e:	f000 fc10 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005800 	.word	0x40005800
 8001630:	40021000 	.word	0x40021000
 8001634:	48000400 	.word	0x48000400
 8001638:	20000688 	.word	0x20000688
 800163c:	40020044 	.word	0x40020044
 8001640:	2000063c 	.word	0x2000063c
 8001644:	40020058 	.word	0x40020058

08001648 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_QSPI_MspInit+0x7c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d128      	bne.n	80016bc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_QSPI_MspInit+0x80>)
 800166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <HAL_QSPI_MspInit+0x80>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6513      	str	r3, [r2, #80]	; 0x50
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_QSPI_MspInit+0x80>)
 8001678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_QSPI_MspInit+0x80>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_QSPI_MspInit+0x80>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_QSPI_MspInit+0x80>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800169a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800169e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ac:	230a      	movs	r3, #10
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_QSPI_MspInit+0x84>)
 80016b8:	f000 fe52 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	a0001000 	.word	0xa0001000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48001000 	.word	0x48001000

080016d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_SPI_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d128      	bne.n	8001744 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_SPI_MspInit+0x80>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_SPI_MspInit+0x80>)
 80016f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fc:	6593      	str	r3, [r2, #88]	; 0x58
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_SPI_MspInit+0x80>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_SPI_MspInit+0x80>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_SPI_MspInit+0x80>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_SPI_MspInit+0x80>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001722:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001734:	2306      	movs	r3, #6
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_SPI_MspInit+0x84>)
 8001740:	f000 fe0e 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40003c00 	.word	0x40003c00
 8001750:	40021000 	.word	0x40021000
 8001754:	48000800 	.word	0x48000800

08001758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2e      	ldr	r2, [pc, #184]	; (8001830 <HAL_UART_MspInit+0xd8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d128      	bne.n	80017cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_UART_MspInit+0xdc>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_UART_MspInit+0xdc>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6613      	str	r3, [r2, #96]	; 0x60
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_UART_MspInit+0xdc>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_UART_MspInit+0xdc>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_UART_MspInit+0xdc>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_UART_MspInit+0xdc>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ba:	2307      	movs	r3, #7
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	481c      	ldr	r0, [pc, #112]	; (8001838 <HAL_UART_MspInit+0xe0>)
 80017c6:	f000 fdcb 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ca:	e02d      	b.n	8001828 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_UART_MspInit+0xe4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d128      	bne.n	8001828 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_UART_MspInit+0xdc>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_UART_MspInit+0xdc>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6593      	str	r3, [r2, #88]	; 0x58
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_UART_MspInit+0xdc>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_UART_MspInit+0xdc>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_UART_MspInit+0xdc>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_UART_MspInit+0xdc>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <HAL_UART_MspInit+0xe8>)
 8001824:	f000 fd9c 	bl	8002360 <HAL_GPIO_Init>
}
 8001828:	bf00      	nop
 800182a:	3730      	adds	r7, #48	; 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40013800 	.word	0x40013800
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400
 800183c:	40004800 	.word	0x40004800
 8001840:	48000c00 	.word	0x48000c00

08001844 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001864:	d154      	bne.n	8001910 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800187e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001896:	f000 fd63 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800189a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ac:	230a      	movs	r3, #10
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f000 fd51 	bl	8002360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 80018c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d114      	bne.n	800190c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6593      	str	r3, [r2, #88]	; 0x58
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80018fa:	f001 fddd 	bl	80034b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <HAL_PCD_MspInit+0xd4>)
 8001904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001908:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800190a:	e001      	b.n	8001910 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800190c:	f001 fdd4 	bl	80034b8 <HAL_PWREx_EnableVddUSB>
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 f930 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DMA1_Channel4_IRQHandler+0x10>)
 8001976:	f000 fc43 	bl	8002200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000688 	.word	0x20000688

08001984 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA1_Channel5_IRQHandler+0x10>)
 800198a:	f000 fc39 	bl	8002200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000063c 	.word	0x2000063c

08001998 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800199c:	2020      	movs	r0, #32
 800199e:	f000 fea1 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019a2:	2040      	movs	r0, #64	; 0x40
 80019a4:	f000 fe9e 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80019a8:	2080      	movs	r0, #128	; 0x80
 80019aa:	f000 fe9b 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019b2:	f000 fe97 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <I2C2_EV_IRQHandler+0x10>)
 80019c2:	f001 f92b 	bl	8002c1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000588 	.word	0x20000588

080019d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80019d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019d8:	f000 fe84 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019e0:	f000 fe80 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019e8:	f000 fe7c 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80019ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019f0:	f000 fe78 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80019f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019f8:	f000 fe74 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f004 f976 	bl	8005d20 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20018000 	.word	0x20018000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	20000090 	.word	0x20000090
 8001a68:	200007b8 	.word	0x200007b8

08001a6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <SystemInit+0x5c>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <SystemInit+0x5c>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <SystemInit+0x60>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a11      	ldr	r2, [pc, #68]	; (8001acc <SystemInit+0x60>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <SystemInit+0x60>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <SystemInit+0x60>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <SystemInit+0x60>)
 8001a98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <SystemInit+0x60>)
 8001aa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <SystemInit+0x60>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <SystemInit+0x60>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SystemInit+0x60>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	40021000 	.word	0x40021000

08001ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad4:	f7ff ffca 	bl	8001a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ad8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ada:	e003      	b.n	8001ae4 <LoopCopyDataInit>

08001adc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ade:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ae0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ae2:	3104      	adds	r1, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ae4:	480a      	ldr	r0, [pc, #40]	; (8001b10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ae8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001aec:	d3f6      	bcc.n	8001adc <CopyDataInit>
	ldr	r2, =_sbss
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001af0:	e002      	b.n	8001af8 <LoopFillZerobss>

08001af2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001af2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001af4:	f842 3b04 	str.w	r3, [r2], #4

08001af8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <LoopForever+0x16>)
	cmp	r2, r3
 8001afa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001afc:	d3f9      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afe:	f004 f915 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b02:	f7ff f809 	bl	8000b18 <main>

08001b06 <LoopForever>:

LoopForever:
    b LoopForever
 8001b06:	e7fe      	b.n	8001b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b0c:	080067dc 	.word	0x080067dc
	ldr	r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b14:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001b18:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001b1c:	200007b8 	.word	0x200007b8

08001b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_2_IRQHandler>

08001b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f961 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f80e 	bl	8001b54 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	e001      	b.n	8001b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b44:	f7ff fc6c 	bl	8001420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b48:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_InitTick+0x6c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d023      	beq.n	8001bb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_InitTick+0x70>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_InitTick+0x6c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f96d 	bl	8001e5e <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10f      	bne.n	8001baa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d809      	bhi.n	8001ba4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f937 	bl	8001e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_InitTick+0x74>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e007      	b.n	8001bb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e004      	b.n	8001bb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e001      	b.n	8001bb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	200007a4 	.word	0x200007a4

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	200007a4 	.word	0x200007a4

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff29 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff3e 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff8e 	bl	8001d48 <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5d 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff31 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0ac      	b.n	8001fe4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f8b2 	bl	8001ff8 <DFSDM_GetChannelFromInstance>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a55      	ldr	r2, [pc, #340]	; (8001fec <HAL_DFSDM_ChannelInit+0x174>)
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e09f      	b.n	8001fe4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fadf 	bl	8001468 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001eaa:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a4f      	ldr	r2, [pc, #316]	; (8001ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d125      	bne.n	8001f08 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ec6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4948      	ldr	r1, [pc, #288]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a46      	ldr	r2, [pc, #280]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001edc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001ee0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001eea:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	493f      	ldr	r1, [pc, #252]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3c      	ldr	r2, [pc, #240]	; (8001ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f06:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001f16:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f26:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001f2c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 020f 	bic.w	r2, r2, #15
 8001f44:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001f6c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6899      	ldr	r1, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f002 0207 	and.w	r2, r2, #7
 8001f98:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f810 	bl	8001ff8 <DFSDM_GetChannelFromInstance>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4904      	ldr	r1, [pc, #16]	; (8001fec <HAL_DFSDM_ChannelInit+0x174>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000098 	.word	0x20000098
 8001ff0:	20000094 	.word	0x20000094
 8001ff4:	40016000 	.word	0x40016000

08001ff8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <DFSDM_GetChannelFromInstance+0x7c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d102      	bne.n	800200e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e02b      	b.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <DFSDM_GetChannelFromInstance+0x80>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d102      	bne.n	800201c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e024      	b.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <DFSDM_GetChannelFromInstance+0x84>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d102      	bne.n	800202a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002024:	2302      	movs	r3, #2
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e01d      	b.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <DFSDM_GetChannelFromInstance+0x88>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d102      	bne.n	8002038 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002032:	2304      	movs	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e016      	b.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <DFSDM_GetChannelFromInstance+0x8c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d102      	bne.n	8002046 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002040:	2305      	movs	r3, #5
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e00f      	b.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <DFSDM_GetChannelFromInstance+0x90>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d102      	bne.n	8002054 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800204e:	2306      	movs	r3, #6
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e008      	b.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0d      	ldr	r2, [pc, #52]	; (800208c <DFSDM_GetChannelFromInstance+0x94>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d102      	bne.n	8002062 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800205c:	2307      	movs	r3, #7
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e001      	b.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002062:	2303      	movs	r3, #3
 8002064:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40016000 	.word	0x40016000
 8002078:	40016020 	.word	0x40016020
 800207c:	40016040 	.word	0x40016040
 8002080:	40016080 	.word	0x40016080
 8002084:	400160a0 	.word	0x400160a0
 8002088:	400160c0 	.word	0x400160c0
 800208c:	400160e0 	.word	0x400160e0

08002090 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e098      	b.n	80021d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b4d      	ldr	r3, [pc, #308]	; (80021e0 <HAL_DMA_Init+0x150>)
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d80f      	bhi.n	80020ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b4b      	ldr	r3, [pc, #300]	; (80021e4 <HAL_DMA_Init+0x154>)
 80020b6:	4413      	add	r3, r2
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_DMA_Init+0x158>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	009a      	lsls	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a48      	ldr	r2, [pc, #288]	; (80021ec <HAL_DMA_Init+0x15c>)
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
 80020cc:	e00e      	b.n	80020ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_DMA_Init+0x160>)
 80020d6:	4413      	add	r3, r2
 80020d8:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_DMA_Init+0x158>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	009a      	lsls	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a42      	ldr	r2, [pc, #264]	; (80021f4 <HAL_DMA_Init+0x164>)
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002146:	d039      	beq.n	80021bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_DMA_Init+0x15c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d11a      	bne.n	8002188 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_DMA_Init+0x168>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 031c 	and.w	r3, r3, #28
 800215e:	210f      	movs	r1, #15
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	4924      	ldr	r1, [pc, #144]	; (80021f8 <HAL_DMA_Init+0x168>)
 8002168:	4013      	ands	r3, r2
 800216a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_DMA_Init+0x168>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f003 031c 	and.w	r3, r3, #28
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	491d      	ldr	r1, [pc, #116]	; (80021f8 <HAL_DMA_Init+0x168>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
 8002186:	e019      	b.n	80021bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_DMA_Init+0x16c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	f003 031c 	and.w	r3, r3, #28
 8002194:	210f      	movs	r1, #15
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	4917      	ldr	r1, [pc, #92]	; (80021fc <HAL_DMA_Init+0x16c>)
 800219e:	4013      	ands	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_DMA_Init+0x16c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f003 031c 	and.w	r3, r3, #28
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	4911      	ldr	r1, [pc, #68]	; (80021fc <HAL_DMA_Init+0x16c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40020407 	.word	0x40020407
 80021e4:	bffdfff8 	.word	0xbffdfff8
 80021e8:	cccccccd 	.word	0xcccccccd
 80021ec:	40020000 	.word	0x40020000
 80021f0:	bffdfbf8 	.word	0xbffdfbf8
 80021f4:	40020400 	.word	0x40020400
 80021f8:	400200a8 	.word	0x400200a8
 80021fc:	400204a8 	.word	0x400204a8

08002200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	f003 031c 	and.w	r3, r3, #28
 8002220:	2204      	movs	r2, #4
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d026      	beq.n	800227a <HAL_DMA_IRQHandler+0x7a>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d021      	beq.n	800227a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f003 021c 	and.w	r2, r3, #28
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2104      	movs	r1, #4
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	2b00      	cmp	r3, #0
 800226e:	d071      	beq.n	8002354 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002278:	e06c      	b.n	8002354 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f003 031c 	and.w	r3, r3, #28
 8002282:	2202      	movs	r2, #2
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d02e      	beq.n	80022ec <HAL_DMA_IRQHandler+0xec>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d029      	beq.n	80022ec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10b      	bne.n	80022be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 020a 	bic.w	r2, r2, #10
 80022b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 021c 	and.w	r2, r3, #28
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2102      	movs	r1, #2
 80022cc:	fa01 f202 	lsl.w	r2, r1, r2
 80022d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d038      	beq.n	8002354 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022ea:	e033      	b.n	8002354 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f003 031c 	and.w	r3, r3, #28
 80022f4:	2208      	movs	r2, #8
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d02a      	beq.n	8002356 <HAL_DMA_IRQHandler+0x156>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d025      	beq.n	8002356 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 020e 	bic.w	r2, r2, #14
 8002318:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f003 021c 	and.w	r2, r3, #28
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002354:	bf00      	nop
 8002356:	bf00      	nop
}
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236e:	e17f      	b.n	8002670 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8171 	beq.w	800266a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d00b      	beq.n	80023a8 <HAL_GPIO_Init+0x48>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d007      	beq.n	80023a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239c:	2b11      	cmp	r3, #17
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b12      	cmp	r3, #18
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023de:	2201      	movs	r2, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b03      	cmp	r3, #3
 8002414:	d118      	bne.n	8002448 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x128>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b12      	cmp	r3, #18
 8002486:	d123      	bne.n	80024d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	08da      	lsrs	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3208      	adds	r2, #8
 80024ca:	6939      	ldr	r1, [r7, #16]
 80024cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0203 	and.w	r2, r3, #3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80ac 	beq.w	800266a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_GPIO_Init+0x330>)
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_GPIO_Init+0x330>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6613      	str	r3, [r2, #96]	; 0x60
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_GPIO_Init+0x330>)
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252a:	4a5a      	ldr	r2, [pc, #360]	; (8002694 <HAL_GPIO_Init+0x334>)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002554:	d025      	beq.n	80025a2 <HAL_GPIO_Init+0x242>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4f      	ldr	r2, [pc, #316]	; (8002698 <HAL_GPIO_Init+0x338>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <HAL_GPIO_Init+0x23e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4e      	ldr	r2, [pc, #312]	; (800269c <HAL_GPIO_Init+0x33c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x23a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4d      	ldr	r2, [pc, #308]	; (80026a0 <HAL_GPIO_Init+0x340>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x236>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_GPIO_Init+0x344>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x232>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <HAL_GPIO_Init+0x348>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x22e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4a      	ldr	r2, [pc, #296]	; (80026ac <HAL_GPIO_Init+0x34c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x22a>
 8002586:	2306      	movs	r3, #6
 8002588:	e00c      	b.n	80025a4 <HAL_GPIO_Init+0x244>
 800258a:	2307      	movs	r3, #7
 800258c:	e00a      	b.n	80025a4 <HAL_GPIO_Init+0x244>
 800258e:	2305      	movs	r3, #5
 8002590:	e008      	b.n	80025a4 <HAL_GPIO_Init+0x244>
 8002592:	2304      	movs	r3, #4
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x244>
 8002596:	2303      	movs	r3, #3
 8002598:	e004      	b.n	80025a4 <HAL_GPIO_Init+0x244>
 800259a:	2302      	movs	r3, #2
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_Init+0x244>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_GPIO_Init+0x244>
 80025a2:	2300      	movs	r3, #0
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	f002 0203 	and.w	r2, r2, #3
 80025aa:	0092      	lsls	r2, r2, #2
 80025ac:	4093      	lsls	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b4:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_GPIO_Init+0x334>)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_GPIO_Init+0x350>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e6:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <HAL_GPIO_Init+0x350>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_GPIO_Init+0x350>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <HAL_GPIO_Init+0x350>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_GPIO_Init+0x350>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_GPIO_Init+0x350>)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_GPIO_Init+0x350>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_GPIO_Init+0x350>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3301      	adds	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	f47f ae78 	bne.w	8002370 <HAL_GPIO_Init+0x10>
  }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	40010000 	.word	0x40010000
 8002698:	48000400 	.word	0x48000400
 800269c:	48000800 	.word	0x48000800
 80026a0:	48000c00 	.word	0x48000c00
 80026a4:	48001000 	.word	0x48001000
 80026a8:	48001400 	.word	0x48001400
 80026ac:	48001800 	.word	0x48001800
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f806 	bl	8002714 <HAL_GPIO_EXTI_Callback>
  }
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e081      	b.n	8002840 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fe fed1 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2224      	movs	r2, #36	; 0x24
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800277a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800278a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	e006      	b.n	80027b2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d104      	bne.n	80027c4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69d9      	ldr	r1, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
 8002858:	4613      	mov	r3, r2
 800285a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	f040 80da 	bne.w	8002a1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_I2C_Master_Transmit+0x30>
 8002874:	2302      	movs	r3, #2
 8002876:	e0d3      	b.n	8002a20 <HAL_I2C_Master_Transmit+0x1d8>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002880:	f7ff f9b8 	bl	8001bf4 <HAL_GetTick>
 8002884:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2319      	movs	r3, #25
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fa00 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0be      	b.n	8002a20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2221      	movs	r2, #33	; 0x21
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2210      	movs	r2, #16
 80028ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	893a      	ldrh	r2, [r7, #8]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2bff      	cmp	r3, #255	; 0xff
 80028d2:	d90e      	bls.n	80028f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	8979      	ldrh	r1, [r7, #10]
 80028e2:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_I2C_Master_Transmit+0x1e0>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fb62 	bl	8002fb4 <I2C_TransferConfig>
 80028f0:	e06c      	b.n	80029cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	b2da      	uxtb	r2, r3
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_I2C_Master_Transmit+0x1e0>)
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fb51 	bl	8002fb4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002912:	e05b      	b.n	80029cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	6a39      	ldr	r1, [r7, #32]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f9fd 	bl	8002d18 <I2C_WaitOnTXISFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e07b      	b.n	8002a20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d034      	beq.n	80029cc <HAL_I2C_Master_Transmit+0x184>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	d130      	bne.n	80029cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2200      	movs	r2, #0
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f98f 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e04d      	b.n	8002a20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	2bff      	cmp	r3, #255	; 0xff
 800298c:	d90e      	bls.n	80029ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	22ff      	movs	r2, #255	; 0xff
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	b2da      	uxtb	r2, r3
 800299a:	8979      	ldrh	r1, [r7, #10]
 800299c:	2300      	movs	r3, #0
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fb05 	bl	8002fb4 <I2C_TransferConfig>
 80029aa:	e00f      	b.n	80029cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	8979      	ldrh	r1, [r7, #10]
 80029be:	2300      	movs	r3, #0
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 faf4 	bl	8002fb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d19e      	bne.n	8002914 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9dc 	bl	8002d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e01a      	b.n	8002a20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2220      	movs	r2, #32
 80029f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_I2C_Master_Transmit+0x1e4>)
 80029fe:	400b      	ands	r3, r1
 8002a00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	80002000 	.word	0x80002000
 8002a2c:	fe00e800 	.word	0xfe00e800

08002a30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 80db 	bne.w	8002c08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Master_Receive+0x30>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0d4      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a68:	f7ff f8c4 	bl	8001bf4 <HAL_GetTick>
 8002a6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f90c 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0bf      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2222      	movs	r2, #34	; 0x22
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2210      	movs	r2, #16
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	893a      	ldrh	r2, [r7, #8]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2bff      	cmp	r3, #255	; 0xff
 8002aba:	d90e      	bls.n	8002ada <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	22ff      	movs	r2, #255	; 0xff
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	4b52      	ldr	r3, [pc, #328]	; (8002c14 <HAL_I2C_Master_Receive+0x1e4>)
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fa6e 	bl	8002fb4 <I2C_TransferConfig>
 8002ad8:	e06d      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_I2C_Master_Receive+0x1e4>)
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fa5d 	bl	8002fb4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002afa:	e05c      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6a39      	ldr	r1, [r7, #32]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f985 	bl	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e07c      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d034      	beq.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d130      	bne.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f89a 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e04d      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2bff      	cmp	r3, #255	; 0xff
 8002b76:	d90e      	bls.n	8002b96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	22ff      	movs	r2, #255	; 0xff
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fa10 	bl	8002fb4 <I2C_TransferConfig>
 8002b94:	e00f      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f9ff 	bl	8002fb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d19d      	bne.n	8002afc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	6a39      	ldr	r1, [r7, #32]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f8e7 	bl	8002d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e01a      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_I2C_Master_Receive+0x1e8>)
 8002be8:	400b      	ands	r3, r1
 8002bea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	80002400 	.word	0x80002400
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d103      	bne.n	8002c6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d007      	beq.n	8002c8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	619a      	str	r2, [r3, #24]
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca8:	e022      	b.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d01e      	beq.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe ff9f 	bl	8001bf4 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d113      	bne.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e00f      	b.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d0cd      	beq.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d24:	e02c      	b.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f8dc 	bl	8002ee8 <I2C_IsAcknowledgeFailed>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e02a      	b.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d01e      	beq.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d42:	f7fe ff57 	bl	8001bf4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d302      	bcc.n	8002d58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d113      	bne.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e007      	b.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d1cb      	bne.n	8002d26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	e028      	b.n	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f89c 	bl	8002ee8 <I2C_IsAcknowledgeFailed>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e026      	b.n	8002e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7fe ff1b 	bl	8001bf4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d113      	bne.n	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d1cf      	bne.n	8002da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e1c:	e055      	b.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f860 	bl	8002ee8 <I2C_IsAcknowledgeFailed>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e053      	b.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d129      	bne.n	8002e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d105      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e03f      	b.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e022      	b.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e94:	f7fe feae 	bl	8001bf4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d302      	bcc.n	8002eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e007      	b.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d1a2      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	fe00e800 	.word	0xfe00e800

08002ee8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d151      	bne.n	8002fa6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f02:	e022      	b.n	8002f4a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d01e      	beq.n	8002f4a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0c:	f7fe fe72 	bl	8001bf4 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d302      	bcc.n	8002f22 <I2C_IsAcknowledgeFailed+0x3a>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d113      	bne.n	8002f4a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e02e      	b.n	8002fa8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d1d5      	bne.n	8002f04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2220      	movs	r2, #32
 8002f66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fe71 	bl	8002c50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f043 0204 	orr.w	r2, r3, #4
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	fe00e800 	.word	0xfe00e800

08002fb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	0d5b      	lsrs	r3, r3, #21
 8002fd0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <I2C_TransferConfig+0x58>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	ea02 0103 	and.w	r1, r2, r3
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fe4:	7a7b      	ldrb	r3, [r7, #9]
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	03ff63ff 	.word	0x03ff63ff

08003010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b20      	cmp	r3, #32
 8003024:	d138      	bne.n	8003098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003030:	2302      	movs	r3, #2
 8003032:	e032      	b.n	800309a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d139      	bne.n	8003130 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e033      	b.n	8003132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2224      	movs	r2, #36	; 0x24
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800313e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003140:	b08f      	sub	sp, #60	; 0x3c
 8003142:	af0a      	add	r7, sp, #40	; 0x28
 8003144:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e116      	b.n	800337e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fb6a 	bl	8001844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fb89 	bl	80058a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	687e      	ldr	r6, [r7, #4]
 800319c:	466d      	mov	r5, sp
 800319e:	f106 0410 	add.w	r4, r6, #16
 80031a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b2:	1d33      	adds	r3, r6, #4
 80031b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f002 fb49 	bl	800584e <USB_CoreInit>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0d7      	b.n	800337e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 fb77 	bl	80058c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
 80031de:	e04a      	b.n	8003276 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	333d      	adds	r3, #61	; 0x3d
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	333c      	adds	r3, #60	; 0x3c
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	b298      	uxth	r0, r3
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3342      	adds	r3, #66	; 0x42
 800321c:	4602      	mov	r2, r0
 800321e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	333f      	adds	r3, #63	; 0x3f
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3344      	adds	r3, #68	; 0x44
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	3348      	adds	r3, #72	; 0x48
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3350      	adds	r3, #80	; 0x50
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	3301      	adds	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d3af      	bcc.n	80031e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e044      	b.n	8003310 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3301      	adds	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d3b5      	bcc.n	8003286 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	687e      	ldr	r6, [r7, #4]
 8003322:	466d      	mov	r5, sp
 8003324:	f106 0410 	add.w	r4, r6, #16
 8003328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003330:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003334:	e885 0003 	stmia.w	r5, {r0, r1}
 8003338:	1d33      	adds	r3, r6, #4
 800333a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333c:	6838      	ldr	r0, [r7, #0]
 800333e:	f002 faed 	bl	800591c <USB_DevInit>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e014      	b.n	800337e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2b01      	cmp	r3, #1
 800336a:	d102      	bne.n	8003372 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f80a 	bl	8003386 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f002 fc7d 	bl	8005c76 <USB_DevDisconnect>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003386 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	f043 0303 	orr.w	r3, r3, #3
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40007000 	.word	0x40007000

080033f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_PWREx_GetVoltageRange+0x18>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40007000 	.word	0x40007000

0800340c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341a:	d130      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003428:	d038      	beq.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2232      	movs	r2, #50	; 0x32
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0c9b      	lsrs	r3, r3, #18
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003450:	e002      	b.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d102      	bne.n	800346c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f2      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003478:	d110      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348a:	d007      	beq.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40007000 	.word	0x40007000
 80034b0:	20000000 	.word	0x20000000
 80034b4:	431bde83 	.word	0x431bde83

080034b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c6:	6053      	str	r3, [r2, #4]
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40007000 	.word	0x40007000

080034d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80034e0:	f7fe fb88 	bl	8001bf4 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e063      	b.n	80035b8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fe f89f 	bl	8001648 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800350a:	f241 3188 	movw	r1, #5000	; 0x1388
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f858 	bl	80035c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	3b01      	subs	r3, #1
 8003524:	021a      	lsls	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	2120      	movs	r1, #32
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f850 	bl	80035e0 <QSPI_WaitFlagStateUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d131      	bne.n	80035ae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003554:	f023 0310 	bic.w	r3, r3, #16
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6852      	ldr	r2, [r2, #4]
 800355c:	0611      	lsls	r1, r2, #24
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_QSPI_Init+0xe8>)
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6912      	ldr	r2, [r2, #16]
 800357a:	0411      	lsls	r1, r2, #16
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6952      	ldr	r2, [r2, #20]
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6992      	ldr	r2, [r2, #24]
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80035b6:	7afb      	ldrb	r3, [r7, #11]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	ffe0f8fe 	.word	0xffe0f8fe

080035c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80035f0:	e01a      	b.n	8003628 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d016      	beq.n	8003628 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fafb 	bl	8001bf4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2204      	movs	r2, #4
 8003614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e00e      	b.n	8003646 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d1d6      	bne.n	80035f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e3d4      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003662:	4ba1      	ldr	r3, [pc, #644]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800366c:	4b9e      	ldr	r3, [pc, #632]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80e4 	beq.w	800384c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_RCC_OscConfig+0x4a>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b0c      	cmp	r3, #12
 800368e:	f040 808b 	bne.w	80037a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b01      	cmp	r3, #1
 8003696:	f040 8087 	bne.w	80037a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800369a:	4b93      	ldr	r3, [pc, #588]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e3ac      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1a      	ldr	r2, [r3, #32]
 80036b6:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_RCC_OscConfig+0x7c>
 80036c2:	4b89      	ldr	r3, [pc, #548]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_OscConfig+0x88>
 80036cc:	4b86      	ldr	r3, [pc, #536]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d8:	4293      	cmp	r3, r2
 80036da:	d223      	bcs.n	8003724 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fd41 	bl	8004168 <RCC_SetFlashLatencyFromMSIRange>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e38d      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f0:	4b7d      	ldr	r3, [pc, #500]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a7c      	ldr	r2, [pc, #496]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b7a      	ldr	r3, [pc, #488]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4977      	ldr	r1, [pc, #476]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	4972      	ldr	r1, [pc, #456]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
 8003722:	e025      	b.n	8003770 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003724:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a6f      	ldr	r2, [pc, #444]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800372a:	f043 0308 	orr.w	r3, r3, #8
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	496a      	ldr	r1, [pc, #424]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003742:	4b69      	ldr	r3, [pc, #420]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	4965      	ldr	r1, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd01 	bl	8004168 <RCC_SetFlashLatencyFromMSIRange>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e34d      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003770:	f000 fc36 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b5c      	ldr	r3, [pc, #368]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	495a      	ldr	r1, [pc, #360]	; (80038ec <HAL_RCC_OscConfig+0x29c>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
 800378c:	4a58      	ldr	r2, [pc, #352]	; (80038f0 <HAL_RCC_OscConfig+0x2a0>)
 800378e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003790:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_RCC_OscConfig+0x2a4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe f9dd 	bl	8001b54 <HAL_InitTick>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d052      	beq.n	800384a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	e331      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d032      	beq.n	8003816 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037b0:	4b4d      	ldr	r3, [pc, #308]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a4c      	ldr	r2, [pc, #304]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fa1a 	bl	8001bf4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c4:	f7fe fa16 	bl	8001bf4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e31a      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d6:	4b44      	ldr	r3, [pc, #272]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e2:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	493b      	ldr	r1, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003800:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	4936      	ldr	r1, [pc, #216]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	e01a      	b.n	800384c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003822:	f7fe f9e7 	bl	8001bf4 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800382a:	f7fe f9e3 	bl	8001bf4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e2e7      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x1da>
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800384a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d074      	beq.n	8003942 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x21a>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d10e      	bne.n	8003882 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d10b      	bne.n	8003882 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d064      	beq.n	8003940 <HAL_RCC_OscConfig+0x2f0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d160      	bne.n	8003940 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e2c4      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x24a>
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 8003892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e01d      	b.n	80038d6 <HAL_RCC_OscConfig+0x286>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a2:	d10c      	bne.n	80038be <HAL_RCC_OscConfig+0x26e>
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e00b      	b.n	80038d6 <HAL_RCC_OscConfig+0x286>
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a06      	ldr	r2, [pc, #24]	; (80038e8 <HAL_RCC_OscConfig+0x298>)
 80038d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01c      	beq.n	8003918 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fe f989 	bl	8001bf4 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e4:	e011      	b.n	800390a <HAL_RCC_OscConfig+0x2ba>
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08006750 	.word	0x08006750
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe f97c 	bl	8001bf4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e280      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390a:	4baf      	ldr	r3, [pc, #700]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x2a8>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f96c 	bl	8001bf4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe f968 	bl	8001bf4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e26c      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003932:	4ba5      	ldr	r3, [pc, #660]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x2d0>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d060      	beq.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d005      	beq.n	8003960 <HAL_RCC_OscConfig+0x310>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d119      	bne.n	800398e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d116      	bne.n	800398e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003960:	4b99      	ldr	r3, [pc, #612]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_OscConfig+0x328>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e249      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b93      	ldr	r3, [pc, #588]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	4990      	ldr	r1, [pc, #576]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800398c:	e040      	b.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d023      	beq.n	80039de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003996:	4b8c      	ldr	r3, [pc, #560]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8b      	ldr	r2, [pc, #556]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fe f927 	bl	8001bf4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fe f923 	bl	8001bf4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e227      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039bc:	4b82      	ldr	r3, [pc, #520]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	497c      	ldr	r1, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
 80039dc:	e018      	b.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039de:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a79      	ldr	r2, [pc, #484]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 80039e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe f903 	bl	8001bf4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fe f8ff 	bl	8001bf4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e203      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a04:	4b70      	ldr	r3, [pc, #448]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d03c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fe f8de 	bl	8001bf4 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fe f8da 	bl	8001bf4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1de      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a4e:	4b5e      	ldr	r3, [pc, #376]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ef      	beq.n	8003a3c <HAL_RCC_OscConfig+0x3ec>
 8003a5c:	e01b      	b.n	8003a96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5e:	4b5a      	ldr	r3, [pc, #360]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a64:	4a58      	ldr	r2, [pc, #352]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fe f8c1 	bl	8001bf4 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fe f8bd 	bl	8001bf4 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1c1      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ef      	bne.n	8003a76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a6 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aa8:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	4a43      	ldr	r2, [pc, #268]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad0:	4b3e      	ldr	r3, [pc, #248]	; (8003bcc <HAL_RCC_OscConfig+0x57c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d118      	bne.n	8003b0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCC_OscConfig+0x57c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	; (8003bcc <HAL_RCC_OscConfig+0x57c>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae8:	f7fe f884 	bl	8001bf4 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fe f880 	bl	8001bf4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e184      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b02:	4b32      	ldr	r3, [pc, #200]	; (8003bcc <HAL_RCC_OscConfig+0x57c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d108      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4d8>
 8003b16:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b26:	e024      	b.n	8003b72 <HAL_RCC_OscConfig+0x522>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d110      	bne.n	8003b52 <HAL_RCC_OscConfig+0x502>
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b50:	e00f      	b.n	8003b72 <HAL_RCC_OscConfig+0x522>
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b6a:	f023 0304 	bic.w	r3, r3, #4
 8003b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fe f83b 	bl	8001bf4 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe f837 	bl	8001bf4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e139      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_OscConfig+0x578>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ed      	beq.n	8003b82 <HAL_RCC_OscConfig+0x532>
 8003ba6:	e01a      	b.n	8003bde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fe f824 	bl	8001bf4 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bae:	e00f      	b.n	8003bd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fe f820 	bl	8001bf4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d906      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e122      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd0:	4b90      	ldr	r3, [pc, #576]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e8      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bde:	7ffb      	ldrb	r3, [r7, #31]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be4:	4b8b      	ldr	r3, [pc, #556]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	4a8a      	ldr	r2, [pc, #552]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8108 	beq.w	8003e0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f040 80d0 	bne.w	8003da4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c04:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 0203 	and.w	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d130      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	3b01      	subs	r3, #1
 8003c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d127      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11f      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c44:	2a07      	cmp	r2, #7
 8003c46:	bf14      	ite	ne
 8003c48:	2201      	movne	r2, #1
 8003c4a:	2200      	moveq	r2, #0
 8003c4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d113      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d109      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	3b01      	subs	r3, #1
 8003c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d06e      	beq.n	8003d58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d069      	beq.n	8003d54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c80:	4b64      	ldr	r3, [pc, #400]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c8c:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b7      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b5d      	ldr	r3, [pc, #372]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca8:	f7fd ffa4 	bl	8001bf4 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd ffa0 	bl	8001bf4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0a4      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc2:	4b54      	ldr	r3, [pc, #336]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cce:	4b51      	ldr	r3, [pc, #324]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <HAL_RCC_OscConfig+0x7c8>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cde:	3a01      	subs	r2, #1
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce8:	0212      	lsls	r2, r2, #8
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cf0:	0852      	lsrs	r2, r2, #1
 8003cf2:	3a01      	subs	r2, #1
 8003cf4:	0552      	lsls	r2, r2, #21
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cfc:	0852      	lsrs	r2, r2, #1
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	0652      	lsls	r2, r2, #25
 8003d02:	4311      	orrs	r1, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d08:	0912      	lsrs	r2, r2, #4
 8003d0a:	0452      	lsls	r2, r2, #17
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	4941      	ldr	r1, [pc, #260]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d14:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3e      	ldr	r2, [pc, #248]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d20:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d2c:	f7fd ff62 	bl	8001bf4 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd ff5e 	bl	8001bf4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e062      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d52:	e05a      	b.n	8003e0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e059      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d58:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d152      	bne.n	8003e0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d70:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d7c:	f7fd ff3a 	bl	8001bf4 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd ff36 	bl	8001bf4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e03a      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x734>
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d02d      	beq.n	8003e06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003dc8:	f023 0303 	bic.w	r3, r3, #3
 8003dcc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003dd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ddc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fd ff09 	bl	8001bf4 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fd ff05 	bl	8001bf4 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e009      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_OscConfig+0x7c4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x796>
 8003e04:	e001      	b.n	8003e0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	f99d808c 	.word	0xf99d808c

08003e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0c8      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b66      	ldr	r3, [pc, #408]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d910      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b63      	ldr	r3, [pc, #396]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	4961      	ldr	r1, [pc, #388]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b0      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d04c      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e74:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d121      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e09e      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8c:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d115      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e092      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea4:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e086      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e07e      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec4:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 0203 	bic.w	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	493f      	ldr	r1, [pc, #252]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd fe8d 	bl	8001bf4 <HAL_GetTick>
 8003eda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ede:	f7fd fe89 	bl	8001bf4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e066      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 020c 	and.w	r2, r3, #12
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d1eb      	bne.n	8003ede <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f12:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	492c      	ldr	r1, [pc, #176]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d210      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 0207 	bic.w	r2, r3, #7
 8003f3a:	4924      	ldr	r1, [pc, #144]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e036      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4918      	ldr	r1, [pc, #96]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4910      	ldr	r1, [pc, #64]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f92:	f000 f825 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490c      	ldr	r1, [pc, #48]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd fdcc 	bl	8001b54 <HAL_InitTick>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08006750 	.word	0x08006750
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004

08003fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fee:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x34>
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d121      	bne.n	8004052 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d11e      	bne.n	8004052 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004020:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e005      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d102      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e004      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d101      	bne.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004066:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d134      	bne.n	80040d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d003      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0xa6>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d003      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0xac>
 8004084:	e005      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004088:	617b      	str	r3, [r7, #20]
      break;
 800408a:	e005      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800408e:	617b      	str	r3, [r7, #20]
      break;
 8004090:	e002      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	617b      	str	r3, [r7, #20]
      break;
 8004096:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	3301      	adds	r3, #1
 80040a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	fb02 f203 	mul.w	r2, r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	0e5b      	lsrs	r3, r3, #25
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	3301      	adds	r3, #1
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040d8:	69bb      	ldr	r3, [r7, #24]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	08006768 	.word	0x08006768
 80040f0:	00f42400 	.word	0x00f42400
 80040f4:	007a1200 	.word	0x007a1200

080040f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_GetHCLKFreq+0x14>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000000 	.word	0x20000000

08004110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004114:	f7ff fff0 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4904      	ldr	r1, [pc, #16]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	08006760 	.word	0x08006760

0800413c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004140:	f7ff ffda 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0adb      	lsrs	r3, r3, #11
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4904      	ldr	r1, [pc, #16]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	08006760 	.word	0x08006760

08004168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004180:	f7ff f936 	bl	80033f0 <HAL_PWREx_GetVoltageRange>
 8004184:	6178      	str	r0, [r7, #20]
 8004186:	e014      	b.n	80041b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004192:	6593      	str	r3, [r2, #88]	; 0x58
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041a0:	f7ff f926 	bl	80033f0 <HAL_PWREx_GetVoltageRange>
 80041a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041a6:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b8:	d10b      	bne.n	80041d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b80      	cmp	r3, #128	; 0x80
 80041be:	d919      	bls.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2ba0      	cmp	r3, #160	; 0xa0
 80041c4:	d902      	bls.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041c6:	2302      	movs	r3, #2
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e013      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041cc:	2301      	movs	r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	e010      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d902      	bls.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041d8:	2303      	movs	r3, #3
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e00a      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d102      	bne.n	80041ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e4:	2302      	movs	r3, #2
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	e004      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b70      	cmp	r3, #112	; 0x70
 80041ee:	d101      	bne.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f0:	2301      	movs	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 0207 	bic.w	r2, r3, #7
 80041fc:	4909      	ldr	r1, [pc, #36]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	429a      	cmp	r2, r3
 8004210:	d001      	beq.n	8004216 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	40022000 	.word	0x40022000

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004230:	2300      	movs	r3, #0
 8004232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004234:	2300      	movs	r3, #0
 8004236:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004240:	2b00      	cmp	r3, #0
 8004242:	d041      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800424c:	d02a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800424e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004252:	d824      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004258:	d008      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800425a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800425e:	d81e      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004268:	d010      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800426a:	e018      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800426c:	4b86      	ldr	r3, [pc, #536]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a85      	ldr	r2, [pc, #532]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004276:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004278:	e015      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f000 facb 	bl	800481c <RCCEx_PLLSAI1_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800428a:	e00c      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3320      	adds	r3, #32
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fbb6 	bl	8004a04 <RCCEx_PLLSAI2_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	74fb      	strb	r3, [r7, #19]
      break;
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ac:	4b76      	ldr	r3, [pc, #472]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ba:	4973      	ldr	r1, [pc, #460]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042c2:	e001      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d041      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042dc:	d02a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042e2:	d824      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e8:	d008      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ee:	d81e      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f8:	d010      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042fa:	e018      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042fc:	4b62      	ldr	r3, [pc, #392]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a61      	ldr	r2, [pc, #388]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004306:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004308:	e015      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fa83 	bl	800481c <RCCEx_PLLSAI1_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800431a:	e00c      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3320      	adds	r3, #32
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fb6e 	bl	8004a04 <RCCEx_PLLSAI2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	74fb      	strb	r3, [r7, #19]
      break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800433c:	4b52      	ldr	r3, [pc, #328]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800434a:	494f      	ldr	r1, [pc, #316]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004352:	e001      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a0 	beq.w	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800436a:	4b47      	ldr	r3, [pc, #284]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004380:	4b41      	ldr	r3, [pc, #260]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	4a40      	ldr	r2, [pc, #256]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438a:	6593      	str	r3, [r2, #88]	; 0x58
 800438c:	4b3e      	ldr	r3, [pc, #248]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004398:	2301      	movs	r3, #1
 800439a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800439c:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3a      	ldr	r2, [pc, #232]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a8:	f7fd fc24 	bl	8001bf4 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ae:	e009      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b0:	f7fd fc20 	bl	8001bf4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	74fb      	strb	r3, [r7, #19]
        break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c4:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ef      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d15c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01f      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d019      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	4a20      	ldr	r2, [pc, #128]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004410:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004420:	4a19      	ldr	r2, [pc, #100]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fd fbdf 	bl	8001bf4 <HAL_GetTick>
 8004436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004438:	e00b      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fd fbdb 	bl	8001bf4 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d902      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	74fb      	strb	r3, [r7, #19]
            break;
 8004450:	e006      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ec      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004476:	4904      	ldr	r1, [pc, #16]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800447e:	e009      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004494:	7c7b      	ldrb	r3, [r7, #17]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d105      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449a:	4b9e      	ldr	r3, [pc, #632]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	4a9d      	ldr	r2, [pc, #628]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b2:	4b98      	ldr	r3, [pc, #608]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f023 0203 	bic.w	r2, r3, #3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	4994      	ldr	r1, [pc, #592]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d4:	4b8f      	ldr	r3, [pc, #572]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 020c 	bic.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	498c      	ldr	r1, [pc, #560]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f6:	4b87      	ldr	r3, [pc, #540]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	4983      	ldr	r1, [pc, #524]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004518:	4b7e      	ldr	r3, [pc, #504]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	497b      	ldr	r1, [pc, #492]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	4972      	ldr	r1, [pc, #456]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800455c:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	496a      	ldr	r1, [pc, #424]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	4961      	ldr	r1, [pc, #388]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a0:	4b5c      	ldr	r3, [pc, #368]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ae:	4959      	ldr	r1, [pc, #356]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	4950      	ldr	r1, [pc, #320]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e4:	4b4b      	ldr	r3, [pc, #300]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	4948      	ldr	r1, [pc, #288]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004606:	4b43      	ldr	r3, [pc, #268]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	493f      	ldr	r1, [pc, #252]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d028      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004628:	4b3a      	ldr	r3, [pc, #232]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004636:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004646:	d106      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a31      	ldr	r2, [pc, #196]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004652:	60d3      	str	r3, [r2, #12]
 8004654:	e011      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465e:	d10c      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f8d8 	bl	800481c <RCCEx_PLLSAI1_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d028      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004686:	4b23      	ldr	r3, [pc, #140]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	491f      	ldr	r1, [pc, #124]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a1a      	ldr	r2, [pc, #104]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b0:	60d3      	str	r3, [r2, #12]
 80046b2:	e011      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f8a9 	bl	800481c <RCCEx_PLLSAI1_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02b      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	4908      	ldr	r1, [pc, #32]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004702:	d109      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a02      	ldr	r2, [pc, #8]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
 8004710:	e014      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004720:	d10c      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f877 	bl	800481c <RCCEx_PLLSAI1_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d02f      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004756:	4928      	ldr	r1, [pc, #160]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004766:	d10d      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f854 	bl	800481c <RCCEx_PLLSAI1_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d014      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	74bb      	strb	r3, [r7, #18]
 8004782:	e011      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3320      	adds	r3, #32
 8004792:	2102      	movs	r1, #2
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f935 	bl	8004a04 <RCCEx_PLLSAI2_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047b4:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c2:	490d      	ldr	r1, [pc, #52]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	4904      	ldr	r1, [pc, #16]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004806:	f043 0304 	orr.w	r3, r3, #4
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800482a:	4b75      	ldr	r3, [pc, #468]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0203 	and.w	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d10d      	bne.n	8004862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
       ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800484e:	4b6c      	ldr	r3, [pc, #432]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
       ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d047      	beq.n	80048f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
 8004866:	e044      	b.n	80048f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d018      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0x86>
 8004870:	2b03      	cmp	r3, #3
 8004872:	d825      	bhi.n	80048c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004874:	2b01      	cmp	r3, #1
 8004876:	d002      	beq.n	800487e <RCCEx_PLLSAI1_Config+0x62>
 8004878:	2b02      	cmp	r3, #2
 800487a:	d009      	beq.n	8004890 <RCCEx_PLLSAI1_Config+0x74>
 800487c:	e020      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800487e:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11d      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488e:	e01a      	b.n	80048c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004890:	4b5b      	ldr	r3, [pc, #364]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d116      	bne.n	80048ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e013      	b.n	80048ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048a2:	4b57      	ldr	r3, [pc, #348]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10f      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ae:	4b54      	ldr	r3, [pc, #336]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048be:	e006      	b.n	80048ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
      break;
 80048c4:	e004      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c6:	bf00      	nop
 80048c8:	e002      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ca:	bf00      	nop
 80048cc:	e000      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	430b      	orrs	r3, r1
 80048ec:	4944      	ldr	r1, [pc, #272]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d17d      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048f8:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a40      	ldr	r2, [pc, #256]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004904:	f7fd f976 	bl	8001bf4 <HAL_GetTick>
 8004908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800490a:	e009      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800490c:	f7fd f972 	bl	8001bf4 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d902      	bls.n	8004920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	73fb      	strb	r3, [r7, #15]
        break;
 800491e:	e005      	b.n	800492c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004920:	4b37      	ldr	r3, [pc, #220]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ef      	bne.n	800490c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d160      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	0211      	lsls	r1, r2, #8
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68d2      	ldr	r2, [r2, #12]
 800494e:	0912      	lsrs	r2, r2, #4
 8004950:	0452      	lsls	r2, r2, #17
 8004952:	430a      	orrs	r2, r1
 8004954:	492a      	ldr	r1, [pc, #168]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	610b      	str	r3, [r1, #16]
 800495a:	e027      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d112      	bne.n	8004988 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800496a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	0211      	lsls	r1, r2, #8
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6912      	ldr	r2, [r2, #16]
 8004978:	0852      	lsrs	r2, r2, #1
 800497a:	3a01      	subs	r2, #1
 800497c:	0552      	lsls	r2, r2, #21
 800497e:	430a      	orrs	r2, r1
 8004980:	491f      	ldr	r1, [pc, #124]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]
 8004986:	e011      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004990:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6892      	ldr	r2, [r2, #8]
 8004998:	0211      	lsls	r1, r2, #8
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6952      	ldr	r2, [r2, #20]
 800499e:	0852      	lsrs	r2, r2, #1
 80049a0:	3a01      	subs	r2, #1
 80049a2:	0652      	lsls	r2, r2, #25
 80049a4:	430a      	orrs	r2, r1
 80049a6:	4916      	ldr	r1, [pc, #88]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd f91c 	bl	8001bf4 <HAL_GetTick>
 80049bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049be:	e009      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049c0:	f7fd f918 	bl	8001bf4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d902      	bls.n	80049d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	73fb      	strb	r3, [r7, #15]
          break;
 80049d2:	e005      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ef      	beq.n	80049c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	4904      	ldr	r1, [pc, #16]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a12:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a1e:	4b67      	ldr	r3, [pc, #412]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0203 	and.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d10d      	bne.n	8004a4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
       ||
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a36:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
       ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d047      	beq.n	8004ada <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	e044      	b.n	8004ada <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d018      	beq.n	8004a8a <RCCEx_PLLSAI2_Config+0x86>
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d825      	bhi.n	8004aa8 <RCCEx_PLLSAI2_Config+0xa4>
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d002      	beq.n	8004a66 <RCCEx_PLLSAI2_Config+0x62>
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d009      	beq.n	8004a78 <RCCEx_PLLSAI2_Config+0x74>
 8004a64:	e020      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a66:	4b55      	ldr	r3, [pc, #340]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d11d      	bne.n	8004aae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a76:	e01a      	b.n	8004aae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a78:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a88:	e013      	b.n	8004ab2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a8a:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a96:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aa6:	e006      	b.n	8004ab6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004aac:	e004      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10d      	bne.n	8004ada <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004abe:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	4939      	ldr	r1, [pc, #228]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d167      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a35      	ldr	r2, [pc, #212]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aec:	f7fd f882 	bl	8001bf4 <HAL_GetTick>
 8004af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004af2:	e009      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004af4:	f7fd f87e 	bl	8001bf4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d902      	bls.n	8004b08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	73fb      	strb	r3, [r7, #15]
        break;
 8004b06:	e005      	b.n	8004b14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b08:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ef      	bne.n	8004af4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d14a      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d111      	bne.n	8004b44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b20:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
 8004b30:	0211      	lsls	r1, r2, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	0912      	lsrs	r2, r2, #4
 8004b38:	0452      	lsls	r2, r2, #17
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	491f      	ldr	r1, [pc, #124]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	614b      	str	r3, [r1, #20]
 8004b42:	e011      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b44:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6892      	ldr	r2, [r2, #8]
 8004b54:	0211      	lsls	r1, r2, #8
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6912      	ldr	r2, [r2, #16]
 8004b5a:	0852      	lsrs	r2, r2, #1
 8004b5c:	3a01      	subs	r2, #1
 8004b5e:	0652      	lsls	r2, r2, #25
 8004b60:	430a      	orrs	r2, r1
 8004b62:	4916      	ldr	r1, [pc, #88]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fd f83e 	bl	8001bf4 <HAL_GetTick>
 8004b78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b7a:	e009      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b7c:	f7fd f83a 	bl	8001bf4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d902      	bls.n	8004b90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b8e:	e005      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ef      	beq.n	8004b7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	4904      	ldr	r1, [pc, #16]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000

08004bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e095      	b.n	8004cfe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be2:	d009      	beq.n	8004bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
 8004bea:	e005      	b.n	8004bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fd5c 	bl	80016d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c38:	d902      	bls.n	8004c40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e002      	b.n	8004c46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c4e:	d007      	beq.n	8004c60 <HAL_SPI_Init+0xa0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c58:	d002      	beq.n	8004c60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	ea42 0103 	orr.w	r1, r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	0c1b      	lsrs	r3, r3, #16
 8004cbc:	f003 0204 	and.w	r2, r3, #4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cdc:	ea42 0103 	orr.w	r1, r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e040      	b.n	8004d9a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fc fd15 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	; 0x24
 8004d32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f991 	bl	800506c <UART_SetConfig>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e022      	b.n	8004d9a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fc0f 	bl	8005580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fc96 	bl	80056c4 <UART_CheckIdleState>
 8004d98:	4603      	mov	r3, r0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b08a      	sub	sp, #40	; 0x28
 8004da6:	af02      	add	r7, sp, #8
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	f040 8082 	bne.w	8004ec0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_UART_Transmit+0x26>
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e07a      	b.n	8004ec2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Transmit+0x38>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e073      	b.n	8004ec2 <HAL_UART_Transmit+0x120>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2221      	movs	r2, #33	; 0x21
 8004dee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df0:	f7fc ff00 	bl	8001bf4 <HAL_GetTick>
 8004df4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d108      	bne.n	8004e22 <HAL_UART_Transmit+0x80>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e003      	b.n	8004e2a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e32:	e02d      	b.n	8004e90 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fc89 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e039      	b.n	8004ec2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	881a      	ldrh	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e60:	b292      	uxth	r2, r2
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	3302      	adds	r3, #2
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e008      	b.n	8004e7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	781a      	ldrb	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	b292      	uxth	r2, r2
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1cb      	bne.n	8004e34 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2140      	movs	r1, #64	; 0x40
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fc55 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e005      	b.n	8004ec2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b08a      	sub	sp, #40	; 0x28
 8004ece:	af02      	add	r7, sp, #8
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	f040 80bf 	bne.w	8005062 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_UART_Receive+0x26>
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0b7      	b.n	8005064 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Receive+0x38>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e0b0      	b.n	8005064 <HAL_UART_Receive+0x19a>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2222      	movs	r2, #34	; 0x22
 8004f16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f1e:	f7fc fe69 	bl	8001bf4 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	88fa      	ldrh	r2, [r7, #6]
 8004f30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3c:	d10e      	bne.n	8004f5c <HAL_UART_Receive+0x92>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d105      	bne.n	8004f52 <HAL_UART_Receive+0x88>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f50:	e02d      	b.n	8004fae <HAL_UART_Receive+0xe4>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f5a:	e028      	b.n	8004fae <HAL_UART_Receive+0xe4>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10d      	bne.n	8004f80 <HAL_UART_Receive+0xb6>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <HAL_UART_Receive+0xac>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	22ff      	movs	r2, #255	; 0xff
 8004f70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f74:	e01b      	b.n	8004fae <HAL_UART_Receive+0xe4>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	227f      	movs	r2, #127	; 0x7f
 8004f7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f7e:	e016      	b.n	8004fae <HAL_UART_Receive+0xe4>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f88:	d10d      	bne.n	8004fa6 <HAL_UART_Receive+0xdc>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <HAL_UART_Receive+0xd2>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	227f      	movs	r2, #127	; 0x7f
 8004f96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f9a:	e008      	b.n	8004fae <HAL_UART_Receive+0xe4>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	223f      	movs	r2, #63	; 0x3f
 8004fa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fa4:	e003      	b.n	8004fae <HAL_UART_Receive+0xe4>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fb4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbe:	d108      	bne.n	8004fd2 <HAL_UART_Receive+0x108>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	e003      	b.n	8004fda <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004fe2:	e033      	b.n	800504c <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	2120      	movs	r1, #32
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fbb1 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e032      	b.n	8005064 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10c      	bne.n	800501e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800500a:	b29a      	uxth	r2, r3
 800500c:	8a7b      	ldrh	r3, [r7, #18]
 800500e:	4013      	ands	r3, r2
 8005010:	b29a      	uxth	r2, r3
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	3302      	adds	r3, #2
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e00d      	b.n	800503a <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005024:	b29b      	uxth	r3, r3
 8005026:	b2da      	uxtb	r2, r3
 8005028:	8a7b      	ldrh	r3, [r7, #18]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	4013      	ands	r3, r2
 800502e:	b2da      	uxtb	r2, r3
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1c5      	bne.n	8004fe4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3720      	adds	r7, #32
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	b5b0      	push	{r4, r5, r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	4313      	orrs	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4bad      	ldr	r3, [pc, #692]	; (800534c <UART_SetConfig+0x2e0>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	69f9      	ldr	r1, [r7, #28]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4aa2      	ldr	r2, [pc, #648]	; (8005350 <UART_SetConfig+0x2e4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a99      	ldr	r2, [pc, #612]	; (8005354 <UART_SetConfig+0x2e8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d121      	bne.n	8005136 <UART_SetConfig+0xca>
 80050f2:	4b99      	ldr	r3, [pc, #612]	; (8005358 <UART_SetConfig+0x2ec>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d817      	bhi.n	8005130 <UART_SetConfig+0xc4>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x9c>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	08005119 	.word	0x08005119
 800510c:	08005125 	.word	0x08005125
 8005110:	0800511f 	.word	0x0800511f
 8005114:	0800512b 	.word	0x0800512b
 8005118:	2301      	movs	r3, #1
 800511a:	76fb      	strb	r3, [r7, #27]
 800511c:	e0e7      	b.n	80052ee <UART_SetConfig+0x282>
 800511e:	2302      	movs	r3, #2
 8005120:	76fb      	strb	r3, [r7, #27]
 8005122:	e0e4      	b.n	80052ee <UART_SetConfig+0x282>
 8005124:	2304      	movs	r3, #4
 8005126:	76fb      	strb	r3, [r7, #27]
 8005128:	e0e1      	b.n	80052ee <UART_SetConfig+0x282>
 800512a:	2308      	movs	r3, #8
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e0de      	b.n	80052ee <UART_SetConfig+0x282>
 8005130:	2310      	movs	r3, #16
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e0db      	b.n	80052ee <UART_SetConfig+0x282>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a88      	ldr	r2, [pc, #544]	; (800535c <UART_SetConfig+0x2f0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d132      	bne.n	80051a6 <UART_SetConfig+0x13a>
 8005140:	4b85      	ldr	r3, [pc, #532]	; (8005358 <UART_SetConfig+0x2ec>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d828      	bhi.n	80051a0 <UART_SetConfig+0x134>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0xe8>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005189 	.word	0x08005189
 8005158:	080051a1 	.word	0x080051a1
 800515c:	080051a1 	.word	0x080051a1
 8005160:	080051a1 	.word	0x080051a1
 8005164:	08005195 	.word	0x08005195
 8005168:	080051a1 	.word	0x080051a1
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080051a1 	.word	0x080051a1
 8005174:	0800518f 	.word	0x0800518f
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051a1 	.word	0x080051a1
 8005184:	0800519b 	.word	0x0800519b
 8005188:	2300      	movs	r3, #0
 800518a:	76fb      	strb	r3, [r7, #27]
 800518c:	e0af      	b.n	80052ee <UART_SetConfig+0x282>
 800518e:	2302      	movs	r3, #2
 8005190:	76fb      	strb	r3, [r7, #27]
 8005192:	e0ac      	b.n	80052ee <UART_SetConfig+0x282>
 8005194:	2304      	movs	r3, #4
 8005196:	76fb      	strb	r3, [r7, #27]
 8005198:	e0a9      	b.n	80052ee <UART_SetConfig+0x282>
 800519a:	2308      	movs	r3, #8
 800519c:	76fb      	strb	r3, [r7, #27]
 800519e:	e0a6      	b.n	80052ee <UART_SetConfig+0x282>
 80051a0:	2310      	movs	r3, #16
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	e0a3      	b.n	80052ee <UART_SetConfig+0x282>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a6d      	ldr	r2, [pc, #436]	; (8005360 <UART_SetConfig+0x2f4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d120      	bne.n	80051f2 <UART_SetConfig+0x186>
 80051b0:	4b69      	ldr	r3, [pc, #420]	; (8005358 <UART_SetConfig+0x2ec>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051ba:	2b30      	cmp	r3, #48	; 0x30
 80051bc:	d013      	beq.n	80051e6 <UART_SetConfig+0x17a>
 80051be:	2b30      	cmp	r3, #48	; 0x30
 80051c0:	d814      	bhi.n	80051ec <UART_SetConfig+0x180>
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d009      	beq.n	80051da <UART_SetConfig+0x16e>
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d810      	bhi.n	80051ec <UART_SetConfig+0x180>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <UART_SetConfig+0x168>
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d006      	beq.n	80051e0 <UART_SetConfig+0x174>
 80051d2:	e00b      	b.n	80051ec <UART_SetConfig+0x180>
 80051d4:	2300      	movs	r3, #0
 80051d6:	76fb      	strb	r3, [r7, #27]
 80051d8:	e089      	b.n	80052ee <UART_SetConfig+0x282>
 80051da:	2302      	movs	r3, #2
 80051dc:	76fb      	strb	r3, [r7, #27]
 80051de:	e086      	b.n	80052ee <UART_SetConfig+0x282>
 80051e0:	2304      	movs	r3, #4
 80051e2:	76fb      	strb	r3, [r7, #27]
 80051e4:	e083      	b.n	80052ee <UART_SetConfig+0x282>
 80051e6:	2308      	movs	r3, #8
 80051e8:	76fb      	strb	r3, [r7, #27]
 80051ea:	e080      	b.n	80052ee <UART_SetConfig+0x282>
 80051ec:	2310      	movs	r3, #16
 80051ee:	76fb      	strb	r3, [r7, #27]
 80051f0:	e07d      	b.n	80052ee <UART_SetConfig+0x282>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a5b      	ldr	r2, [pc, #364]	; (8005364 <UART_SetConfig+0x2f8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d120      	bne.n	800523e <UART_SetConfig+0x1d2>
 80051fc:	4b56      	ldr	r3, [pc, #344]	; (8005358 <UART_SetConfig+0x2ec>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005206:	2bc0      	cmp	r3, #192	; 0xc0
 8005208:	d013      	beq.n	8005232 <UART_SetConfig+0x1c6>
 800520a:	2bc0      	cmp	r3, #192	; 0xc0
 800520c:	d814      	bhi.n	8005238 <UART_SetConfig+0x1cc>
 800520e:	2b80      	cmp	r3, #128	; 0x80
 8005210:	d009      	beq.n	8005226 <UART_SetConfig+0x1ba>
 8005212:	2b80      	cmp	r3, #128	; 0x80
 8005214:	d810      	bhi.n	8005238 <UART_SetConfig+0x1cc>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <UART_SetConfig+0x1b4>
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d006      	beq.n	800522c <UART_SetConfig+0x1c0>
 800521e:	e00b      	b.n	8005238 <UART_SetConfig+0x1cc>
 8005220:	2300      	movs	r3, #0
 8005222:	76fb      	strb	r3, [r7, #27]
 8005224:	e063      	b.n	80052ee <UART_SetConfig+0x282>
 8005226:	2302      	movs	r3, #2
 8005228:	76fb      	strb	r3, [r7, #27]
 800522a:	e060      	b.n	80052ee <UART_SetConfig+0x282>
 800522c:	2304      	movs	r3, #4
 800522e:	76fb      	strb	r3, [r7, #27]
 8005230:	e05d      	b.n	80052ee <UART_SetConfig+0x282>
 8005232:	2308      	movs	r3, #8
 8005234:	76fb      	strb	r3, [r7, #27]
 8005236:	e05a      	b.n	80052ee <UART_SetConfig+0x282>
 8005238:	2310      	movs	r3, #16
 800523a:	76fb      	strb	r3, [r7, #27]
 800523c:	e057      	b.n	80052ee <UART_SetConfig+0x282>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a49      	ldr	r2, [pc, #292]	; (8005368 <UART_SetConfig+0x2fc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d125      	bne.n	8005294 <UART_SetConfig+0x228>
 8005248:	4b43      	ldr	r3, [pc, #268]	; (8005358 <UART_SetConfig+0x2ec>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005256:	d017      	beq.n	8005288 <UART_SetConfig+0x21c>
 8005258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525c:	d817      	bhi.n	800528e <UART_SetConfig+0x222>
 800525e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005262:	d00b      	beq.n	800527c <UART_SetConfig+0x210>
 8005264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005268:	d811      	bhi.n	800528e <UART_SetConfig+0x222>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <UART_SetConfig+0x20a>
 800526e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005272:	d006      	beq.n	8005282 <UART_SetConfig+0x216>
 8005274:	e00b      	b.n	800528e <UART_SetConfig+0x222>
 8005276:	2300      	movs	r3, #0
 8005278:	76fb      	strb	r3, [r7, #27]
 800527a:	e038      	b.n	80052ee <UART_SetConfig+0x282>
 800527c:	2302      	movs	r3, #2
 800527e:	76fb      	strb	r3, [r7, #27]
 8005280:	e035      	b.n	80052ee <UART_SetConfig+0x282>
 8005282:	2304      	movs	r3, #4
 8005284:	76fb      	strb	r3, [r7, #27]
 8005286:	e032      	b.n	80052ee <UART_SetConfig+0x282>
 8005288:	2308      	movs	r3, #8
 800528a:	76fb      	strb	r3, [r7, #27]
 800528c:	e02f      	b.n	80052ee <UART_SetConfig+0x282>
 800528e:	2310      	movs	r3, #16
 8005290:	76fb      	strb	r3, [r7, #27]
 8005292:	e02c      	b.n	80052ee <UART_SetConfig+0x282>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2d      	ldr	r2, [pc, #180]	; (8005350 <UART_SetConfig+0x2e4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d125      	bne.n	80052ea <UART_SetConfig+0x27e>
 800529e:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <UART_SetConfig+0x2ec>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ac:	d017      	beq.n	80052de <UART_SetConfig+0x272>
 80052ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052b2:	d817      	bhi.n	80052e4 <UART_SetConfig+0x278>
 80052b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b8:	d00b      	beq.n	80052d2 <UART_SetConfig+0x266>
 80052ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052be:	d811      	bhi.n	80052e4 <UART_SetConfig+0x278>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <UART_SetConfig+0x260>
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c8:	d006      	beq.n	80052d8 <UART_SetConfig+0x26c>
 80052ca:	e00b      	b.n	80052e4 <UART_SetConfig+0x278>
 80052cc:	2300      	movs	r3, #0
 80052ce:	76fb      	strb	r3, [r7, #27]
 80052d0:	e00d      	b.n	80052ee <UART_SetConfig+0x282>
 80052d2:	2302      	movs	r3, #2
 80052d4:	76fb      	strb	r3, [r7, #27]
 80052d6:	e00a      	b.n	80052ee <UART_SetConfig+0x282>
 80052d8:	2304      	movs	r3, #4
 80052da:	76fb      	strb	r3, [r7, #27]
 80052dc:	e007      	b.n	80052ee <UART_SetConfig+0x282>
 80052de:	2308      	movs	r3, #8
 80052e0:	76fb      	strb	r3, [r7, #27]
 80052e2:	e004      	b.n	80052ee <UART_SetConfig+0x282>
 80052e4:	2310      	movs	r3, #16
 80052e6:	76fb      	strb	r3, [r7, #27]
 80052e8:	e001      	b.n	80052ee <UART_SetConfig+0x282>
 80052ea:	2310      	movs	r3, #16
 80052ec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a17      	ldr	r2, [pc, #92]	; (8005350 <UART_SetConfig+0x2e4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	f040 8087 	bne.w	8005408 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052fa:	7efb      	ldrb	r3, [r7, #27]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d837      	bhi.n	8005370 <UART_SetConfig+0x304>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x29c>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005371 	.word	0x08005371
 8005310:	08005335 	.word	0x08005335
 8005314:	08005371 	.word	0x08005371
 8005318:	0800533b 	.word	0x0800533b
 800531c:	08005371 	.word	0x08005371
 8005320:	08005371 	.word	0x08005371
 8005324:	08005371 	.word	0x08005371
 8005328:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fe fef0 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8005330:	6178      	str	r0, [r7, #20]
        break;
 8005332:	e022      	b.n	800537a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <UART_SetConfig+0x300>)
 8005336:	617b      	str	r3, [r7, #20]
        break;
 8005338:	e01f      	b.n	800537a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7fe fe51 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 800533e:	6178      	str	r0, [r7, #20]
        break;
 8005340:	e01b      	b.n	800537a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005346:	617b      	str	r3, [r7, #20]
        break;
 8005348:	e017      	b.n	800537a <UART_SetConfig+0x30e>
 800534a:	bf00      	nop
 800534c:	efff69f3 	.word	0xefff69f3
 8005350:	40008000 	.word	0x40008000
 8005354:	40013800 	.word	0x40013800
 8005358:	40021000 	.word	0x40021000
 800535c:	40004400 	.word	0x40004400
 8005360:	40004800 	.word	0x40004800
 8005364:	40004c00 	.word	0x40004c00
 8005368:	40005000 	.word	0x40005000
 800536c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	76bb      	strb	r3, [r7, #26]
        break;
 8005378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80f1 	beq.w	8005564 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	429a      	cmp	r2, r3
 8005390:	d305      	bcc.n	800539e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	429a      	cmp	r2, r3
 800539c:	d902      	bls.n	80053a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	76bb      	strb	r3, [r7, #26]
 80053a2:	e0df      	b.n	8005564 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	020b      	lsls	r3, r1, #8
 80053b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053ba:	0202      	lsls	r2, r0, #8
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	6849      	ldr	r1, [r1, #4]
 80053c0:	0849      	lsrs	r1, r1, #1
 80053c2:	4608      	mov	r0, r1
 80053c4:	f04f 0100 	mov.w	r1, #0
 80053c8:	1814      	adds	r4, r2, r0
 80053ca:	eb43 0501 	adc.w	r5, r3, r1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	f7fa ff50 	bl	8000280 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4613      	mov	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ee:	d308      	bcc.n	8005402 <UART_SetConfig+0x396>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f6:	d204      	bcs.n	8005402 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	e0b0      	b.n	8005564 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	76bb      	strb	r3, [r7, #26]
 8005406:	e0ad      	b.n	8005564 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005410:	d15c      	bne.n	80054cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005412:	7efb      	ldrb	r3, [r7, #27]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d828      	bhi.n	800546a <UART_SetConfig+0x3fe>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x3b4>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	0800546b 	.word	0x0800546b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800546b 	.word	0x0800546b
 8005438:	0800546b 	.word	0x0800546b
 800543c:	0800546b 	.word	0x0800546b
 8005440:	08005463 	.word	0x08005463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fe fe64 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8005448:	6178      	str	r0, [r7, #20]
        break;
 800544a:	e013      	b.n	8005474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7fe fe76 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8005450:	6178      	str	r0, [r7, #20]
        break;
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005454:	4b49      	ldr	r3, [pc, #292]	; (800557c <UART_SetConfig+0x510>)
 8005456:	617b      	str	r3, [r7, #20]
        break;
 8005458:	e00c      	b.n	8005474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545a:	f7fe fdc1 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 800545e:	6178      	str	r0, [r7, #20]
        break;
 8005460:	e008      	b.n	8005474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005466:	617b      	str	r3, [r7, #20]
        break;
 8005468:	e004      	b.n	8005474 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	76bb      	strb	r3, [r7, #26]
        break;
 8005472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d074      	beq.n	8005564 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	005a      	lsls	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	b29b      	uxth	r3, r3
 8005490:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d916      	bls.n	80054c6 <UART_SetConfig+0x45a>
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549e:	d212      	bcs.n	80054c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f023 030f 	bic.w	r3, r3, #15
 80054a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	89fb      	ldrh	r3, [r7, #14]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	89fa      	ldrh	r2, [r7, #14]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	e04e      	b.n	8005564 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	76bb      	strb	r3, [r7, #26]
 80054ca:	e04b      	b.n	8005564 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054cc:	7efb      	ldrb	r3, [r7, #27]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d827      	bhi.n	8005522 <UART_SetConfig+0x4b6>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x46c>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005513 	.word	0x08005513
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005523 	.word	0x08005523
 80054f4:	08005523 	.word	0x08005523
 80054f8:	0800551b 	.word	0x0800551b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fe fe08 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8005500:	6178      	str	r0, [r7, #20]
        break;
 8005502:	e013      	b.n	800552c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7fe fe1a 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8005508:	6178      	str	r0, [r7, #20]
        break;
 800550a:	e00f      	b.n	800552c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <UART_SetConfig+0x510>)
 800550e:	617b      	str	r3, [r7, #20]
        break;
 8005510:	e00c      	b.n	800552c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005512:	f7fe fd65 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8005516:	6178      	str	r0, [r7, #20]
        break;
 8005518:	e008      	b.n	800552c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	617b      	str	r3, [r7, #20]
        break;
 8005520:	e004      	b.n	800552c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	76bb      	strb	r3, [r7, #26]
        break;
 800552a:	bf00      	nop
    }

    if (pclk != 0U)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	085a      	lsrs	r2, r3, #1
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	441a      	add	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	b29b      	uxth	r3, r3
 8005546:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b0f      	cmp	r3, #15
 800554c:	d908      	bls.n	8005560 <UART_SetConfig+0x4f4>
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005554:	d204      	bcs.n	8005560 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	e001      	b.n	8005564 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005570:	7ebb      	ldrb	r3, [r7, #26]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bdb0      	pop	{r4, r5, r7, pc}
 800557a:	bf00      	nop
 800557c:	00f42400 	.word	0x00f42400

08005580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01a      	beq.n	8005696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567e:	d10a      	bne.n	8005696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d4:	f7fc fa8e 	bl	8001bf4 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d10e      	bne.n	8005706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f82d 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e023      	b.n	800574e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d10e      	bne.n	8005732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f817 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e00d      	b.n	800574e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005766:	e05e      	b.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d05a      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005770:	f7fc fa40 	bl	8001bf4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	429a      	cmp	r2, r3
 800577e:	d302      	bcc.n	8005786 <UART_WaitOnFlagUntilTimeout+0x30>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11b      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005794:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e043      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d02c      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057da:	d124      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e00f      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4013      	ands	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	bf0c      	ite	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	2300      	movne	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	429a      	cmp	r2, r3
 8005842:	d091      	beq.n	8005768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800584e:	b084      	sub	sp, #16
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	f107 001c 	add.w	r0, r7, #28
 800585c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa23 	bl	8005cb8 <USB_CoreReset>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
 8005888:	e005      	b.n	8005896 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058a2:	b004      	add	sp, #16
 80058a4:	4770      	bx	lr

080058a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 0201 	bic.w	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d106      	bne.n	80058f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	e00b      	b.n	800590c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]
 8005906:	e001      	b.n	800590c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e003      	b.n	8005914 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800590c:	2032      	movs	r0, #50	; 0x32
 800590e:	f7fc f97d 	bl	8001c0c <HAL_Delay>

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800591c:	b084      	sub	sp, #16
 800591e:	b580      	push	{r7, lr}
 8005920:	b086      	sub	sp, #24
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800592a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	e009      	b.n	8005950 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3340      	adds	r3, #64	; 0x40
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	2200      	movs	r2, #0
 8005948:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	3301      	adds	r3, #1
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b0e      	cmp	r3, #14
 8005954:	d9f2      	bls.n	800593c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11c      	bne.n	8005996 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596a:	f043 0302 	orr.w	r3, r3, #2
 800596e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e005      	b.n	80059a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b4:	4619      	mov	r1, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059bc:	461a      	mov	r2, r3
 80059be:	680b      	ldr	r3, [r1, #0]
 80059c0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059c2:	2103      	movs	r1, #3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f93d 	bl	8005c44 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059ca:	2110      	movs	r1, #16
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8f1 	bl	8005bb4 <USB_FlushTxFifo>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f90f 	bl	8005c00 <USB_FlushRxFifo>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a10:	2300      	movs	r3, #0
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	e043      	b.n	8005a9e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a2c:	d118      	bne.n	8005a60 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	461a      	mov	r2, r3
 8005a42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e013      	b.n	8005a72 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	461a      	mov	r2, r3
 8005a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e008      	b.n	8005a72 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	461a      	mov	r2, r3
 8005a92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d3b7      	bcc.n	8005a16 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	e043      	b.n	8005b34 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac2:	d118      	bne.n	8005af6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e013      	b.n	8005b08 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	461a      	mov	r2, r3
 8005aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	e008      	b.n	8005b08 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	461a      	mov	r2, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	461a      	mov	r2, r3
 8005b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3301      	adds	r3, #1
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3b7      	bcc.n	8005aac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f043 0210 	orr.w	r2, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <USB_DevInit+0x294>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f043 0208 	orr.w	r2, r3, #8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b96:	f043 0304 	orr.w	r3, r3, #4
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005baa:	b004      	add	sp, #16
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	803c3800 	.word	0x803c3800

08005bb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <USB_FlushTxFifo+0x48>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d901      	bls.n	8005be0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e006      	b.n	8005bee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d0f0      	beq.n	8005bce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	00030d40 	.word	0x00030d40

08005c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2210      	movs	r2, #16
 8005c10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3301      	adds	r3, #1
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a09      	ldr	r2, [pc, #36]	; (8005c40 <USB_FlushRxFifo+0x40>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d901      	bls.n	8005c24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e006      	b.n	8005c32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d0f0      	beq.n	8005c12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	00030d40 	.word	0x00030d40

08005c44 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c64:	4313      	orrs	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c90:	f023 0303 	bic.w	r3, r3, #3
 8005c94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca4:	f043 0302 	orr.w	r3, r3, #2
 8005ca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <USB_CoreReset+0x64>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e01b      	b.n	8005d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	daf2      	bge.n	8005cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f043 0201 	orr.w	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <USB_CoreReset+0x64>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d901      	bls.n	8005d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e006      	b.n	8005d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d0f0      	beq.n	8005cee <USB_CoreReset+0x36>

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	00030d40 	.word	0x00030d40

08005d20 <__errno>:
 8005d20:	4b01      	ldr	r3, [pc, #4]	; (8005d28 <__errno+0x8>)
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000000c 	.word	0x2000000c

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4d0d      	ldr	r5, [pc, #52]	; (8005d64 <__libc_init_array+0x38>)
 8005d30:	4c0d      	ldr	r4, [pc, #52]	; (8005d68 <__libc_init_array+0x3c>)
 8005d32:	1b64      	subs	r4, r4, r5
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	2600      	movs	r6, #0
 8005d38:	42a6      	cmp	r6, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	4d0b      	ldr	r5, [pc, #44]	; (8005d6c <__libc_init_array+0x40>)
 8005d3e:	4c0c      	ldr	r4, [pc, #48]	; (8005d70 <__libc_init_array+0x44>)
 8005d40:	f000 fc62 	bl	8006608 <_init>
 8005d44:	1b64      	subs	r4, r4, r5
 8005d46:	10a4      	asrs	r4, r4, #2
 8005d48:	2600      	movs	r6, #0
 8005d4a:	42a6      	cmp	r6, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d54:	4798      	blx	r3
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5e:	4798      	blx	r3
 8005d60:	3601      	adds	r6, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	080067d4 	.word	0x080067d4
 8005d68:	080067d4 	.word	0x080067d4
 8005d6c:	080067d4 	.word	0x080067d4
 8005d70:	080067d8 	.word	0x080067d8

08005d74 <memset>:
 8005d74:	4402      	add	r2, r0
 8005d76:	4603      	mov	r3, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <sniprintf>:
 8005d84:	b40c      	push	{r2, r3}
 8005d86:	b530      	push	{r4, r5, lr}
 8005d88:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <sniprintf+0x64>)
 8005d8a:	1e0c      	subs	r4, r1, #0
 8005d8c:	681d      	ldr	r5, [r3, #0]
 8005d8e:	b09d      	sub	sp, #116	; 0x74
 8005d90:	da08      	bge.n	8005da4 <sniprintf+0x20>
 8005d92:	238b      	movs	r3, #139	; 0x8b
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9a:	b01d      	add	sp, #116	; 0x74
 8005d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005da0:	b002      	add	sp, #8
 8005da2:	4770      	bx	lr
 8005da4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005da8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dac:	bf14      	ite	ne
 8005dae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005db2:	4623      	moveq	r3, r4
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dbc:	9002      	str	r0, [sp, #8]
 8005dbe:	9006      	str	r0, [sp, #24]
 8005dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005dc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dc6:	ab21      	add	r3, sp, #132	; 0x84
 8005dc8:	a902      	add	r1, sp, #8
 8005dca:	4628      	mov	r0, r5
 8005dcc:	9301      	str	r3, [sp, #4]
 8005dce:	f000 f869 	bl	8005ea4 <_svfiprintf_r>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	bfbc      	itt	lt
 8005dd6:	238b      	movlt	r3, #139	; 0x8b
 8005dd8:	602b      	strlt	r3, [r5, #0]
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	d0dd      	beq.n	8005d9a <sniprintf+0x16>
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e7d9      	b.n	8005d9a <sniprintf+0x16>
 8005de6:	bf00      	nop
 8005de8:	2000000c 	.word	0x2000000c

08005dec <__ssputs_r>:
 8005dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	688e      	ldr	r6, [r1, #8]
 8005df2:	429e      	cmp	r6, r3
 8005df4:	4682      	mov	sl, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	4690      	mov	r8, r2
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	d838      	bhi.n	8005e70 <__ssputs_r+0x84>
 8005dfe:	898a      	ldrh	r2, [r1, #12]
 8005e00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e04:	d032      	beq.n	8005e6c <__ssputs_r+0x80>
 8005e06:	6825      	ldr	r5, [r4, #0]
 8005e08:	6909      	ldr	r1, [r1, #16]
 8005e0a:	eba5 0901 	sub.w	r9, r5, r1
 8005e0e:	6965      	ldr	r5, [r4, #20]
 8005e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e18:	3301      	adds	r3, #1
 8005e1a:	444b      	add	r3, r9
 8005e1c:	106d      	asrs	r5, r5, #1
 8005e1e:	429d      	cmp	r5, r3
 8005e20:	bf38      	it	cc
 8005e22:	461d      	movcc	r5, r3
 8005e24:	0553      	lsls	r3, r2, #21
 8005e26:	d531      	bpl.n	8005e8c <__ssputs_r+0xa0>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f000 fb47 	bl	80064bc <_malloc_r>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	b950      	cbnz	r0, 8005e48 <__ssputs_r+0x5c>
 8005e32:	230c      	movs	r3, #12
 8005e34:	f8ca 3000 	str.w	r3, [sl]
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e48:	6921      	ldr	r1, [r4, #16]
 8005e4a:	464a      	mov	r2, r9
 8005e4c:	f000 fabe 	bl	80063cc <memcpy>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5a:	81a3      	strh	r3, [r4, #12]
 8005e5c:	6126      	str	r6, [r4, #16]
 8005e5e:	6165      	str	r5, [r4, #20]
 8005e60:	444e      	add	r6, r9
 8005e62:	eba5 0509 	sub.w	r5, r5, r9
 8005e66:	6026      	str	r6, [r4, #0]
 8005e68:	60a5      	str	r5, [r4, #8]
 8005e6a:	463e      	mov	r6, r7
 8005e6c:	42be      	cmp	r6, r7
 8005e6e:	d900      	bls.n	8005e72 <__ssputs_r+0x86>
 8005e70:	463e      	mov	r6, r7
 8005e72:	4632      	mov	r2, r6
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	4641      	mov	r1, r8
 8005e78:	f000 fab6 	bl	80063e8 <memmove>
 8005e7c:	68a3      	ldr	r3, [r4, #8]
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	1b9b      	subs	r3, r3, r6
 8005e82:	4432      	add	r2, r6
 8005e84:	60a3      	str	r3, [r4, #8]
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	2000      	movs	r0, #0
 8005e8a:	e7db      	b.n	8005e44 <__ssputs_r+0x58>
 8005e8c:	462a      	mov	r2, r5
 8005e8e:	f000 fb6f 	bl	8006570 <_realloc_r>
 8005e92:	4606      	mov	r6, r0
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d1e1      	bne.n	8005e5c <__ssputs_r+0x70>
 8005e98:	6921      	ldr	r1, [r4, #16]
 8005e9a:	4650      	mov	r0, sl
 8005e9c:	f000 fabe 	bl	800641c <_free_r>
 8005ea0:	e7c7      	b.n	8005e32 <__ssputs_r+0x46>
	...

08005ea4 <_svfiprintf_r>:
 8005ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	4698      	mov	r8, r3
 8005eaa:	898b      	ldrh	r3, [r1, #12]
 8005eac:	061b      	lsls	r3, r3, #24
 8005eae:	b09d      	sub	sp, #116	; 0x74
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	d50e      	bpl.n	8005ed6 <_svfiprintf_r+0x32>
 8005eb8:	690b      	ldr	r3, [r1, #16]
 8005eba:	b963      	cbnz	r3, 8005ed6 <_svfiprintf_r+0x32>
 8005ebc:	2140      	movs	r1, #64	; 0x40
 8005ebe:	f000 fafd 	bl	80064bc <_malloc_r>
 8005ec2:	6028      	str	r0, [r5, #0]
 8005ec4:	6128      	str	r0, [r5, #16]
 8005ec6:	b920      	cbnz	r0, 8005ed2 <_svfiprintf_r+0x2e>
 8005ec8:	230c      	movs	r3, #12
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	e0d1      	b.n	8006076 <_svfiprintf_r+0x1d2>
 8005ed2:	2340      	movs	r3, #64	; 0x40
 8005ed4:	616b      	str	r3, [r5, #20]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eda:	2320      	movs	r3, #32
 8005edc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee4:	2330      	movs	r3, #48	; 0x30
 8005ee6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006090 <_svfiprintf_r+0x1ec>
 8005eea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eee:	f04f 0901 	mov.w	r9, #1
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	469a      	mov	sl, r3
 8005ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005efa:	b10a      	cbz	r2, 8005f00 <_svfiprintf_r+0x5c>
 8005efc:	2a25      	cmp	r2, #37	; 0x25
 8005efe:	d1f9      	bne.n	8005ef4 <_svfiprintf_r+0x50>
 8005f00:	ebba 0b04 	subs.w	fp, sl, r4
 8005f04:	d00b      	beq.n	8005f1e <_svfiprintf_r+0x7a>
 8005f06:	465b      	mov	r3, fp
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff ff6d 	bl	8005dec <__ssputs_r>
 8005f12:	3001      	adds	r0, #1
 8005f14:	f000 80aa 	beq.w	800606c <_svfiprintf_r+0x1c8>
 8005f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f1a:	445a      	add	r2, fp
 8005f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80a2 	beq.w	800606c <_svfiprintf_r+0x1c8>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f32:	f10a 0a01 	add.w	sl, sl, #1
 8005f36:	9304      	str	r3, [sp, #16]
 8005f38:	9307      	str	r3, [sp, #28]
 8005f3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f3e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f40:	4654      	mov	r4, sl
 8005f42:	2205      	movs	r2, #5
 8005f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f48:	4851      	ldr	r0, [pc, #324]	; (8006090 <_svfiprintf_r+0x1ec>)
 8005f4a:	f7fa f949 	bl	80001e0 <memchr>
 8005f4e:	9a04      	ldr	r2, [sp, #16]
 8005f50:	b9d8      	cbnz	r0, 8005f8a <_svfiprintf_r+0xe6>
 8005f52:	06d0      	lsls	r0, r2, #27
 8005f54:	bf44      	itt	mi
 8005f56:	2320      	movmi	r3, #32
 8005f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f5c:	0711      	lsls	r1, r2, #28
 8005f5e:	bf44      	itt	mi
 8005f60:	232b      	movmi	r3, #43	; 0x2b
 8005f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f66:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f6c:	d015      	beq.n	8005f9a <_svfiprintf_r+0xf6>
 8005f6e:	9a07      	ldr	r2, [sp, #28]
 8005f70:	4654      	mov	r4, sl
 8005f72:	2000      	movs	r0, #0
 8005f74:	f04f 0c0a 	mov.w	ip, #10
 8005f78:	4621      	mov	r1, r4
 8005f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7e:	3b30      	subs	r3, #48	; 0x30
 8005f80:	2b09      	cmp	r3, #9
 8005f82:	d94e      	bls.n	8006022 <_svfiprintf_r+0x17e>
 8005f84:	b1b0      	cbz	r0, 8005fb4 <_svfiprintf_r+0x110>
 8005f86:	9207      	str	r2, [sp, #28]
 8005f88:	e014      	b.n	8005fb4 <_svfiprintf_r+0x110>
 8005f8a:	eba0 0308 	sub.w	r3, r0, r8
 8005f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	46a2      	mov	sl, r4
 8005f98:	e7d2      	b.n	8005f40 <_svfiprintf_r+0x9c>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	9103      	str	r1, [sp, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfbb      	ittet	lt
 8005fa6:	425b      	neglt	r3, r3
 8005fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fac:	9307      	strge	r3, [sp, #28]
 8005fae:	9307      	strlt	r3, [sp, #28]
 8005fb0:	bfb8      	it	lt
 8005fb2:	9204      	strlt	r2, [sp, #16]
 8005fb4:	7823      	ldrb	r3, [r4, #0]
 8005fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb8:	d10c      	bne.n	8005fd4 <_svfiprintf_r+0x130>
 8005fba:	7863      	ldrb	r3, [r4, #1]
 8005fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8005fbe:	d135      	bne.n	800602c <_svfiprintf_r+0x188>
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	1d1a      	adds	r2, r3, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	9203      	str	r2, [sp, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bfb8      	it	lt
 8005fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fd0:	3402      	adds	r4, #2
 8005fd2:	9305      	str	r3, [sp, #20]
 8005fd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060a0 <_svfiprintf_r+0x1fc>
 8005fd8:	7821      	ldrb	r1, [r4, #0]
 8005fda:	2203      	movs	r2, #3
 8005fdc:	4650      	mov	r0, sl
 8005fde:	f7fa f8ff 	bl	80001e0 <memchr>
 8005fe2:	b140      	cbz	r0, 8005ff6 <_svfiprintf_r+0x152>
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	eba0 000a 	sub.w	r0, r0, sl
 8005fea:	fa03 f000 	lsl.w	r0, r3, r0
 8005fee:	9b04      	ldr	r3, [sp, #16]
 8005ff0:	4303      	orrs	r3, r0
 8005ff2:	3401      	adds	r4, #1
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffa:	4826      	ldr	r0, [pc, #152]	; (8006094 <_svfiprintf_r+0x1f0>)
 8005ffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006000:	2206      	movs	r2, #6
 8006002:	f7fa f8ed 	bl	80001e0 <memchr>
 8006006:	2800      	cmp	r0, #0
 8006008:	d038      	beq.n	800607c <_svfiprintf_r+0x1d8>
 800600a:	4b23      	ldr	r3, [pc, #140]	; (8006098 <_svfiprintf_r+0x1f4>)
 800600c:	bb1b      	cbnz	r3, 8006056 <_svfiprintf_r+0x1b2>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	3307      	adds	r3, #7
 8006012:	f023 0307 	bic.w	r3, r3, #7
 8006016:	3308      	adds	r3, #8
 8006018:	9303      	str	r3, [sp, #12]
 800601a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601c:	4433      	add	r3, r6
 800601e:	9309      	str	r3, [sp, #36]	; 0x24
 8006020:	e767      	b.n	8005ef2 <_svfiprintf_r+0x4e>
 8006022:	fb0c 3202 	mla	r2, ip, r2, r3
 8006026:	460c      	mov	r4, r1
 8006028:	2001      	movs	r0, #1
 800602a:	e7a5      	b.n	8005f78 <_svfiprintf_r+0xd4>
 800602c:	2300      	movs	r3, #0
 800602e:	3401      	adds	r4, #1
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	4619      	mov	r1, r3
 8006034:	f04f 0c0a 	mov.w	ip, #10
 8006038:	4620      	mov	r0, r4
 800603a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800603e:	3a30      	subs	r2, #48	; 0x30
 8006040:	2a09      	cmp	r2, #9
 8006042:	d903      	bls.n	800604c <_svfiprintf_r+0x1a8>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0c5      	beq.n	8005fd4 <_svfiprintf_r+0x130>
 8006048:	9105      	str	r1, [sp, #20]
 800604a:	e7c3      	b.n	8005fd4 <_svfiprintf_r+0x130>
 800604c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006050:	4604      	mov	r4, r0
 8006052:	2301      	movs	r3, #1
 8006054:	e7f0      	b.n	8006038 <_svfiprintf_r+0x194>
 8006056:	ab03      	add	r3, sp, #12
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	462a      	mov	r2, r5
 800605c:	4b0f      	ldr	r3, [pc, #60]	; (800609c <_svfiprintf_r+0x1f8>)
 800605e:	a904      	add	r1, sp, #16
 8006060:	4638      	mov	r0, r7
 8006062:	f3af 8000 	nop.w
 8006066:	1c42      	adds	r2, r0, #1
 8006068:	4606      	mov	r6, r0
 800606a:	d1d6      	bne.n	800601a <_svfiprintf_r+0x176>
 800606c:	89ab      	ldrh	r3, [r5, #12]
 800606e:	065b      	lsls	r3, r3, #25
 8006070:	f53f af2c 	bmi.w	8005ecc <_svfiprintf_r+0x28>
 8006074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006076:	b01d      	add	sp, #116	; 0x74
 8006078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607c:	ab03      	add	r3, sp, #12
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	462a      	mov	r2, r5
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <_svfiprintf_r+0x1f8>)
 8006084:	a904      	add	r1, sp, #16
 8006086:	4638      	mov	r0, r7
 8006088:	f000 f87a 	bl	8006180 <_printf_i>
 800608c:	e7eb      	b.n	8006066 <_svfiprintf_r+0x1c2>
 800608e:	bf00      	nop
 8006090:	08006798 	.word	0x08006798
 8006094:	080067a2 	.word	0x080067a2
 8006098:	00000000 	.word	0x00000000
 800609c:	08005ded 	.word	0x08005ded
 80060a0:	0800679e 	.word	0x0800679e

080060a4 <_printf_common>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	4616      	mov	r6, r2
 80060aa:	4699      	mov	r9, r3
 80060ac:	688a      	ldr	r2, [r1, #8]
 80060ae:	690b      	ldr	r3, [r1, #16]
 80060b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b4:	4293      	cmp	r3, r2
 80060b6:	bfb8      	it	lt
 80060b8:	4613      	movlt	r3, r2
 80060ba:	6033      	str	r3, [r6, #0]
 80060bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c0:	4607      	mov	r7, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	b10a      	cbz	r2, 80060ca <_printf_common+0x26>
 80060c6:	3301      	adds	r3, #1
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	0699      	lsls	r1, r3, #26
 80060ce:	bf42      	ittt	mi
 80060d0:	6833      	ldrmi	r3, [r6, #0]
 80060d2:	3302      	addmi	r3, #2
 80060d4:	6033      	strmi	r3, [r6, #0]
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	f015 0506 	ands.w	r5, r5, #6
 80060dc:	d106      	bne.n	80060ec <_printf_common+0x48>
 80060de:	f104 0a19 	add.w	sl, r4, #25
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	6832      	ldr	r2, [r6, #0]
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dc26      	bgt.n	800613a <_printf_common+0x96>
 80060ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f0:	1e13      	subs	r3, r2, #0
 80060f2:	6822      	ldr	r2, [r4, #0]
 80060f4:	bf18      	it	ne
 80060f6:	2301      	movne	r3, #1
 80060f8:	0692      	lsls	r2, r2, #26
 80060fa:	d42b      	bmi.n	8006154 <_printf_common+0xb0>
 80060fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006100:	4649      	mov	r1, r9
 8006102:	4638      	mov	r0, r7
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d01e      	beq.n	8006148 <_printf_common+0xa4>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	68e5      	ldr	r5, [r4, #12]
 800610e:	6832      	ldr	r2, [r6, #0]
 8006110:	f003 0306 	and.w	r3, r3, #6
 8006114:	2b04      	cmp	r3, #4
 8006116:	bf08      	it	eq
 8006118:	1aad      	subeq	r5, r5, r2
 800611a:	68a3      	ldr	r3, [r4, #8]
 800611c:	6922      	ldr	r2, [r4, #16]
 800611e:	bf0c      	ite	eq
 8006120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006124:	2500      	movne	r5, #0
 8006126:	4293      	cmp	r3, r2
 8006128:	bfc4      	itt	gt
 800612a:	1a9b      	subgt	r3, r3, r2
 800612c:	18ed      	addgt	r5, r5, r3
 800612e:	2600      	movs	r6, #0
 8006130:	341a      	adds	r4, #26
 8006132:	42b5      	cmp	r5, r6
 8006134:	d11a      	bne.n	800616c <_printf_common+0xc8>
 8006136:	2000      	movs	r0, #0
 8006138:	e008      	b.n	800614c <_printf_common+0xa8>
 800613a:	2301      	movs	r3, #1
 800613c:	4652      	mov	r2, sl
 800613e:	4649      	mov	r1, r9
 8006140:	4638      	mov	r0, r7
 8006142:	47c0      	blx	r8
 8006144:	3001      	adds	r0, #1
 8006146:	d103      	bne.n	8006150 <_printf_common+0xac>
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	3501      	adds	r5, #1
 8006152:	e7c6      	b.n	80060e2 <_printf_common+0x3e>
 8006154:	18e1      	adds	r1, r4, r3
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	2030      	movs	r0, #48	; 0x30
 800615a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800615e:	4422      	add	r2, r4
 8006160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006168:	3302      	adds	r3, #2
 800616a:	e7c7      	b.n	80060fc <_printf_common+0x58>
 800616c:	2301      	movs	r3, #1
 800616e:	4622      	mov	r2, r4
 8006170:	4649      	mov	r1, r9
 8006172:	4638      	mov	r0, r7
 8006174:	47c0      	blx	r8
 8006176:	3001      	adds	r0, #1
 8006178:	d0e6      	beq.n	8006148 <_printf_common+0xa4>
 800617a:	3601      	adds	r6, #1
 800617c:	e7d9      	b.n	8006132 <_printf_common+0x8e>
	...

08006180 <_printf_i>:
 8006180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	460c      	mov	r4, r1
 8006186:	4691      	mov	r9, r2
 8006188:	7e27      	ldrb	r7, [r4, #24]
 800618a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800618c:	2f78      	cmp	r7, #120	; 0x78
 800618e:	4680      	mov	r8, r0
 8006190:	469a      	mov	sl, r3
 8006192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006196:	d807      	bhi.n	80061a8 <_printf_i+0x28>
 8006198:	2f62      	cmp	r7, #98	; 0x62
 800619a:	d80a      	bhi.n	80061b2 <_printf_i+0x32>
 800619c:	2f00      	cmp	r7, #0
 800619e:	f000 80d8 	beq.w	8006352 <_printf_i+0x1d2>
 80061a2:	2f58      	cmp	r7, #88	; 0x58
 80061a4:	f000 80a3 	beq.w	80062ee <_printf_i+0x16e>
 80061a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b0:	e03a      	b.n	8006228 <_printf_i+0xa8>
 80061b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061b6:	2b15      	cmp	r3, #21
 80061b8:	d8f6      	bhi.n	80061a8 <_printf_i+0x28>
 80061ba:	a001      	add	r0, pc, #4	; (adr r0, 80061c0 <_printf_i+0x40>)
 80061bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061c0:	08006219 	.word	0x08006219
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	080061a9 	.word	0x080061a9
 80061cc:	080061a9 	.word	0x080061a9
 80061d0:	080061a9 	.word	0x080061a9
 80061d4:	080061a9 	.word	0x080061a9
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	080061a9 	.word	0x080061a9
 80061e0:	080061a9 	.word	0x080061a9
 80061e4:	080061a9 	.word	0x080061a9
 80061e8:	080061a9 	.word	0x080061a9
 80061ec:	08006339 	.word	0x08006339
 80061f0:	0800625d 	.word	0x0800625d
 80061f4:	0800631b 	.word	0x0800631b
 80061f8:	080061a9 	.word	0x080061a9
 80061fc:	080061a9 	.word	0x080061a9
 8006200:	0800635b 	.word	0x0800635b
 8006204:	080061a9 	.word	0x080061a9
 8006208:	0800625d 	.word	0x0800625d
 800620c:	080061a9 	.word	0x080061a9
 8006210:	080061a9 	.word	0x080061a9
 8006214:	08006323 	.word	0x08006323
 8006218:	680b      	ldr	r3, [r1, #0]
 800621a:	1d1a      	adds	r2, r3, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	600a      	str	r2, [r1, #0]
 8006220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006228:	2301      	movs	r3, #1
 800622a:	e0a3      	b.n	8006374 <_printf_i+0x1f4>
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	6808      	ldr	r0, [r1, #0]
 8006230:	062e      	lsls	r6, r5, #24
 8006232:	f100 0304 	add.w	r3, r0, #4
 8006236:	d50a      	bpl.n	800624e <_printf_i+0xce>
 8006238:	6805      	ldr	r5, [r0, #0]
 800623a:	600b      	str	r3, [r1, #0]
 800623c:	2d00      	cmp	r5, #0
 800623e:	da03      	bge.n	8006248 <_printf_i+0xc8>
 8006240:	232d      	movs	r3, #45	; 0x2d
 8006242:	426d      	negs	r5, r5
 8006244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006248:	485e      	ldr	r0, [pc, #376]	; (80063c4 <_printf_i+0x244>)
 800624a:	230a      	movs	r3, #10
 800624c:	e019      	b.n	8006282 <_printf_i+0x102>
 800624e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006252:	6805      	ldr	r5, [r0, #0]
 8006254:	600b      	str	r3, [r1, #0]
 8006256:	bf18      	it	ne
 8006258:	b22d      	sxthne	r5, r5
 800625a:	e7ef      	b.n	800623c <_printf_i+0xbc>
 800625c:	680b      	ldr	r3, [r1, #0]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	1d18      	adds	r0, r3, #4
 8006262:	6008      	str	r0, [r1, #0]
 8006264:	0628      	lsls	r0, r5, #24
 8006266:	d501      	bpl.n	800626c <_printf_i+0xec>
 8006268:	681d      	ldr	r5, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0xf2>
 800626c:	0669      	lsls	r1, r5, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0xe8>
 8006270:	881d      	ldrh	r5, [r3, #0]
 8006272:	4854      	ldr	r0, [pc, #336]	; (80063c4 <_printf_i+0x244>)
 8006274:	2f6f      	cmp	r7, #111	; 0x6f
 8006276:	bf0c      	ite	eq
 8006278:	2308      	moveq	r3, #8
 800627a:	230a      	movne	r3, #10
 800627c:	2100      	movs	r1, #0
 800627e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006282:	6866      	ldr	r6, [r4, #4]
 8006284:	60a6      	str	r6, [r4, #8]
 8006286:	2e00      	cmp	r6, #0
 8006288:	bfa2      	ittt	ge
 800628a:	6821      	ldrge	r1, [r4, #0]
 800628c:	f021 0104 	bicge.w	r1, r1, #4
 8006290:	6021      	strge	r1, [r4, #0]
 8006292:	b90d      	cbnz	r5, 8006298 <_printf_i+0x118>
 8006294:	2e00      	cmp	r6, #0
 8006296:	d04d      	beq.n	8006334 <_printf_i+0x1b4>
 8006298:	4616      	mov	r6, r2
 800629a:	fbb5 f1f3 	udiv	r1, r5, r3
 800629e:	fb03 5711 	mls	r7, r3, r1, r5
 80062a2:	5dc7      	ldrb	r7, [r0, r7]
 80062a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062a8:	462f      	mov	r7, r5
 80062aa:	42bb      	cmp	r3, r7
 80062ac:	460d      	mov	r5, r1
 80062ae:	d9f4      	bls.n	800629a <_printf_i+0x11a>
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d10b      	bne.n	80062cc <_printf_i+0x14c>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	07df      	lsls	r7, r3, #31
 80062b8:	d508      	bpl.n	80062cc <_printf_i+0x14c>
 80062ba:	6923      	ldr	r3, [r4, #16]
 80062bc:	6861      	ldr	r1, [r4, #4]
 80062be:	4299      	cmp	r1, r3
 80062c0:	bfde      	ittt	le
 80062c2:	2330      	movle	r3, #48	; 0x30
 80062c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062cc:	1b92      	subs	r2, r2, r6
 80062ce:	6122      	str	r2, [r4, #16]
 80062d0:	f8cd a000 	str.w	sl, [sp]
 80062d4:	464b      	mov	r3, r9
 80062d6:	aa03      	add	r2, sp, #12
 80062d8:	4621      	mov	r1, r4
 80062da:	4640      	mov	r0, r8
 80062dc:	f7ff fee2 	bl	80060a4 <_printf_common>
 80062e0:	3001      	adds	r0, #1
 80062e2:	d14c      	bne.n	800637e <_printf_i+0x1fe>
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	b004      	add	sp, #16
 80062ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ee:	4835      	ldr	r0, [pc, #212]	; (80063c4 <_printf_i+0x244>)
 80062f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	680e      	ldr	r6, [r1, #0]
 80062f8:	061f      	lsls	r7, r3, #24
 80062fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80062fe:	600e      	str	r6, [r1, #0]
 8006300:	d514      	bpl.n	800632c <_printf_i+0x1ac>
 8006302:	07d9      	lsls	r1, r3, #31
 8006304:	bf44      	itt	mi
 8006306:	f043 0320 	orrmi.w	r3, r3, #32
 800630a:	6023      	strmi	r3, [r4, #0]
 800630c:	b91d      	cbnz	r5, 8006316 <_printf_i+0x196>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	f023 0320 	bic.w	r3, r3, #32
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	2310      	movs	r3, #16
 8006318:	e7b0      	b.n	800627c <_printf_i+0xfc>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	f043 0320 	orr.w	r3, r3, #32
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	2378      	movs	r3, #120	; 0x78
 8006324:	4828      	ldr	r0, [pc, #160]	; (80063c8 <_printf_i+0x248>)
 8006326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800632a:	e7e3      	b.n	80062f4 <_printf_i+0x174>
 800632c:	065e      	lsls	r6, r3, #25
 800632e:	bf48      	it	mi
 8006330:	b2ad      	uxthmi	r5, r5
 8006332:	e7e6      	b.n	8006302 <_printf_i+0x182>
 8006334:	4616      	mov	r6, r2
 8006336:	e7bb      	b.n	80062b0 <_printf_i+0x130>
 8006338:	680b      	ldr	r3, [r1, #0]
 800633a:	6826      	ldr	r6, [r4, #0]
 800633c:	6960      	ldr	r0, [r4, #20]
 800633e:	1d1d      	adds	r5, r3, #4
 8006340:	600d      	str	r5, [r1, #0]
 8006342:	0635      	lsls	r5, r6, #24
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	d501      	bpl.n	800634c <_printf_i+0x1cc>
 8006348:	6018      	str	r0, [r3, #0]
 800634a:	e002      	b.n	8006352 <_printf_i+0x1d2>
 800634c:	0671      	lsls	r1, r6, #25
 800634e:	d5fb      	bpl.n	8006348 <_printf_i+0x1c8>
 8006350:	8018      	strh	r0, [r3, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	4616      	mov	r6, r2
 8006358:	e7ba      	b.n	80062d0 <_printf_i+0x150>
 800635a:	680b      	ldr	r3, [r1, #0]
 800635c:	1d1a      	adds	r2, r3, #4
 800635e:	600a      	str	r2, [r1, #0]
 8006360:	681e      	ldr	r6, [r3, #0]
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	2100      	movs	r1, #0
 8006366:	4630      	mov	r0, r6
 8006368:	f7f9 ff3a 	bl	80001e0 <memchr>
 800636c:	b108      	cbz	r0, 8006372 <_printf_i+0x1f2>
 800636e:	1b80      	subs	r0, r0, r6
 8006370:	6060      	str	r0, [r4, #4]
 8006372:	6863      	ldr	r3, [r4, #4]
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	2300      	movs	r3, #0
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	e7a8      	b.n	80062d0 <_printf_i+0x150>
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	4632      	mov	r2, r6
 8006382:	4649      	mov	r1, r9
 8006384:	4640      	mov	r0, r8
 8006386:	47d0      	blx	sl
 8006388:	3001      	adds	r0, #1
 800638a:	d0ab      	beq.n	80062e4 <_printf_i+0x164>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	079b      	lsls	r3, r3, #30
 8006390:	d413      	bmi.n	80063ba <_printf_i+0x23a>
 8006392:	68e0      	ldr	r0, [r4, #12]
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	4298      	cmp	r0, r3
 8006398:	bfb8      	it	lt
 800639a:	4618      	movlt	r0, r3
 800639c:	e7a4      	b.n	80062e8 <_printf_i+0x168>
 800639e:	2301      	movs	r3, #1
 80063a0:	4632      	mov	r2, r6
 80063a2:	4649      	mov	r1, r9
 80063a4:	4640      	mov	r0, r8
 80063a6:	47d0      	blx	sl
 80063a8:	3001      	adds	r0, #1
 80063aa:	d09b      	beq.n	80062e4 <_printf_i+0x164>
 80063ac:	3501      	adds	r5, #1
 80063ae:	68e3      	ldr	r3, [r4, #12]
 80063b0:	9903      	ldr	r1, [sp, #12]
 80063b2:	1a5b      	subs	r3, r3, r1
 80063b4:	42ab      	cmp	r3, r5
 80063b6:	dcf2      	bgt.n	800639e <_printf_i+0x21e>
 80063b8:	e7eb      	b.n	8006392 <_printf_i+0x212>
 80063ba:	2500      	movs	r5, #0
 80063bc:	f104 0619 	add.w	r6, r4, #25
 80063c0:	e7f5      	b.n	80063ae <_printf_i+0x22e>
 80063c2:	bf00      	nop
 80063c4:	080067a9 	.word	0x080067a9
 80063c8:	080067ba 	.word	0x080067ba

080063cc <memcpy>:
 80063cc:	440a      	add	r2, r1
 80063ce:	4291      	cmp	r1, r2
 80063d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80063d4:	d100      	bne.n	80063d8 <memcpy+0xc>
 80063d6:	4770      	bx	lr
 80063d8:	b510      	push	{r4, lr}
 80063da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e2:	4291      	cmp	r1, r2
 80063e4:	d1f9      	bne.n	80063da <memcpy+0xe>
 80063e6:	bd10      	pop	{r4, pc}

080063e8 <memmove>:
 80063e8:	4288      	cmp	r0, r1
 80063ea:	b510      	push	{r4, lr}
 80063ec:	eb01 0402 	add.w	r4, r1, r2
 80063f0:	d902      	bls.n	80063f8 <memmove+0x10>
 80063f2:	4284      	cmp	r4, r0
 80063f4:	4623      	mov	r3, r4
 80063f6:	d807      	bhi.n	8006408 <memmove+0x20>
 80063f8:	1e43      	subs	r3, r0, #1
 80063fa:	42a1      	cmp	r1, r4
 80063fc:	d008      	beq.n	8006410 <memmove+0x28>
 80063fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006406:	e7f8      	b.n	80063fa <memmove+0x12>
 8006408:	4402      	add	r2, r0
 800640a:	4601      	mov	r1, r0
 800640c:	428a      	cmp	r2, r1
 800640e:	d100      	bne.n	8006412 <memmove+0x2a>
 8006410:	bd10      	pop	{r4, pc}
 8006412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800641a:	e7f7      	b.n	800640c <memmove+0x24>

0800641c <_free_r>:
 800641c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800641e:	2900      	cmp	r1, #0
 8006420:	d048      	beq.n	80064b4 <_free_r+0x98>
 8006422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006426:	9001      	str	r0, [sp, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f1a1 0404 	sub.w	r4, r1, #4
 800642e:	bfb8      	it	lt
 8006430:	18e4      	addlt	r4, r4, r3
 8006432:	f000 f8d3 	bl	80065dc <__malloc_lock>
 8006436:	4a20      	ldr	r2, [pc, #128]	; (80064b8 <_free_r+0x9c>)
 8006438:	9801      	ldr	r0, [sp, #4]
 800643a:	6813      	ldr	r3, [r2, #0]
 800643c:	4615      	mov	r5, r2
 800643e:	b933      	cbnz	r3, 800644e <_free_r+0x32>
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	6014      	str	r4, [r2, #0]
 8006444:	b003      	add	sp, #12
 8006446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800644a:	f000 b8cd 	b.w	80065e8 <__malloc_unlock>
 800644e:	42a3      	cmp	r3, r4
 8006450:	d90b      	bls.n	800646a <_free_r+0x4e>
 8006452:	6821      	ldr	r1, [r4, #0]
 8006454:	1862      	adds	r2, r4, r1
 8006456:	4293      	cmp	r3, r2
 8006458:	bf04      	itt	eq
 800645a:	681a      	ldreq	r2, [r3, #0]
 800645c:	685b      	ldreq	r3, [r3, #4]
 800645e:	6063      	str	r3, [r4, #4]
 8006460:	bf04      	itt	eq
 8006462:	1852      	addeq	r2, r2, r1
 8006464:	6022      	streq	r2, [r4, #0]
 8006466:	602c      	str	r4, [r5, #0]
 8006468:	e7ec      	b.n	8006444 <_free_r+0x28>
 800646a:	461a      	mov	r2, r3
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	b10b      	cbz	r3, 8006474 <_free_r+0x58>
 8006470:	42a3      	cmp	r3, r4
 8006472:	d9fa      	bls.n	800646a <_free_r+0x4e>
 8006474:	6811      	ldr	r1, [r2, #0]
 8006476:	1855      	adds	r5, r2, r1
 8006478:	42a5      	cmp	r5, r4
 800647a:	d10b      	bne.n	8006494 <_free_r+0x78>
 800647c:	6824      	ldr	r4, [r4, #0]
 800647e:	4421      	add	r1, r4
 8006480:	1854      	adds	r4, r2, r1
 8006482:	42a3      	cmp	r3, r4
 8006484:	6011      	str	r1, [r2, #0]
 8006486:	d1dd      	bne.n	8006444 <_free_r+0x28>
 8006488:	681c      	ldr	r4, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	6053      	str	r3, [r2, #4]
 800648e:	4421      	add	r1, r4
 8006490:	6011      	str	r1, [r2, #0]
 8006492:	e7d7      	b.n	8006444 <_free_r+0x28>
 8006494:	d902      	bls.n	800649c <_free_r+0x80>
 8006496:	230c      	movs	r3, #12
 8006498:	6003      	str	r3, [r0, #0]
 800649a:	e7d3      	b.n	8006444 <_free_r+0x28>
 800649c:	6825      	ldr	r5, [r4, #0]
 800649e:	1961      	adds	r1, r4, r5
 80064a0:	428b      	cmp	r3, r1
 80064a2:	bf04      	itt	eq
 80064a4:	6819      	ldreq	r1, [r3, #0]
 80064a6:	685b      	ldreq	r3, [r3, #4]
 80064a8:	6063      	str	r3, [r4, #4]
 80064aa:	bf04      	itt	eq
 80064ac:	1949      	addeq	r1, r1, r5
 80064ae:	6021      	streq	r1, [r4, #0]
 80064b0:	6054      	str	r4, [r2, #4]
 80064b2:	e7c7      	b.n	8006444 <_free_r+0x28>
 80064b4:	b003      	add	sp, #12
 80064b6:	bd30      	pop	{r4, r5, pc}
 80064b8:	200000b8 	.word	0x200000b8

080064bc <_malloc_r>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	1ccd      	adds	r5, r1, #3
 80064c0:	f025 0503 	bic.w	r5, r5, #3
 80064c4:	3508      	adds	r5, #8
 80064c6:	2d0c      	cmp	r5, #12
 80064c8:	bf38      	it	cc
 80064ca:	250c      	movcc	r5, #12
 80064cc:	2d00      	cmp	r5, #0
 80064ce:	4606      	mov	r6, r0
 80064d0:	db01      	blt.n	80064d6 <_malloc_r+0x1a>
 80064d2:	42a9      	cmp	r1, r5
 80064d4:	d903      	bls.n	80064de <_malloc_r+0x22>
 80064d6:	230c      	movs	r3, #12
 80064d8:	6033      	str	r3, [r6, #0]
 80064da:	2000      	movs	r0, #0
 80064dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064de:	f000 f87d 	bl	80065dc <__malloc_lock>
 80064e2:	4921      	ldr	r1, [pc, #132]	; (8006568 <_malloc_r+0xac>)
 80064e4:	680a      	ldr	r2, [r1, #0]
 80064e6:	4614      	mov	r4, r2
 80064e8:	b99c      	cbnz	r4, 8006512 <_malloc_r+0x56>
 80064ea:	4f20      	ldr	r7, [pc, #128]	; (800656c <_malloc_r+0xb0>)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	b923      	cbnz	r3, 80064fa <_malloc_r+0x3e>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4630      	mov	r0, r6
 80064f4:	f000 f862 	bl	80065bc <_sbrk_r>
 80064f8:	6038      	str	r0, [r7, #0]
 80064fa:	4629      	mov	r1, r5
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f85d 	bl	80065bc <_sbrk_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d123      	bne.n	800654e <_malloc_r+0x92>
 8006506:	230c      	movs	r3, #12
 8006508:	6033      	str	r3, [r6, #0]
 800650a:	4630      	mov	r0, r6
 800650c:	f000 f86c 	bl	80065e8 <__malloc_unlock>
 8006510:	e7e3      	b.n	80064da <_malloc_r+0x1e>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	1b5b      	subs	r3, r3, r5
 8006516:	d417      	bmi.n	8006548 <_malloc_r+0x8c>
 8006518:	2b0b      	cmp	r3, #11
 800651a:	d903      	bls.n	8006524 <_malloc_r+0x68>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	441c      	add	r4, r3
 8006520:	6025      	str	r5, [r4, #0]
 8006522:	e004      	b.n	800652e <_malloc_r+0x72>
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	42a2      	cmp	r2, r4
 8006528:	bf0c      	ite	eq
 800652a:	600b      	streq	r3, [r1, #0]
 800652c:	6053      	strne	r3, [r2, #4]
 800652e:	4630      	mov	r0, r6
 8006530:	f000 f85a 	bl	80065e8 <__malloc_unlock>
 8006534:	f104 000b 	add.w	r0, r4, #11
 8006538:	1d23      	adds	r3, r4, #4
 800653a:	f020 0007 	bic.w	r0, r0, #7
 800653e:	1ac2      	subs	r2, r0, r3
 8006540:	d0cc      	beq.n	80064dc <_malloc_r+0x20>
 8006542:	1a1b      	subs	r3, r3, r0
 8006544:	50a3      	str	r3, [r4, r2]
 8006546:	e7c9      	b.n	80064dc <_malloc_r+0x20>
 8006548:	4622      	mov	r2, r4
 800654a:	6864      	ldr	r4, [r4, #4]
 800654c:	e7cc      	b.n	80064e8 <_malloc_r+0x2c>
 800654e:	1cc4      	adds	r4, r0, #3
 8006550:	f024 0403 	bic.w	r4, r4, #3
 8006554:	42a0      	cmp	r0, r4
 8006556:	d0e3      	beq.n	8006520 <_malloc_r+0x64>
 8006558:	1a21      	subs	r1, r4, r0
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f82e 	bl	80065bc <_sbrk_r>
 8006560:	3001      	adds	r0, #1
 8006562:	d1dd      	bne.n	8006520 <_malloc_r+0x64>
 8006564:	e7cf      	b.n	8006506 <_malloc_r+0x4a>
 8006566:	bf00      	nop
 8006568:	200000b8 	.word	0x200000b8
 800656c:	200000bc 	.word	0x200000bc

08006570 <_realloc_r>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	4607      	mov	r7, r0
 8006574:	4614      	mov	r4, r2
 8006576:	460e      	mov	r6, r1
 8006578:	b921      	cbnz	r1, 8006584 <_realloc_r+0x14>
 800657a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800657e:	4611      	mov	r1, r2
 8006580:	f7ff bf9c 	b.w	80064bc <_malloc_r>
 8006584:	b922      	cbnz	r2, 8006590 <_realloc_r+0x20>
 8006586:	f7ff ff49 	bl	800641c <_free_r>
 800658a:	4625      	mov	r5, r4
 800658c:	4628      	mov	r0, r5
 800658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006590:	f000 f830 	bl	80065f4 <_malloc_usable_size_r>
 8006594:	42a0      	cmp	r0, r4
 8006596:	d20f      	bcs.n	80065b8 <_realloc_r+0x48>
 8006598:	4621      	mov	r1, r4
 800659a:	4638      	mov	r0, r7
 800659c:	f7ff ff8e 	bl	80064bc <_malloc_r>
 80065a0:	4605      	mov	r5, r0
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0f2      	beq.n	800658c <_realloc_r+0x1c>
 80065a6:	4631      	mov	r1, r6
 80065a8:	4622      	mov	r2, r4
 80065aa:	f7ff ff0f 	bl	80063cc <memcpy>
 80065ae:	4631      	mov	r1, r6
 80065b0:	4638      	mov	r0, r7
 80065b2:	f7ff ff33 	bl	800641c <_free_r>
 80065b6:	e7e9      	b.n	800658c <_realloc_r+0x1c>
 80065b8:	4635      	mov	r5, r6
 80065ba:	e7e7      	b.n	800658c <_realloc_r+0x1c>

080065bc <_sbrk_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4d06      	ldr	r5, [pc, #24]	; (80065d8 <_sbrk_r+0x1c>)
 80065c0:	2300      	movs	r3, #0
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	f7fb fa1a 	bl	8001a00 <_sbrk>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_sbrk_r+0x1a>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_sbrk_r+0x1a>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	200007a8 	.word	0x200007a8

080065dc <__malloc_lock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	; (80065e4 <__malloc_lock+0x8>)
 80065de:	f000 b811 	b.w	8006604 <__retarget_lock_acquire_recursive>
 80065e2:	bf00      	nop
 80065e4:	200007b0 	.word	0x200007b0

080065e8 <__malloc_unlock>:
 80065e8:	4801      	ldr	r0, [pc, #4]	; (80065f0 <__malloc_unlock+0x8>)
 80065ea:	f000 b80c 	b.w	8006606 <__retarget_lock_release_recursive>
 80065ee:	bf00      	nop
 80065f0:	200007b0 	.word	0x200007b0

080065f4 <_malloc_usable_size_r>:
 80065f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f8:	1f18      	subs	r0, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bfbc      	itt	lt
 80065fe:	580b      	ldrlt	r3, [r1, r0]
 8006600:	18c0      	addlt	r0, r0, r3
 8006602:	4770      	bx	lr

08006604 <__retarget_lock_acquire_recursive>:
 8006604:	4770      	bx	lr

08006606 <__retarget_lock_release_recursive>:
 8006606:	4770      	bx	lr

08006608 <_init>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr

08006614 <_fini>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr
