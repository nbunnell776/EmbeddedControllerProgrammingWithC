
UCSD-Embedded-C-Assignment-8-I2C-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f0  080068f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068f8  080068f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000070  08006970  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  08006970  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a060  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b9  00000000  00000000  0003a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0003d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0003e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282d8  00000000  00000000  0003fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d15  00000000  00000000  00067f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3d2f  00000000  00000000  0007fc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001739b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061fc  00000000  00000000  00173a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800670c 	.word	0x0800670c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800670c 	.word	0x0800670c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HTS221_pwr_en>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void HTS221_pwr_en(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
	// Configure control register 1 (CTRL_REG1, 0x20) bit 7 to enable one-shot
    uint8_t ctrlReg1 = 0x20;
 800057e:	2320      	movs	r3, #32
 8000580:	71fb      	strb	r3, [r7, #7]
    uint8_t CTRL_REG2_Value[] = {ctrlReg1, (1 << 7)};
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	713b      	strb	r3, [r7, #4]
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	717b      	strb	r3, [r7, #5]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, CTRL_REG2_Value, sizeof(CTRL_REG2_Value), 1000);
 800058a:	1d3a      	adds	r2, r7, #4
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	21be      	movs	r1, #190	; 0xbe
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HTS221_pwr_en+0x2c>)
 8000598:	f002 f9d8 	bl	800294c <HAL_I2C_Master_Transmit>

}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000588 	.word	0x20000588

080005a8 <HTS221_get_cal_data>:

static void HTS221_get_cal_data(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8

    /*****************************************************************************************************************/
    // Humidity calibration values

    // Register H0_rh_x2, address 0x30. Divide register value by 2 for calibration value
    uint8_t H0_rH_Address = 0x30;
 80005ae:	2330      	movs	r3, #48	; 0x30
 80005b0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_rH_Address, sizeof(H0_rH_Address), 1000);
 80005b2:	f107 020f 	add.w	r2, r7, #15
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	21be      	movs	r1, #190	; 0xbe
 80005c0:	487f      	ldr	r0, [pc, #508]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80005c2:	f002 f9c3 	bl	800294c <HAL_I2C_Master_Transmit>
	H0_rH_Value = 0xff; // Junk default value
 80005c6:	4b7f      	ldr	r3, [pc, #508]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_rH_Value, sizeof(H0_rH_Value), 1000);
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	4a7b      	ldr	r2, [pc, #492]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005d6:	21bf      	movs	r1, #191	; 0xbf
 80005d8:	4879      	ldr	r0, [pc, #484]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80005da:	f002 faab 	bl	8002b34 <HAL_I2C_Master_Receive>
	H0_rH_Value = H0_rH_Value / 2;
 80005de:	4b79      	ldr	r3, [pc, #484]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b77      	ldr	r3, [pc, #476]	; (80007c4 <HTS221_get_cal_data+0x21c>)
 80005e8:	701a      	strb	r2, [r3, #0]

	// Register H1_rh_x2, address 0x31. Divide register value by 2 for calibration value
	uint8_t H1_rH_Address = 0x31;
 80005ea:	2331      	movs	r3, #49	; 0x31
 80005ec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_rH_Address, sizeof(H1_rH_Address), 1000);
 80005ee:	f107 020e 	add.w	r2, r7, #14
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	21be      	movs	r1, #190	; 0xbe
 80005fc:	4870      	ldr	r0, [pc, #448]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80005fe:	f002 f9a5 	bl	800294c <HAL_I2C_Master_Transmit>
	H1_rH_Value = 0xff; // Junk default value
 8000602:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <HTS221_get_cal_data+0x220>)
 8000604:	22ff      	movs	r2, #255	; 0xff
 8000606:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_rH_Value, sizeof(H1_rH_Value), 1000);
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	4a6d      	ldr	r2, [pc, #436]	; (80007c8 <HTS221_get_cal_data+0x220>)
 8000612:	21bf      	movs	r1, #191	; 0xbf
 8000614:	486a      	ldr	r0, [pc, #424]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000616:	f002 fa8d 	bl	8002b34 <HAL_I2C_Master_Receive>
	H1_rH_Value = H1_rH_Value / 2;
 800061a:	4b6b      	ldr	r3, [pc, #428]	; (80007c8 <HTS221_get_cal_data+0x220>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	085b      	lsrs	r3, r3, #1
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b69      	ldr	r3, [pc, #420]	; (80007c8 <HTS221_get_cal_data+0x220>)
 8000624:	701a      	strb	r2, [r3, #0]

	// Register H0_T0_OUT, addresses 0x36 and 0x37
	uint8_t H0_T0_OUT_Address = 0x36 | 0x80;
 8000626:	23b6      	movs	r3, #182	; 0xb6
 8000628:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_T0_OUT_Address, sizeof(H0_T0_OUT_Address), 1000);
 800062a:	f107 020d 	add.w	r2, r7, #13
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	21be      	movs	r1, #190	; 0xbe
 8000638:	4861      	ldr	r0, [pc, #388]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800063a:	f002 f987 	bl	800294c <HAL_I2C_Master_Transmit>
	H0_T0_OUT_Value = 0xffff; // Junk default value
 800063e:	4b63      	ldr	r3, [pc, #396]	; (80007cc <HTS221_get_cal_data+0x224>)
 8000640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000644:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_T0_OUT_Value, sizeof(H0_T0_OUT_Value), 1000);
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2302      	movs	r3, #2
 800064e:	4a5f      	ldr	r2, [pc, #380]	; (80007cc <HTS221_get_cal_data+0x224>)
 8000650:	21bf      	movs	r1, #191	; 0xbf
 8000652:	485b      	ldr	r0, [pc, #364]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000654:	f002 fa6e 	bl	8002b34 <HAL_I2C_Master_Receive>

	// Register H1_T0_OUT, addresses 0x3A and 0x3B
	uint8_t H1_T0_OUT_Address = 0x3A | 0x80;
 8000658:	23ba      	movs	r3, #186	; 0xba
 800065a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_T0_OUT_Address, sizeof(H1_T0_OUT_Address), 1000);
 800065c:	f107 020c 	add.w	r2, r7, #12
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21be      	movs	r1, #190	; 0xbe
 800066a:	4855      	ldr	r0, [pc, #340]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800066c:	f002 f96e 	bl	800294c <HAL_I2C_Master_Transmit>
	H1_T0_OUT_Value = 0xffff; // Junk default value
 8000670:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <HTS221_get_cal_data+0x228>)
 8000672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000676:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_T0_OUT_Value, sizeof(H1_T0_OUT_Value), 1000);
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2302      	movs	r3, #2
 8000680:	4a53      	ldr	r2, [pc, #332]	; (80007d0 <HTS221_get_cal_data+0x228>)
 8000682:	21bf      	movs	r1, #191	; 0xbf
 8000684:	484e      	ldr	r0, [pc, #312]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000686:	f002 fa55 	bl	8002b34 <HAL_I2C_Master_Receive>

    /*****************************************************************************************************************/
    // Temperature calibration values

    // Register T0_degC_x8, address 0x32. Divide register value by 8 for calibration value
    uint8_t T0_degC_Address = 0x32;
 800068a:	2332      	movs	r3, #50	; 0x32
 800068c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_degC_Address, sizeof(T0_degC_Address), 1000);
 800068e:	f107 020b 	add.w	r2, r7, #11
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	21be      	movs	r1, #190	; 0xbe
 800069c:	4848      	ldr	r0, [pc, #288]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800069e:	f002 f955 	bl	800294c <HAL_I2C_Master_Transmit>
	T0_degC_Value = 0xff; // Junk default value
 80006a2:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_degC_Value, sizeof(T0_degC_Value), 1000);
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4a48      	ldr	r2, [pc, #288]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006b2:	21bf      	movs	r1, #191	; 0xbf
 80006b4:	4842      	ldr	r0, [pc, #264]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80006b6:	f002 fa3d 	bl	8002b34 <HAL_I2C_Master_Receive>
	T0_degC_Value = T0_degC_Value / 8;
 80006ba:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	08db      	lsrs	r3, r3, #3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b44      	ldr	r3, [pc, #272]	; (80007d4 <HTS221_get_cal_data+0x22c>)
 80006c4:	701a      	strb	r2, [r3, #0]

    // Register T1_degC_x8, address 0x33. Divide register value by 8 for calibration value
    uint8_t T1_degC_Address = 0x33;
 80006c6:	2333      	movs	r3, #51	; 0x33
 80006c8:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_degC_Address, sizeof(T1_degC_Address), 1000);
 80006ca:	f107 020a 	add.w	r2, r7, #10
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2301      	movs	r3, #1
 80006d6:	21be      	movs	r1, #190	; 0xbe
 80006d8:	4839      	ldr	r0, [pc, #228]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80006da:	f002 f937 	bl	800294c <HAL_I2C_Master_Transmit>
	T1_degC_Value = 0xff; // Junk default value
 80006de:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <HTS221_get_cal_data+0x230>)
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_degC_Value, sizeof(T1_degC_Value), 1000);
 80006e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <HTS221_get_cal_data+0x230>)
 80006ee:	21bf      	movs	r1, #191	; 0xbf
 80006f0:	4833      	ldr	r0, [pc, #204]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80006f2:	f002 fa1f 	bl	8002b34 <HAL_I2C_Master_Receive>
	T1_degC_Value = T1_degC_Value / 8;
 80006f6:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <HTS221_get_cal_data+0x230>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <HTS221_get_cal_data+0x230>)
 8000700:	701a      	strb	r2, [r3, #0]

    // Register T1/T0 msb, address 0x35. Mask bits (0 & 1), (2 & 3) to get values of T0_degC & T1_degC
    uint8_t T1_T0_msb_Address = 0x35;
 8000702:	2335      	movs	r3, #53	; 0x35
 8000704:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_T0_msb_Address, sizeof(T1_T0_msb_Address), 1000);
 8000706:	f107 0209 	add.w	r2, r7, #9
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	21be      	movs	r1, #190	; 0xbe
 8000714:	482a      	ldr	r0, [pc, #168]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000716:	f002 f919 	bl	800294c <HAL_I2C_Master_Transmit>
	uint8_t T1_T0_msb_Value = 0xff; // Junk default value
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_T0_msb_Value, sizeof(T1_T0_msb_Value), 1000);
 800071e:	f107 0208 	add.w	r2, r7, #8
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2301      	movs	r3, #1
 800072a:	21bf      	movs	r1, #191	; 0xbf
 800072c:	4824      	ldr	r0, [pc, #144]	; (80007c0 <HTS221_get_cal_data+0x218>)
 800072e:	f002 fa01 	bl	8002b34 <HAL_I2C_Master_Receive>
	T0_degC = (T1_T0_msb_Value && (0b0011));
 8000732:	7a3b      	ldrb	r3, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <HTS221_get_cal_data+0x234>)
 8000742:	701a      	strb	r2, [r3, #0]
    T1_degC = (T1_T0_msb_Value && (0b1100));
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HTS221_get_cal_data+0x238>)
 8000754:	701a      	strb	r2, [r3, #0]

    // Register T0_OUT, addresses 0x3C and 0x3D
	uint8_t T0_OUT_Address = 0x3C | 0x80;
 8000756:	23bc      	movs	r3, #188	; 0xbc
 8000758:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_OUT_Address, sizeof(T0_OUT_Address), 1000);
 800075a:	1dfa      	adds	r2, r7, #7
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	21be      	movs	r1, #190	; 0xbe
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000768:	f002 f8f0 	bl	800294c <HAL_I2C_Master_Transmit>
	T0_OUT_Value = 0xffff; // Junk default value
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <HTS221_get_cal_data+0x23c>)
 800076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000772:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_OUT_Value, sizeof(T0_OUT_Value), 1000);
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2302      	movs	r3, #2
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HTS221_get_cal_data+0x23c>)
 800077e:	21bf      	movs	r1, #191	; 0xbf
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000782:	f002 f9d7 	bl	8002b34 <HAL_I2C_Master_Receive>

    // Register T1_OUT, addresses 0x3C and 0x3D
	uint8_t T1_OUT_Address = 0x3C | 0x80;
 8000786:	23bc      	movs	r3, #188	; 0xbc
 8000788:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_OUT_Address, sizeof(T1_OUT_Address), 1000);
 800078a:	1dba      	adds	r2, r7, #6
 800078c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	21be      	movs	r1, #190	; 0xbe
 8000796:	480a      	ldr	r0, [pc, #40]	; (80007c0 <HTS221_get_cal_data+0x218>)
 8000798:	f002 f8d8 	bl	800294c <HAL_I2C_Master_Transmit>
	T1_OUT_Value = 0xffff; // Junk default value
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HTS221_get_cal_data+0x240>)
 800079e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a2:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_OUT_Value, sizeof(T1_OUT_Value), 1000);
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2302      	movs	r3, #2
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HTS221_get_cal_data+0x240>)
 80007ae:	21bf      	movs	r1, #191	; 0xbf
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <HTS221_get_cal_data+0x218>)
 80007b2:	f002 f9bf 	bl	8002b34 <HAL_I2C_Master_Receive>

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000588 	.word	0x20000588
 80007c4:	20000758 	.word	0x20000758
 80007c8:	2000075c 	.word	0x2000075c
 80007cc:	200005d4 	.word	0x200005d4
 80007d0:	20000684 	.word	0x20000684
 80007d4:	200000f8 	.word	0x200000f8
 80007d8:	2000075d 	.word	0x2000075d
 80007dc:	200005d6 	.word	0x200005d6
 80007e0:	20000754 	.word	0x20000754
 80007e4:	2000075a 	.word	0x2000075a
 80007e8:	20000756 	.word	0x20000756

080007ec <HTS221_get_sensor_data>:

static void HTS221_get_sensor_data(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a2      	sub	sp, #136	; 0x88
 80007f0:	af02      	add	r7, sp, #8
    // Large char buffer for strings sent over the console
    char buffer[100] = {0};
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	; 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fb3a 	bl	8005e78 <memset>

	// Configure control register 2 (CTRL_REG2, 0x21) bit 0 to enable one-shot
    uint8_t CTRL_REG2_Address = 0x21;
 8000804:	2321      	movs	r3, #33	; 0x21
 8000806:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint8_t CTRL_REG2_Value[] = {CTRL_REG2_Address, (1 << 0)};
 800080a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800080e:	743b      	strb	r3, [r7, #16]
 8000810:	2301      	movs	r3, #1
 8000812:	747b      	strb	r3, [r7, #17]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, CTRL_REG2_Value, sizeof(CTRL_REG2_Value), 1000);
 8000814:	f107 0210 	add.w	r2, r7, #16
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2302      	movs	r3, #2
 8000820:	21be      	movs	r1, #190	; 0xbe
 8000822:	487f      	ldr	r0, [pc, #508]	; (8000a20 <HTS221_get_sensor_data+0x234>)
 8000824:	f002 f892 	bl	800294c <HAL_I2C_Master_Transmit>

    // Define status register (STATUS_REG2, 0x27) bit 0 to monitor for new sample available
    uint8_t STATUS_Address = 0x27;
 8000828:	2327      	movs	r3, #39	; 0x27
 800082a:	73fb      	strb	r3, [r7, #15]
    uint8_t STATUS_Value = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73bb      	strb	r3, [r7, #14]

    // Print status message to console
	snprintf(buffer, sizeof(buffer), "\tRequesting new sample...");
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4a7b      	ldr	r2, [pc, #492]	; (8000a24 <HTS221_get_sensor_data+0x238>)
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fb25 	bl	8005e88 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fcc4 	bl	80001d0 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f107 0114 	add.w	r1, r7, #20
 8000850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000854:	4874      	ldr	r0, [pc, #464]	; (8000a28 <HTS221_get_sensor_data+0x23c>)
 8000856:	f004 fb26 	bl	8004ea6 <HAL_UART_Transmit>

    // Loiter for a bit to allow time for conversion to complete and be made available
    uint8_t count = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 8000860:	e035      	b.n	80008ce <HTS221_get_sensor_data+0xe2>
    {
        // Send the address of the status register
        HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &STATUS_Address, sizeof(STATUS_Address), 1000);
 8000862:	f107 020f 	add.w	r2, r7, #15
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2301      	movs	r3, #1
 800086e:	21be      	movs	r1, #190	; 0xbe
 8000870:	486b      	ldr	r0, [pc, #428]	; (8000a20 <HTS221_get_sensor_data+0x234>)
 8000872:	f002 f86b 	bl	800294c <HAL_I2C_Master_Transmit>

        // Read back the value of the status register
        HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&STATUS_Value, sizeof(STATUS_Value), 1000);
 8000876:	f107 020e 	add.w	r2, r7, #14
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	21bf      	movs	r1, #191	; 0xbf
 8000884:	4866      	ldr	r0, [pc, #408]	; (8000a20 <HTS221_get_sensor_data+0x234>)
 8000886:	f002 f955 	bl	8002b34 <HAL_I2C_Master_Receive>

        // If the new sample is ready, break out of while-loop...
        if (STATUS_Value & 0x01)
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	2b00      	cmp	r3, #0
 8000892:	d121      	bne.n	80008d8 <HTS221_get_sensor_data+0xec>
        {
            break;
        }

        // Update status message on console with '.' to indicate processing
		snprintf(buffer, sizeof(buffer), ".");
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4a64      	ldr	r2, [pc, #400]	; (8000a2c <HTS221_get_sensor_data+0x240>)
 800089a:	2164      	movs	r1, #100	; 0x64
 800089c:	4618      	mov	r0, r3
 800089e:	f005 faf3 	bl	8005e88 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fc92 	bl	80001d0 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f107 0114 	add.w	r1, r7, #20
 80008b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b8:	485b      	ldr	r0, [pc, #364]	; (8000a28 <HTS221_get_sensor_data+0x23c>)
 80008ba:	f004 faf4 	bl	8004ea6 <HAL_UART_Transmit>

        // Else wait for a bit, increment the counter, and keep looping
        HAL_Delay(100);
 80008be:	2064      	movs	r0, #100	; 0x64
 80008c0:	f001 fa26 	bl	8001d10 <HAL_Delay>
        count++;
 80008c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008c8:	3301      	adds	r3, #1
 80008ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 80008ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008d2:	2b09      	cmp	r3, #9
 80008d4:	d9c5      	bls.n	8000862 <HTS221_get_sensor_data+0x76>
 80008d6:	e000      	b.n	80008da <HTS221_get_sensor_data+0xee>
            break;
 80008d8:	bf00      	nop
    }

    // Read the values of the humidity register H_OUT, address 0x28 and 0x29
	uint8_t H_OUT_Address = 0x28 | 0x80;
 80008da:	23a8      	movs	r3, #168	; 0xa8
 80008dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H_OUT_Address, sizeof(H_OUT_Address), 1000);
 80008de:	f107 020d 	add.w	r2, r7, #13
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2301      	movs	r3, #1
 80008ea:	21be      	movs	r1, #190	; 0xbe
 80008ec:	484c      	ldr	r0, [pc, #304]	; (8000a20 <HTS221_get_sensor_data+0x234>)
 80008ee:	f002 f82d 	bl	800294c <HAL_I2C_Master_Transmit>
	int16_t H_OUT_Value = 0xbeef; // Junk default value
 80008f2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80008f6:	817b      	strh	r3, [r7, #10]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H_OUT_Value, sizeof(H_OUT_Value), 1000);
 80008f8:	f107 020a 	add.w	r2, r7, #10
 80008fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2302      	movs	r3, #2
 8000904:	21bf      	movs	r1, #191	; 0xbf
 8000906:	4846      	ldr	r0, [pc, #280]	; (8000a20 <HTS221_get_sensor_data+0x234>)
 8000908:	f002 f914 	bl	8002b34 <HAL_I2C_Master_Receive>

	// Calculate and print value of humidity in %rH.
	int16_t humidityValue = (((H1_rH_Value - H0_rH_Value) * (H_OUT_Value - H0_T0_OUT_Value))/(H1_T0_OUT_Value - H0_T0_OUT_Value)) + (H0_rH_Value);
 800090c:	4b48      	ldr	r3, [pc, #288]	; (8000a30 <HTS221_get_sensor_data+0x244>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <HTS221_get_sensor_data+0x248>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800091c:	4611      	mov	r1, r2
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <HTS221_get_sensor_data+0x24c>)
 8000920:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000924:	1a8a      	subs	r2, r1, r2
 8000926:	fb02 f203 	mul.w	r2, r2, r3
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <HTS221_get_sensor_data+0x250>)
 800092c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000930:	4619      	mov	r1, r3
 8000932:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <HTS221_get_sensor_data+0x24c>)
 8000934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000938:	1acb      	subs	r3, r1, r3
 800093a:	fb92 f3f3 	sdiv	r3, r2, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <HTS221_get_sensor_data+0x248>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	b29b      	uxth	r3, r3
 800094a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	snprintf(buffer, sizeof(buffer), "\n\tHumidity: %d%%rH\n", humidityValue);
 800094e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000952:	f107 0014 	add.w	r0, r7, #20
 8000956:	4a3a      	ldr	r2, [pc, #232]	; (8000a40 <HTS221_get_sensor_data+0x254>)
 8000958:	2164      	movs	r1, #100	; 0x64
 800095a:	f005 fa95 	bl	8005e88 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fc34 	bl	80001d0 <strlen>
 8000968:	4603      	mov	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	f107 0114 	add.w	r1, r7, #20
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	482c      	ldr	r0, [pc, #176]	; (8000a28 <HTS221_get_sensor_data+0x23c>)
 8000976:	f004 fa96 	bl	8004ea6 <HAL_UART_Transmit>


	// Read the values of the temperature register T_OUT, address 0x2A and 0x2B
	uint8_t T_OUT_Address = 0x28 | 0x80;
 800097a:	23a8      	movs	r3, #168	; 0xa8
 800097c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T_OUT_Address, sizeof(T_OUT_Address), 1000);
 800097e:	f107 0209 	add.w	r2, r7, #9
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	21be      	movs	r1, #190	; 0xbe
 800098c:	4824      	ldr	r0, [pc, #144]	; (8000a20 <HTS221_get_sensor_data+0x234>)
 800098e:	f001 ffdd 	bl	800294c <HAL_I2C_Master_Transmit>
	int16_t T_OUT_Value = 0xbeef; // Junk default value
 8000992:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000996:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T_OUT_Value, sizeof(T_OUT_Value), 1000);
 8000998:	1dba      	adds	r2, r7, #6
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2302      	movs	r3, #2
 80009a2:	21bf      	movs	r1, #191	; 0xbf
 80009a4:	481e      	ldr	r0, [pc, #120]	; (8000a20 <HTS221_get_sensor_data+0x234>)
 80009a6:	f002 f8c5 	bl	8002b34 <HAL_I2C_Master_Receive>

    // Calculate and print value of temperature in degC.
	int16_t temperatureValue = (((T1_degC_Value - T0_degC_Value) * (T_OUT_Value - T0_OUT_Value))/(T1_OUT_Value - T0_OUT_Value)) + (T0_degC_Value);
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <HTS221_get_sensor_data+0x258>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <HTS221_get_sensor_data+0x25c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <HTS221_get_sensor_data+0x260>)
 80009be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009c2:	1a8a      	subs	r2, r1, r2
 80009c4:	fb02 f203 	mul.w	r2, r2, r3
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <HTS221_get_sensor_data+0x264>)
 80009ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ce:	4619      	mov	r1, r3
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HTS221_get_sensor_data+0x260>)
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	1acb      	subs	r3, r1, r3
 80009d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HTS221_get_sensor_data+0x25c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	snprintf(buffer, sizeof(buffer), "\tTemperature: %ddegC\n", temperatureValue);
 80009ec:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80009f0:	f107 0014 	add.w	r0, r7, #20
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HTS221_get_sensor_data+0x268>)
 80009f6:	2164      	movs	r1, #100	; 0x64
 80009f8:	f005 fa46 	bl	8005e88 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fbe5 	bl	80001d0 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f107 0114 	add.w	r1, r7, #20
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HTS221_get_sensor_data+0x23c>)
 8000a14:	f004 fa47 	bl	8004ea6 <HAL_UART_Transmit>

}
 8000a18:	bf00      	nop
 8000a1a:	3780      	adds	r7, #128	; 0x80
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000588 	.word	0x20000588
 8000a24:	08006724 	.word	0x08006724
 8000a28:	200006d0 	.word	0x200006d0
 8000a2c:	08006740 	.word	0x08006740
 8000a30:	2000075c 	.word	0x2000075c
 8000a34:	20000758 	.word	0x20000758
 8000a38:	200005d4 	.word	0x200005d4
 8000a3c:	20000684 	.word	0x20000684
 8000a40:	08006744 	.word	0x08006744
 8000a44:	2000075d 	.word	0x2000075d
 8000a48:	200000f8 	.word	0x200000f8
 8000a4c:	2000075a 	.word	0x2000075a
 8000a50:	20000756 	.word	0x20000756
 8000a54:	08006758 	.word	0x08006758

08000a58 <LPS22HB_get_sensor_data>:

static void LPS22HB_get_sensor_data(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0a2      	sub	sp, #136	; 0x88
 8000a5c:	af02      	add	r7, sp, #8
	//   read the pressure value in three byte-sized chunks, shifting them into a 32-bit word that is then converted
	//   to units of hPa, as described in the module datasheet, https://www.st.com/resource/en/datasheet/dm00140895.pdf
	/*****************************************************************************************************************/

	// Large char buffer for strings sent over the console
	char buffer[100] = {0};
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2260      	movs	r2, #96	; 0x60
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 fa04 	bl	8005e78 <memset>

	// Register CTRL_REG2, address 0x11. Configures sensor module for one-shot mode
	uint8_t CTRL_REG2_Address = 0x11;
 8000a70:	2311      	movs	r3, #17
 8000a72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t CTRL_REG2_Value[] = {CTRL_REG2_Address, (1 << 0)};
 8000a76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000a7a:	733b      	strb	r3, [r7, #12]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, CTRL_REG2_Value, sizeof(CTRL_REG2_Value), 1000);
 8000a80:	f107 020c 	add.w	r2, r7, #12
 8000a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	21ba      	movs	r1, #186	; 0xba
 8000a8e:	485e      	ldr	r0, [pc, #376]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000a90:	f001 ff5c 	bl	800294c <HAL_I2C_Master_Transmit>

	// Register STATUS, address 0x27. Bit 0 to monitor for new pressure sample available
	uint8_t STATUS_Address = 0x27;
 8000a94:	2327      	movs	r3, #39	; 0x27
 8000a96:	72fb      	strb	r3, [r7, #11]
	uint8_t STATUS_Value = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	72bb      	strb	r3, [r7, #10]

	// Print status message to console
	snprintf(buffer, sizeof(buffer), "\tRequesting new sample...");
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4a5a      	ldr	r2, [pc, #360]	; (8000c0c <LPS22HB_get_sensor_data+0x1b4>)
 8000aa2:	2164      	movs	r1, #100	; 0x64
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f005 f9ef 	bl	8005e88 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb8e 	bl	80001d0 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	f107 0110 	add.w	r1, r7, #16
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	4853      	ldr	r0, [pc, #332]	; (8000c10 <LPS22HB_get_sensor_data+0x1b8>)
 8000ac2:	f004 f9f0 	bl	8004ea6 <HAL_UART_Transmit>

	// Loiter for a bit to allow time for conversion to complete and be made available
	while (1)
	{
		// Send the address of the status register
		HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &STATUS_Address, sizeof(STATUS_Address), 1000);
 8000ac6:	f107 020b 	add.w	r2, r7, #11
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	21ba      	movs	r1, #186	; 0xba
 8000ad4:	484c      	ldr	r0, [pc, #304]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000ad6:	f001 ff39 	bl	800294c <HAL_I2C_Master_Transmit>

		// Read back the value of the status register
		HAL_I2C_Master_Receive(&hi2c2, LPS22HB_READ_ADDRESS, (uint8_t *)&STATUS_Value, sizeof(STATUS_Value), 1000);
 8000ada:	f107 020a 	add.w	r2, r7, #10
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	21bb      	movs	r1, #187	; 0xbb
 8000ae8:	4847      	ldr	r0, [pc, #284]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000aea:	f002 f823 	bl	8002b34 <HAL_I2C_Master_Receive>

		// If the new sample is ready, break out of while-loop...
		if (STATUS_Value & 0x01)
 8000aee:	7abb      	ldrb	r3, [r7, #10]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d118      	bne.n	8000b2a <LPS22HB_get_sensor_data+0xd2>
		{
			break;
		}

		// Update status message on console with '.' to indicate processing
		snprintf(buffer, sizeof(buffer), ".");
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <LPS22HB_get_sensor_data+0x1bc>)
 8000afe:	2164      	movs	r1, #100	; 0x64
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 f9c1 	bl	8005e88 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb60 	bl	80001d0 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	f107 0110 	add.w	r1, r7, #16
 8000b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1c:	483c      	ldr	r0, [pc, #240]	; (8000c10 <LPS22HB_get_sensor_data+0x1b8>)
 8000b1e:	f004 f9c2 	bl	8004ea6 <HAL_UART_Transmit>

		// Else wait for a bit, increment the counter, and keep looping
		HAL_Delay(100);
 8000b22:	2064      	movs	r0, #100	; 0x64
 8000b24:	f001 f8f4 	bl	8001d10 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &STATUS_Address, sizeof(STATUS_Address), 1000);
 8000b28:	e7cd      	b.n	8000ac6 <LPS22HB_get_sensor_data+0x6e>
			break;
 8000b2a:	bf00      	nop
	}

	// Register PRESS_OUT_XL, address 0x28. Pressure output value (LSB)
	uint8_t PRESS_OUT_XL_Address = 0x28;
 8000b2c:	2328      	movs	r3, #40	; 0x28
 8000b2e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &PRESS_OUT_XL_Address, sizeof(PRESS_OUT_XL_Address), 1000);
 8000b30:	f107 0209 	add.w	r2, r7, #9
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	21ba      	movs	r1, #186	; 0xba
 8000b3e:	4832      	ldr	r0, [pc, #200]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000b40:	f001 ff04 	bl	800294c <HAL_I2C_Master_Transmit>
	uint8_t PRESS_OUT_XL_Value = 0xff; // Junk default value
 8000b44:	23ff      	movs	r3, #255	; 0xff
 8000b46:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Receive(&hi2c2, LPS22HB_READ_ADDRESS, (uint8_t *)&PRESS_OUT_XL_Value, sizeof(PRESS_OUT_XL_Value), 1000);
 8000b48:	f107 0208 	add.w	r2, r7, #8
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	21bb      	movs	r1, #187	; 0xbb
 8000b56:	482c      	ldr	r0, [pc, #176]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000b58:	f001 ffec 	bl	8002b34 <HAL_I2C_Master_Receive>

	// Register PRESS_OUT_L, address 0x29. Pressure output value (mid part)
	uint8_t PRESS_OUT_L_Address = 0x29;
 8000b5c:	2329      	movs	r3, #41	; 0x29
 8000b5e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &PRESS_OUT_L_Address, sizeof(PRESS_OUT_L_Address), 1000);
 8000b60:	1dfa      	adds	r2, r7, #7
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	21ba      	movs	r1, #186	; 0xba
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000b6e:	f001 feed 	bl	800294c <HAL_I2C_Master_Transmit>
	uint8_t PRESS_OUT_L_Value = 0xff; // Junk default value
 8000b72:	23ff      	movs	r3, #255	; 0xff
 8000b74:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c2, LPS22HB_READ_ADDRESS, (uint8_t *)&PRESS_OUT_L_Value, sizeof(PRESS_OUT_L_Value), 1000);
 8000b76:	1dba      	adds	r2, r7, #6
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	21bb      	movs	r1, #187	; 0xbb
 8000b82:	4821      	ldr	r0, [pc, #132]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000b84:	f001 ffd6 	bl	8002b34 <HAL_I2C_Master_Receive>

	// Register PRESS_OUT_XL, address 0x2A. Pressure output value (MSB)
	uint8_t PRESS_OUT_H_Address = 0x2A;
 8000b88:	232a      	movs	r3, #42	; 0x2a
 8000b8a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c2, LPS22HB_WRITE_ADDRESS, &PRESS_OUT_H_Address, sizeof(PRESS_OUT_H_Address), 1000);
 8000b8c:	1d7a      	adds	r2, r7, #5
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	21ba      	movs	r1, #186	; 0xba
 8000b98:	481b      	ldr	r0, [pc, #108]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000b9a:	f001 fed7 	bl	800294c <HAL_I2C_Master_Transmit>
	uint8_t PRESS_OUT_H_Value = 0xff; // Junk default value
 8000b9e:	23ff      	movs	r3, #255	; 0xff
 8000ba0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c2, LPS22HB_READ_ADDRESS, (uint8_t *)&PRESS_OUT_H_Value, sizeof(PRESS_OUT_H_Value), 1000);
 8000ba2:	1d3a      	adds	r2, r7, #4
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2301      	movs	r3, #1
 8000bac:	21bb      	movs	r1, #187	; 0xbb
 8000bae:	4816      	ldr	r0, [pc, #88]	; (8000c08 <LPS22HB_get_sensor_data+0x1b0>)
 8000bb0:	f001 ffc0 	bl	8002b34 <HAL_I2C_Master_Receive>

	// Variable to hold raw pressure output from sensor. Shift each PRESS_OUT_x variable in as directed in datasheet
	uint32_t PRESS_OUT_Value = (PRESS_OUT_XL_Value << 0);
 8000bb4:	7a3b      	ldrb	r3, [r7, #8]
 8000bb6:	67bb      	str	r3, [r7, #120]	; 0x78
	PRESS_OUT_Value = PRESS_OUT_Value | (PRESS_OUT_L_Value << 8);
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	67bb      	str	r3, [r7, #120]	; 0x78
	PRESS_OUT_Value = PRESS_OUT_Value | (PRESS_OUT_H_Value << 16);
 8000bc4:	793b      	ldrb	r3, [r7, #4]
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	461a      	mov	r2, r3
 8000bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	67bb      	str	r3, [r7, #120]	; 0x78

	// Divide by 4096 as per datasheet to get units hPa and print results to console
	uint32_t pressureValue = PRESS_OUT_Value / 4096;
 8000bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bd2:	0b1b      	lsrs	r3, r3, #12
 8000bd4:	677b      	str	r3, [r7, #116]	; 0x74
	snprintf(buffer, sizeof(buffer), "\n\tPressure: %luhPa\n", pressureValue);
 8000bd6:	f107 0010 	add.w	r0, r7, #16
 8000bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LPS22HB_get_sensor_data+0x1c0>)
 8000bde:	2164      	movs	r1, #100	; 0x64
 8000be0:	f005 f952 	bl	8005e88 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff faf1 	bl	80001d0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f107 0110 	add.w	r1, r7, #16
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <LPS22HB_get_sensor_data+0x1b8>)
 8000bfc:	f004 f953 	bl	8004ea6 <HAL_UART_Transmit>

}
 8000c00:	bf00      	nop
 8000c02:	3780      	adds	r7, #128	; 0x80
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000588 	.word	0x20000588
 8000c0c:	08006724 	.word	0x08006724
 8000c10:	200006d0 	.word	0x200006d0
 8000c14:	08006740 	.word	0x08006740
 8000c18:	08006770 	.word	0x08006770

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f001 f800 	bl	8001c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f893 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 fac5 	bl	80011b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2e:	f000 fa9d 	bl	800116c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000c32:	f000 f931 	bl	8000e98 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000c36:	f000 f967 	bl	8000f08 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000c3a:	f000 f9a5 	bl	8000f88 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000c3e:	f000 f9c9 	bl	8000fd4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000c42:	f000 fa05 	bl	8001050 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c46:	f000 fa33 	bl	80010b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c4a:	f000 fa61 	bl	8001110 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Enable the HTS221 PD bit in CR1 to allow collection of samples
  HTS221_pwr_en();
 8000c4e:	f7ff fc93 	bl	8000578 <HTS221_pwr_en>

  // Get the calibration data stored in the HTS221 non-volatile memory
  HTS221_get_cal_data();
 8000c52:	f7ff fca9 	bl	80005a8 <HTS221_get_cal_data>

  // Header info for CLI
  char* cliHeader = "\nsimpleCLI Interface v0.4\n------------------------------\n";
 8000c56:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <main+0x118>)
 8000c58:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart1, (uint8_t*) cliHeader, strlen(cliHeader), 1000);
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fab8 	bl	80001d0 <strlen>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	68f9      	ldr	r1, [r7, #12]
 8000c6a:	4833      	ldr	r0, [pc, #204]	; (8000d38 <main+0x11c>)
 8000c6c:	f004 f91b 	bl	8004ea6 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Define strings to structure prompt around
	  char* cliPrompt = "Options:\n\t1: HTS221 read\n\t2: LPS22HB read\n\t3: RTC read (not implemented)\r\n$> ";
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <main+0x120>)
 8000c72:	60bb      	str	r3, [r7, #8]
	  char* cliResponse = "Invalid input!\r\n";
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <main+0x124>)
 8000c76:	607b      	str	r3, [r7, #4]

	  // Issue prompt
	  HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff faa9 	bl	80001d0 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	482b      	ldr	r0, [pc, #172]	; (8000d38 <main+0x11c>)
 8000c8a:	f004 f90c 	bl	8004ea6 <HAL_UART_Transmit>

	  // Get the user selection and echo it on the terminal
	  char cliInput;
	  HAL_UART_Receive(&huart1, (uint8_t*) &cliInput, 1, HAL_MAX_DELAY);
 8000c8e:	1cf9      	adds	r1, r7, #3
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	2201      	movs	r2, #1
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0x11c>)
 8000c98:	f004 f999 	bl	8004fce <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, (uint8_t*) &cliInput, 1, 1000);
 8000c9c:	1cf9      	adds	r1, r7, #3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4824      	ldr	r0, [pc, #144]	; (8000d38 <main+0x11c>)
 8000ca6:	f004 f8fe 	bl	8004ea6 <HAL_UART_Transmit>

	  // Evaluate input
	  switch (cliInput)
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2b33      	cmp	r3, #51	; 0x33
 8000cae:	d026      	beq.n	8000cfe <main+0xe2>
 8000cb0:	2b33      	cmp	r3, #51	; 0x33
 8000cb2:	dc32      	bgt.n	8000d1a <main+0xfe>
 8000cb4:	2b31      	cmp	r3, #49	; 0x31
 8000cb6:	d002      	beq.n	8000cbe <main+0xa2>
 8000cb8:	2b32      	cmp	r3, #50	; 0x32
 8000cba:	d010      	beq.n	8000cde <main+0xc2>
 8000cbc:	e02d      	b.n	8000d1a <main+0xfe>
	  {
		case '1':
			cliResponse = "\r\nHTS221 read request:\n";
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <main+0x128>)
 8000cc0:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fa84 	bl	80001d0 <strlen>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	4819      	ldr	r0, [pc, #100]	; (8000d38 <main+0x11c>)
 8000cd4:	f004 f8e7 	bl	8004ea6 <HAL_UART_Transmit>
			HTS221_get_sensor_data();
 8000cd8:	f7ff fd88 	bl	80007ec <HTS221_get_sensor_data>
			break;
 8000cdc:	e029      	b.n	8000d32 <main+0x116>

		case '2':
			cliResponse = "\r\nLPS22HB read request\n";
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <main+0x12c>)
 8000ce0:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fa74 	bl	80001d0 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <main+0x11c>)
 8000cf4:	f004 f8d7 	bl	8004ea6 <HAL_UART_Transmit>
			LPS22HB_get_sensor_data();
 8000cf8:	f7ff feae 	bl	8000a58 <LPS22HB_get_sensor_data>
			break;
 8000cfc:	e019      	b.n	8000d32 <main+0x116>

		case '3':
			cliResponse = "\r\nRTC read *not implemented*\n";
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <main+0x130>)
 8000d00:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fa64 	bl	80001d0 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <main+0x11c>)
 8000d14:	f004 f8c7 	bl	8004ea6 <HAL_UART_Transmit>
			// TBD()
			break;
 8000d18:	e00b      	b.n	8000d32 <main+0x116>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fa58 	bl	80001d0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	4803      	ldr	r0, [pc, #12]	; (8000d38 <main+0x11c>)
 8000d2c:	f004 f8bb 	bl	8004ea6 <HAL_UART_Transmit>
			break;
 8000d30:	bf00      	nop
  {
 8000d32:	e79d      	b.n	8000c70 <main+0x54>
 8000d34:	08006784 	.word	0x08006784
 8000d38:	200006d0 	.word	0x200006d0
 8000d3c:	080067c0 	.word	0x080067c0
 8000d40:	08006810 	.word	0x08006810
 8000d44:	08006824 	.word	0x08006824
 8000d48:	0800683c 	.word	0x0800683c
 8000d4c:	08006854 	.word	0x08006854

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0b8      	sub	sp, #224	; 0xe0
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d5a:	2244      	movs	r2, #68	; 0x44
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 f88a 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2288      	movs	r2, #136	; 0x88
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 f87c 	bl	8005e78 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d80:	f002 fba8 	bl	80034d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d84:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <SystemClock_Config+0x140>)
 8000d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d8a:	4a41      	ldr	r2, [pc, #260]	; (8000e90 <SystemClock_Config+0x140>)
 8000d8c:	f023 0318 	bic.w	r3, r3, #24
 8000d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d94:	2314      	movs	r3, #20
 8000d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dac:	2360      	movs	r3, #96	; 0x60
 8000dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000dc4:	2328      	movs	r3, #40	; 0x28
 8000dc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fcb7 	bl	8003754 <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000dec:	f000 fb94 	bl	8001518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2303      	movs	r3, #3
 8000df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e0e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e12:	2104      	movs	r1, #4
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 f883 	bl	8003f20 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e20:	f000 fb7a 	bl	8001518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <SystemClock_Config+0x144>)
 8000e26:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e40:	2301      	movs	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000e48:	2318      	movs	r3, #24
 8000e4a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000e58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e5c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fa63 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000e6c:	f000 fb54 	bl	8001518 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e74:	f002 fb4c 	bl	8003510 <HAL_PWREx_ControlVoltageScaling>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000e7e:	f000 fb4b 	bl	8001518 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e82:	f003 fd3d 	bl	8004900 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e86:	bf00      	nop
 8000e88:	37e0      	adds	r7, #224	; 0xe0
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	00012085 	.word	0x00012085

08000e98 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <MX_DFSDM1_Init+0x6c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_DFSDM1_Init+0x68>)
 8000eee:	f001 f845 	bl	8001f7c <HAL_DFSDM_ChannelInit>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000ef8:	f000 fb0e 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000c0 	.word	0x200000c0
 8000f04:	40016020 	.word	0x40016020

08000f08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <MX_I2C2_Init+0x78>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <MX_I2C2_Init+0x7c>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f44:	f001 fc73 	bl	800282e <HAL_I2C_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f000 fae3 	bl	8001518 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f56:	f002 f8dd 	bl	8003114 <HAL_I2CEx_ConfigAnalogFilter>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f60:	f000 fada 	bl	8001518 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_I2C2_Init+0x74>)
 8000f68:	f002 f91f 	bl	80031aa <HAL_I2CEx_ConfigDigitalFilter>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 fad1 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000588 	.word	0x20000588
 8000f80:	40005800 	.word	0x40005800
 8000f84:	10909cec 	.word	0x10909cec

08000f88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <MX_QUADSPI_Init+0x48>)
 8000f90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fa6:	2217      	movs	r2, #23
 8000fa8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_QUADSPI_Init+0x44>)
 8000fb8:	f002 fb10 	bl	80035dc <HAL_QSPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000fc2:	f000 faa9 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000760 	.word	0x20000760
 8000fd0:	a0001000 	.word	0xa0001000

08000fd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_SPI3_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ff2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_SPI3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_SPI3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_SPI3_Init+0x74>)
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_SPI3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_SPI3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_SPI3_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_SPI3_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_SPI3_Init+0x74>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_SPI3_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_SPI3_Init+0x74>)
 800102e:	2208      	movs	r2, #8
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_SPI3_Init+0x74>)
 8001034:	f003 fe46 	bl	8004cc4 <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 fa6b 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200005d8 	.word	0x200005d8
 800104c:	40003c00 	.word	0x40003c00

08001050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_USART1_UART_Init+0x5c>)
 8001058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART1_UART_Init+0x58>)
 8001094:	f003 feb9 	bl	8004e0a <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800109e:	f000 fa3b 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200006d0 	.word	0x200006d0
 80010ac:	40013800 	.word	0x40013800

080010b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <MX_USART3_UART_Init+0x5c>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART3_UART_Init+0x58>)
 80010f4:	f003 fe89 	bl	8004e0a <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010fe:	f000 fa0b 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000fc 	.word	0x200000fc
 800110c:	40004800 	.word	0x40004800

08001110 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800111a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2206      	movs	r2, #6
 8001120:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	2202      	movs	r2, #2
 8001126:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112a:	2202      	movs	r2, #2
 800112c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001154:	f002 f875 	bl	8003242 <HAL_PCD_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 f9db 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000180 	.word	0x20000180

0800116c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_DMA_Init+0x48>)
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <MX_DMA_Init+0x48>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6493      	str	r3, [r2, #72]	; 0x48
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_DMA_Init+0x48>)
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	200e      	movs	r0, #14
 8001190:	f000 febd 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001194:	200e      	movs	r0, #14
 8001196:	f000 fed6 	bl	8001f46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 feb5 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f000 fece 	bl	8001f46 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	4bba      	ldr	r3, [pc, #744]	; (80014b8 <MX_GPIO_Init+0x300>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4ab9      	ldr	r2, [pc, #740]	; (80014b8 <MX_GPIO_Init+0x300>)
 80011d4:	f043 0310 	orr.w	r3, r3, #16
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4bb7      	ldr	r3, [pc, #732]	; (80014b8 <MX_GPIO_Init+0x300>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4bb4      	ldr	r3, [pc, #720]	; (80014b8 <MX_GPIO_Init+0x300>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4ab3      	ldr	r2, [pc, #716]	; (80014b8 <MX_GPIO_Init+0x300>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4bb1      	ldr	r3, [pc, #708]	; (80014b8 <MX_GPIO_Init+0x300>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4bae      	ldr	r3, [pc, #696]	; (80014b8 <MX_GPIO_Init+0x300>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4aad      	ldr	r2, [pc, #692]	; (80014b8 <MX_GPIO_Init+0x300>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4bab      	ldr	r3, [pc, #684]	; (80014b8 <MX_GPIO_Init+0x300>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4ba8      	ldr	r3, [pc, #672]	; (80014b8 <MX_GPIO_Init+0x300>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4aa7      	ldr	r2, [pc, #668]	; (80014b8 <MX_GPIO_Init+0x300>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4ba5      	ldr	r3, [pc, #660]	; (80014b8 <MX_GPIO_Init+0x300>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4ba2      	ldr	r3, [pc, #648]	; (80014b8 <MX_GPIO_Init+0x300>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4aa1      	ldr	r2, [pc, #644]	; (80014b8 <MX_GPIO_Init+0x300>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b9f      	ldr	r3, [pc, #636]	; (80014b8 <MX_GPIO_Init+0x300>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 718a 	mov.w	r1, #276	; 0x114
 800124c:	489b      	ldr	r0, [pc, #620]	; (80014bc <MX_GPIO_Init+0x304>)
 800124e:	f001 fab3 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f248 1104 	movw	r1, #33028	; 0x8104
 8001258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125c:	f001 faac 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001260:	2200      	movs	r2, #0
 8001262:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001266:	4896      	ldr	r0, [pc, #600]	; (80014c0 <MX_GPIO_Init+0x308>)
 8001268:	f001 faa6 	bl	80027b8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001272:	4894      	ldr	r0, [pc, #592]	; (80014c4 <MX_GPIO_Init+0x30c>)
 8001274:	f001 faa0 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4891      	ldr	r0, [pc, #580]	; (80014c4 <MX_GPIO_Init+0x30c>)
 8001280:	f001 fa9a 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7110 	mov.w	r1, #576	; 0x240
 800128a:	488f      	ldr	r0, [pc, #572]	; (80014c8 <MX_GPIO_Init+0x310>)
 800128c:	f001 fa94 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2120      	movs	r1, #32
 8001294:	488a      	ldr	r0, [pc, #552]	; (80014c0 <MX_GPIO_Init+0x308>)
 8001296:	f001 fa8f 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2101      	movs	r1, #1
 800129e:	4887      	ldr	r0, [pc, #540]	; (80014bc <MX_GPIO_Init+0x304>)
 80012a0:	f001 fa8a 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80012a4:	f240 1315 	movw	r3, #277	; 0x115
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	487f      	ldr	r0, [pc, #508]	; (80014bc <MX_GPIO_Init+0x304>)
 80012be:	f001 f8d1 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80012c2:	236a      	movs	r3, #106	; 0x6a
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <MX_GPIO_Init+0x314>)
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4879      	ldr	r0, [pc, #484]	; (80014bc <MX_GPIO_Init+0x304>)
 80012d6:	f001 f8c5 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e0:	4b7b      	ldr	r3, [pc, #492]	; (80014d0 <MX_GPIO_Init+0x318>)
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4876      	ldr	r0, [pc, #472]	; (80014c8 <MX_GPIO_Init+0x310>)
 80012f0:	f001 f8b8 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80012f4:	233f      	movs	r3, #63	; 0x3f
 80012f6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012f8:	230b      	movs	r3, #11
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4870      	ldr	r0, [pc, #448]	; (80014c8 <MX_GPIO_Init+0x310>)
 8001308:	f001 f8ac 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800130c:	2303      	movs	r3, #3
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800131c:	2308      	movs	r3, #8
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f001 f89b 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800132e:	f248 1304 	movw	r3, #33028	; 0x8104
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f001 f88b 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800134e:	2308      	movs	r3, #8
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800135e:	2301      	movs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f001 f87a 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001370:	2310      	movs	r3, #16
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001374:	230b      	movs	r3, #11
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f001 f86d 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800138a:	23e0      	movs	r3, #224	; 0xe0
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139a:	2305      	movs	r3, #5
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a8:	f001 f85c 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <MX_GPIO_Init+0x314>)
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4840      	ldr	r0, [pc, #256]	; (80014c0 <MX_GPIO_Init+0x308>)
 80013c0:	f001 f850 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80013c4:	2302      	movs	r3, #2
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013c8:	230b      	movs	r3, #11
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	483a      	ldr	r0, [pc, #232]	; (80014c0 <MX_GPIO_Init+0x308>)
 80013d8:	f001 f844 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80013dc:	f24f 0334 	movw	r3, #61492	; 0xf034
 80013e0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4832      	ldr	r0, [pc, #200]	; (80014c0 <MX_GPIO_Init+0x308>)
 80013f6:	f001 f835 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80013fa:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80013fe:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <MX_GPIO_Init+0x314>)
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <MX_GPIO_Init+0x30c>)
 8001410:	f001 f828 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001414:	f243 0381 	movw	r3, #12417	; 0x3081
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4825      	ldr	r0, [pc, #148]	; (80014c4 <MX_GPIO_Init+0x30c>)
 800142e:	f001 f819 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001432:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	481f      	ldr	r0, [pc, #124]	; (80014c8 <MX_GPIO_Init+0x310>)
 800144c:	f001 f80a 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001450:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_GPIO_Init+0x314>)
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4818      	ldr	r0, [pc, #96]	; (80014c8 <MX_GPIO_Init+0x310>)
 8001466:	f000 fffd 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147a:	2305      	movs	r3, #5
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_GPIO_Init+0x30c>)
 8001486:	f000 ffed 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800148a:	2378      	movs	r3, #120	; 0x78
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149a:	2307      	movs	r3, #7
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_GPIO_Init+0x30c>)
 80014a6:	f000 ffdd 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b0:	2312      	movs	r3, #18
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e00d      	b.n	80014d4 <MX_GPIO_Init+0x31c>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48001000 	.word	0x48001000
 80014c0:	48000400 	.word	0x48000400
 80014c4:	48000c00 	.word	0x48000c00
 80014c8:	48000800 	.word	0x48000800
 80014cc:	10110000 	.word	0x10110000
 80014d0:	10210000 	.word	0x10210000
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014da:	2304      	movs	r3, #4
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <MX_GPIO_Init+0x35c>)
 80014e6:	f000 ffbd 	bl	8002464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2017      	movs	r0, #23
 80014f0:	f000 fd0d 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014f4:	2017      	movs	r0, #23
 80014f6:	f000 fd26 	bl	8001f46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f000 fd05 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f000 fd1e 	bl	8001f46 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	48000400 	.word	0x48000400

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x44>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x44>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6613      	str	r3, [r2, #96]	; 0x60
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x44>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x44>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x44>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6593      	str	r3, [r2, #88]	; 0x58
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x44>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d12d      	bne.n	80015e8 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001596:	6613      	str	r3, [r2, #96]	; 0x60
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x88>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x88>)
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x88>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80015bc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015ce:	2306      	movs	r3, #6
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80015da:	f000 ff43 	bl	8002464 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <HAL_DFSDM_ChannelMspInit+0x84>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a02      	ldr	r2, [pc, #8]	; (80015f0 <HAL_DFSDM_ChannelMspInit+0x84>)
 80015e6:	6013      	str	r3, [r2, #0]
  }

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000008c 	.word	0x2000008c
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48001000 	.word	0x48001000

080015fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a45      	ldr	r2, [pc, #276]	; (8001730 <HAL_I2C_MspInit+0x134>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 8083 	bne.w	8001726 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b44      	ldr	r3, [pc, #272]	; (8001734 <HAL_I2C_MspInit+0x138>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a43      	ldr	r2, [pc, #268]	; (8001734 <HAL_I2C_MspInit+0x138>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_I2C_MspInit+0x138>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001638:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163e:	2312      	movs	r3, #18
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800164a:	2304      	movs	r3, #4
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4838      	ldr	r0, [pc, #224]	; (8001738 <HAL_I2C_MspInit+0x13c>)
 8001656:	f000 ff05 	bl	8002464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_I2C_MspInit+0x138>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	4a35      	ldr	r2, [pc, #212]	; (8001734 <HAL_I2C_MspInit+0x138>)
 8001660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001664:	6593      	str	r3, [r2, #88]	; 0x58
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_I2C_MspInit+0x138>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_I2C_MspInit+0x140>)
 8001674:	4a32      	ldr	r2, [pc, #200]	; (8001740 <HAL_I2C_MspInit+0x144>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_I2C_MspInit+0x140>)
 800167a:	2203      	movs	r2, #3
 800167c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_I2C_MspInit+0x140>)
 8001680:	2210      	movs	r2, #16
 8001682:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_I2C_MspInit+0x140>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_I2C_MspInit+0x140>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_I2C_MspInit+0x140>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_I2C_MspInit+0x140>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_I2C_MspInit+0x140>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_I2C_MspInit+0x140>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80016a8:	4824      	ldr	r0, [pc, #144]	; (800173c <HAL_I2C_MspInit+0x140>)
 80016aa:	f000 fd73 	bl	8002194 <HAL_DMA_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80016b4:	f7ff ff30 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a20      	ldr	r2, [pc, #128]	; (800173c <HAL_I2C_MspInit+0x140>)
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_I2C_MspInit+0x140>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016c6:	4a20      	ldr	r2, [pc, #128]	; (8001748 <HAL_I2C_MspInit+0x14c>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016cc:	2203      	movs	r2, #3
 80016ce:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80016fa:	4812      	ldr	r0, [pc, #72]	; (8001744 <HAL_I2C_MspInit+0x148>)
 80016fc:	f000 fd4a 	bl	8002194 <HAL_DMA_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8001706:	f7ff ff07 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_I2C_MspInit+0x148>)
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_I2C_MspInit+0x148>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2021      	movs	r0, #33	; 0x21
 800171c:	f000 fbf7 	bl	8001f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001720:	2021      	movs	r0, #33	; 0x21
 8001722:	f000 fc10 	bl	8001f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40005800 	.word	0x40005800
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400
 800173c:	20000688 	.word	0x20000688
 8001740:	40020044 	.word	0x40020044
 8001744:	2000063c 	.word	0x2000063c
 8001748:	40020058 	.word	0x40020058

0800174c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_QSPI_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d128      	bne.n	80017c0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_QSPI_MspInit+0x80>)
 8001770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_QSPI_MspInit+0x80>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6513      	str	r3, [r2, #80]	; 0x50
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_QSPI_MspInit+0x80>)
 800177c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_QSPI_MspInit+0x80>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_QSPI_MspInit+0x80>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_QSPI_MspInit+0x80>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800179e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80017a2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017b0:	230a      	movs	r3, #10
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_QSPI_MspInit+0x84>)
 80017bc:	f000 fe52 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	a0001000 	.word	0xa0001000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48001000 	.word	0x48001000

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_SPI_MspInit+0x7c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d128      	bne.n	8001848 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_SPI_MspInit+0x80>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <HAL_SPI_MspInit+0x80>)
 80017fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_SPI_MspInit+0x80>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_SPI_MspInit+0x80>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_SPI_MspInit+0x80>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_SPI_MspInit+0x80>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001826:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001838:	2306      	movs	r3, #6
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_SPI_MspInit+0x84>)
 8001844:	f000 fe0e 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40003c00 	.word	0x40003c00
 8001854:	40021000 	.word	0x40021000
 8001858:	48000800 	.word	0x48000800

0800185c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <HAL_UART_MspInit+0xd8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d128      	bne.n	80018d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_UART_MspInit+0xdc>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_UART_MspInit+0xdc>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	6613      	str	r3, [r2, #96]	; 0x60
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_UART_MspInit+0xdc>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_UART_MspInit+0xdc>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_UART_MspInit+0xdc>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_UART_MspInit+0xdc>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018be:	2307      	movs	r3, #7
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	481c      	ldr	r0, [pc, #112]	; (800193c <HAL_UART_MspInit+0xe0>)
 80018ca:	f000 fdcb 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ce:	e02d      	b.n	800192c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <HAL_UART_MspInit+0xe4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d128      	bne.n	800192c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_UART_MspInit+0xdc>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <HAL_UART_MspInit+0xdc>)
 80018e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e4:	6593      	str	r3, [r2, #88]	; 0x58
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_UART_MspInit+0xdc>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_UART_MspInit+0xdc>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_UART_MspInit+0xdc>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_UART_MspInit+0xdc>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800190a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800191c:	2307      	movs	r3, #7
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <HAL_UART_MspInit+0xe8>)
 8001928:	f000 fd9c 	bl	8002464 <HAL_GPIO_Init>
}
 800192c:	bf00      	nop
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013800 	.word	0x40013800
 8001938:	40021000 	.word	0x40021000
 800193c:	48000400 	.word	0x48000400
 8001940:	40004800 	.word	0x40004800
 8001944:	48000c00 	.word	0x48000c00

08001948 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001968:	d154      	bne.n	8001a14 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f000 fd63 	bl	8002464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800199e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019b0:	230a      	movs	r3, #10
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019be:	f000 fd51 	bl	8002464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 80019c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d114      	bne.n	8001a10 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80019fe:	f001 fddd 	bl	80035bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <HAL_PCD_MspInit+0xd4>)
 8001a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a0e:	e001      	b.n	8001a14 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001a10:	f001 fdd4 	bl	80035bc <HAL_PWREx_EnableVddUSB>
}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f000 f930 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <DMA1_Channel4_IRQHandler+0x10>)
 8001a7a:	f000 fc43 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000688 	.word	0x20000688

08001a88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <DMA1_Channel5_IRQHandler+0x10>)
 8001a8e:	f000 fc39 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000063c 	.word	0x2000063c

08001a9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001aa0:	2020      	movs	r0, #32
 8001aa2:	f000 fea1 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001aa6:	2040      	movs	r0, #64	; 0x40
 8001aa8:	f000 fe9e 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001aac:	2080      	movs	r0, #128	; 0x80
 8001aae:	f000 fe9b 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ab2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ab6:	f000 fe97 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <I2C2_EV_IRQHandler+0x10>)
 8001ac6:	f001 f92b 	bl	8002d20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000588 	.word	0x20000588

08001ad4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ad8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001adc:	f000 fe84 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ae4:	f000 fe80 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ae8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aec:	f000 fe7c 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001af0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001af4:	f000 fe78 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001af8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001afc:	f000 fe74 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f004 f976 	bl	8005e24 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20018000 	.word	0x20018000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000090 	.word	0x20000090
 8001b6c:	200007b8 	.word	0x200007b8

08001b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <SystemInit+0x5c>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <SystemInit+0x5c>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <SystemInit+0x60>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <SystemInit+0x60>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <SystemInit+0x60>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <SystemInit+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <SystemInit+0x60>)
 8001b9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ba0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <SystemInit+0x60>)
 8001ba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <SystemInit+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <SystemInit+0x60>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SystemInit+0x60>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd8:	f7ff ffca 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bde:	e003      	b.n	8001be8 <LoopCopyDataInit>

08001be0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001be2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001be4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001be6:	3104      	adds	r1, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bf0:	d3f6      	bcc.n	8001be0 <CopyDataInit>
	ldr	r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bf4:	e002      	b.n	8001bfc <LoopFillZerobss>

08001bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bf8:	f842 3b04 	str.w	r3, [r2], #4

08001bfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <LoopForever+0x16>)
	cmp	r2, r3
 8001bfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c00:	d3f9      	bcc.n	8001bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f004 f915 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c06:	f7ff f809 	bl	8000c1c <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c0c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c10:	08006900 	.word	0x08006900
	ldr	r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c18:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001c1c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001c20:	200007b8 	.word	0x200007b8

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>

08001c26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 f961 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 f80e 	bl	8001c58 <HAL_InitTick>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	e001      	b.n	8001c4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c48:	f7ff fc6c 	bl	8001524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_InitTick+0x70>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f96d 	bl	8001f62 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10f      	bne.n	8001cae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d809      	bhi.n	8001ca8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f937 	bl	8001f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_InitTick+0x74>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e004      	b.n	8001cb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	e001      	b.n	8001cb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	200007a4 	.word	0x200007a4

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	200007a4 	.word	0x200007a4

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffde 	bl	8001cf8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	; (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	; (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff29 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff3e 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff31 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffa2 	bl	8001eb4 <SysTick_Config>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0ac      	b.n	80020e8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f8b2 	bl	80020fc <DFSDM_GetChannelFromInstance>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <HAL_DFSDM_ChannelInit+0x174>)
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e09f      	b.n	80020e8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fadf 	bl	800156c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	; (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d125      	bne.n	800200c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001fcc:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4948      	ldr	r1, [pc, #288]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a46      	ldr	r2, [pc, #280]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fe0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001fe4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001fee:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	493f      	ldr	r1, [pc, #252]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002000:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800200a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800201a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800202a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002030:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 020f 	bic.w	r2, r2, #15
 8002048:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002070:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f002 0207 	and.w	r2, r2, #7
 800209c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f810 	bl	80020fc <DFSDM_GetChannelFromInstance>
 80020dc:	4602      	mov	r2, r0
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_DFSDM_ChannelInit+0x174>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000098 	.word	0x20000098
 80020f4:	20000094 	.word	0x20000094
 80020f8:	40016000 	.word	0x40016000

080020fc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <DFSDM_GetChannelFromInstance+0x7c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d102      	bne.n	8002112 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e02b      	b.n	800216a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <DFSDM_GetChannelFromInstance+0x80>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d102      	bne.n	8002120 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e024      	b.n	800216a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a17      	ldr	r2, [pc, #92]	; (8002180 <DFSDM_GetChannelFromInstance+0x84>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d102      	bne.n	800212e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002128:	2302      	movs	r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e01d      	b.n	800216a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <DFSDM_GetChannelFromInstance+0x88>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d102      	bne.n	800213c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002136:	2304      	movs	r3, #4
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e016      	b.n	800216a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <DFSDM_GetChannelFromInstance+0x8c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d102      	bne.n	800214a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002144:	2305      	movs	r3, #5
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e00f      	b.n	800216a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a0f      	ldr	r2, [pc, #60]	; (800218c <DFSDM_GetChannelFromInstance+0x90>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d102      	bne.n	8002158 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002152:	2306      	movs	r3, #6
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e008      	b.n	800216a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <DFSDM_GetChannelFromInstance+0x94>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d102      	bne.n	8002166 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002160:	2307      	movs	r3, #7
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e001      	b.n	800216a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002166:	2303      	movs	r3, #3
 8002168:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40016000 	.word	0x40016000
 800217c:	40016020 	.word	0x40016020
 8002180:	40016040 	.word	0x40016040
 8002184:	40016080 	.word	0x40016080
 8002188:	400160a0 	.word	0x400160a0
 800218c:	400160c0 	.word	0x400160c0
 8002190:	400160e0 	.word	0x400160e0

08002194 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e098      	b.n	80022d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_DMA_Init+0x150>)
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d80f      	bhi.n	80021d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_DMA_Init+0x154>)
 80021ba:	4413      	add	r3, r2
 80021bc:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_DMA_Init+0x158>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <HAL_DMA_Init+0x15c>)
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
 80021d0:	e00e      	b.n	80021f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_DMA_Init+0x160>)
 80021da:	4413      	add	r3, r2
 80021dc:	4a43      	ldr	r2, [pc, #268]	; (80022ec <HAL_DMA_Init+0x158>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	009a      	lsls	r2, r3, #2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <HAL_DMA_Init+0x164>)
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800224a:	d039      	beq.n	80022c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_DMA_Init+0x15c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d11a      	bne.n	800228c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_DMA_Init+0x168>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f003 031c 	and.w	r3, r3, #28
 8002262:	210f      	movs	r1, #15
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4924      	ldr	r1, [pc, #144]	; (80022fc <HAL_DMA_Init+0x168>)
 800226c:	4013      	ands	r3, r2
 800226e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_DMA_Init+0x168>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	f003 031c 	and.w	r3, r3, #28
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	491d      	ldr	r1, [pc, #116]	; (80022fc <HAL_DMA_Init+0x168>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
 800228a:	e019      	b.n	80022c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_DMA_Init+0x16c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f003 031c 	and.w	r3, r3, #28
 8002298:	210f      	movs	r1, #15
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	4917      	ldr	r1, [pc, #92]	; (8002300 <HAL_DMA_Init+0x16c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_DMA_Init+0x16c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f003 031c 	and.w	r3, r3, #28
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	4911      	ldr	r1, [pc, #68]	; (8002300 <HAL_DMA_Init+0x16c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40020407 	.word	0x40020407
 80022e8:	bffdfff8 	.word	0xbffdfff8
 80022ec:	cccccccd 	.word	0xcccccccd
 80022f0:	40020000 	.word	0x40020000
 80022f4:	bffdfbf8 	.word	0xbffdfbf8
 80022f8:	40020400 	.word	0x40020400
 80022fc:	400200a8 	.word	0x400200a8
 8002300:	400204a8 	.word	0x400204a8

08002304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f003 031c 	and.w	r3, r3, #28
 8002324:	2204      	movs	r2, #4
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d026      	beq.n	800237e <HAL_DMA_IRQHandler+0x7a>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d021      	beq.n	800237e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0204 	bic.w	r2, r2, #4
 8002356:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f003 021c 	and.w	r2, r3, #28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	2104      	movs	r1, #4
 8002366:	fa01 f202 	lsl.w	r2, r1, r2
 800236a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	2b00      	cmp	r3, #0
 8002372:	d071      	beq.n	8002458 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800237c:	e06c      	b.n	8002458 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f003 031c 	and.w	r3, r3, #28
 8002386:	2202      	movs	r2, #2
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02e      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xec>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d029      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 020a 	bic.w	r2, r2, #10
 80023b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f003 021c 	and.w	r2, r3, #28
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2102      	movs	r1, #2
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d038      	beq.n	8002458 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023ee:	e033      	b.n	8002458 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f4:	f003 031c 	and.w	r3, r3, #28
 80023f8:	2208      	movs	r2, #8
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02a      	beq.n	800245a <HAL_DMA_IRQHandler+0x156>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d025      	beq.n	800245a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 020e 	bic.w	r2, r2, #14
 800241c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f003 021c 	and.w	r2, r3, #28
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002458:	bf00      	nop
 800245a:	bf00      	nop
}
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	e17f      	b.n	8002774 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8171 	beq.w	800276e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d00b      	beq.n	80024ac <HAL_GPIO_Init+0x48>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d007      	beq.n	80024ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a0:	2b11      	cmp	r3, #17
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b12      	cmp	r3, #18
 80024aa:	d130      	bne.n	800250e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e2:	2201      	movs	r2, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0201 	and.w	r2, r3, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b03      	cmp	r3, #3
 8002518:	d118      	bne.n	800254c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002520:	2201      	movs	r2, #1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	f003 0201 	and.w	r2, r3, #1
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x128>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b12      	cmp	r3, #18
 800258a:	d123      	bne.n	80025d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	6939      	ldr	r1, [r7, #16]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80ac 	beq.w	800276e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <HAL_GPIO_Init+0x330>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	4a5e      	ldr	r2, [pc, #376]	; (8002794 <HAL_GPIO_Init+0x330>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6613      	str	r3, [r2, #96]	; 0x60
 8002622:	4b5c      	ldr	r3, [pc, #368]	; (8002794 <HAL_GPIO_Init+0x330>)
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800262e:	4a5a      	ldr	r2, [pc, #360]	; (8002798 <HAL_GPIO_Init+0x334>)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002658:	d025      	beq.n	80026a6 <HAL_GPIO_Init+0x242>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x338>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <HAL_GPIO_Init+0x23e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4e      	ldr	r2, [pc, #312]	; (80027a0 <HAL_GPIO_Init+0x33c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x23a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x340>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x236>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_GPIO_Init+0x344>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x232>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_GPIO_Init+0x348>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x22e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4a      	ldr	r2, [pc, #296]	; (80027b0 <HAL_GPIO_Init+0x34c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x22a>
 800268a:	2306      	movs	r3, #6
 800268c:	e00c      	b.n	80026a8 <HAL_GPIO_Init+0x244>
 800268e:	2307      	movs	r3, #7
 8002690:	e00a      	b.n	80026a8 <HAL_GPIO_Init+0x244>
 8002692:	2305      	movs	r3, #5
 8002694:	e008      	b.n	80026a8 <HAL_GPIO_Init+0x244>
 8002696:	2304      	movs	r3, #4
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x244>
 800269a:	2303      	movs	r3, #3
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x244>
 800269e:	2302      	movs	r3, #2
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x244>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x244>
 80026a6:	2300      	movs	r3, #0
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	f002 0203 	and.w	r2, r2, #3
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b8:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_GPIO_Init+0x350>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ea:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <HAL_GPIO_Init+0x350>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_GPIO_Init+0x350>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_GPIO_Init+0x350>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <HAL_GPIO_Init+0x350>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_GPIO_Init+0x350>)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_GPIO_Init+0x350>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_GPIO_Init+0x350>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	f47f ae78 	bne.w	8002474 <HAL_GPIO_Init+0x10>
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	48000400 	.word	0x48000400
 80027a0:	48000800 	.word	0x48000800
 80027a4:	48000c00 	.word	0x48000c00
 80027a8:	48001000 	.word	0x48001000
 80027ac:	48001400 	.word	0x48001400
 80027b0:	48001800 	.word	0x48001800
 80027b4:	40010400 	.word	0x40010400

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f806 	bl	8002818 <HAL_GPIO_EXTI_Callback>
  }
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e081      	b.n	8002944 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fe fed1 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2224      	movs	r2, #36	; 0x24
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	e006      	b.n	80028b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d104      	bne.n	80028c8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028da:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	ea42 0103 	orr.w	r1, r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69d9      	ldr	r1, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	461a      	mov	r2, r3
 8002958:	460b      	mov	r3, r1
 800295a:	817b      	strh	r3, [r7, #10]
 800295c:	4613      	mov	r3, r2
 800295e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	f040 80da 	bne.w	8002b22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_I2C_Master_Transmit+0x30>
 8002978:	2302      	movs	r3, #2
 800297a:	e0d3      	b.n	8002b24 <HAL_I2C_Master_Transmit+0x1d8>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002984:	f7ff f9b8 	bl	8001cf8 <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2319      	movs	r3, #25
 8002990:	2201      	movs	r2, #1
 8002992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa00 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0be      	b.n	8002b24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2221      	movs	r2, #33	; 0x21
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2210      	movs	r2, #16
 80029b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	893a      	ldrh	r2, [r7, #8]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2bff      	cmp	r3, #255	; 0xff
 80029d6:	d90e      	bls.n	80029f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	22ff      	movs	r2, #255	; 0xff
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_I2C_Master_Transmit+0x1e0>)
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fb62 	bl	80030b8 <I2C_TransferConfig>
 80029f4:	e06c      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <HAL_I2C_Master_Transmit+0x1e0>)
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fb51 	bl	80030b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a16:	e05b      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	6a39      	ldr	r1, [r7, #32]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f9fd 	bl	8002e1c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e07b      	b.n	8002b24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d034      	beq.n	8002ad0 <HAL_I2C_Master_Transmit+0x184>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d130      	bne.n	8002ad0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f98f 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e04d      	b.n	8002b24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2bff      	cmp	r3, #255	; 0xff
 8002a90:	d90e      	bls.n	8002ab0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fb05 	bl	80030b8 <I2C_TransferConfig>
 8002aae:	e00f      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 faf4 	bl	80030b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d19e      	bne.n	8002a18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f9dc 	bl	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e01a      	b.n	8002b24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2220      	movs	r2, #32
 8002af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b02:	400b      	ands	r3, r1
 8002b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
  }
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	80002000 	.word	0x80002000
 8002b30:	fe00e800 	.word	0xfe00e800

08002b34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	460b      	mov	r3, r1
 8002b42:	817b      	strh	r3, [r7, #10]
 8002b44:	4613      	mov	r3, r2
 8002b46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	f040 80db 	bne.w	8002d0c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2C_Master_Receive+0x30>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e0d4      	b.n	8002d0e <HAL_I2C_Master_Receive+0x1da>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b6c:	f7ff f8c4 	bl	8001cf8 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2319      	movs	r3, #25
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f90c 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0bf      	b.n	8002d0e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2222      	movs	r2, #34	; 0x22
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	893a      	ldrh	r2, [r7, #8]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2bff      	cmp	r3, #255	; 0xff
 8002bbe:	d90e      	bls.n	8002bde <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	22ff      	movs	r2, #255	; 0xff
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	4b52      	ldr	r3, [pc, #328]	; (8002d18 <HAL_I2C_Master_Receive+0x1e4>)
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fa6e 	bl	80030b8 <I2C_TransferConfig>
 8002bdc:	e06d      	b.n	8002cba <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_I2C_Master_Receive+0x1e4>)
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fa5d 	bl	80030b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002bfe:	e05c      	b.n	8002cba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	6a39      	ldr	r1, [r7, #32]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f985 	bl	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e07c      	b.n	8002d0e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d034      	beq.n	8002cba <HAL_I2C_Master_Receive+0x186>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d130      	bne.n	8002cba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f89a 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e04d      	b.n	8002d0e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2bff      	cmp	r3, #255	; 0xff
 8002c7a:	d90e      	bls.n	8002c9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	22ff      	movs	r2, #255	; 0xff
 8002c80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	8979      	ldrh	r1, [r7, #10]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fa10 	bl	80030b8 <I2C_TransferConfig>
 8002c98:	e00f      	b.n	8002cba <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	8979      	ldrh	r1, [r7, #10]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f9ff 	bl	80030b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d19d      	bne.n	8002c00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	6a39      	ldr	r1, [r7, #32]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f8e7 	bl	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e01a      	b.n	8002d0e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_I2C_Master_Receive+0x1e8>)
 8002cec:	400b      	ands	r3, r1
 8002cee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	80002400 	.word	0x80002400
 8002d1c:	fe00e800 	.word	0xfe00e800

08002d20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d103      	bne.n	8002d72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d007      	beq.n	8002d90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	619a      	str	r2, [r3, #24]
  }
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dac:	e022      	b.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d01e      	beq.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7fe ff9f 	bl	8001cf8 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d113      	bne.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e00f      	b.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d0cd      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e28:	e02c      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8dc 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e02a      	b.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d01e      	beq.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fe ff57 	bl	8001cf8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d113      	bne.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d1cb      	bne.n	8002e2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea8:	e028      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f89c 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e026      	b.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe ff1b 	bl	8001cf8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d113      	bne.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e007      	b.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d1cf      	bne.n	8002eaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f20:	e055      	b.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f860 	bl	8002fec <I2C_IsAcknowledgeFailed>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e053      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d129      	bne.n	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d105      	bne.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e03f      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002f72:	400b      	ands	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e022      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f98:	f7fe feae 	bl	8001cf8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e007      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d1a2      	bne.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	fe00e800 	.word	0xfe00e800

08002fec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b10      	cmp	r3, #16
 8003004:	d151      	bne.n	80030aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003006:	e022      	b.n	800304e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d01e      	beq.n	800304e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003010:	f7fe fe72 	bl	8001cf8 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <I2C_IsAcknowledgeFailed+0x3a>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e02e      	b.n	80030ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d1d5      	bne.n	8003008 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2220      	movs	r2, #32
 800306a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fe71 	bl	8002d54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800307e:	400b      	ands	r3, r1
 8003080:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f043 0204 	orr.w	r2, r3, #4
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	fe00e800 	.word	0xfe00e800

080030b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	4613      	mov	r3, r2
 80030c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	0d5b      	lsrs	r3, r3, #21
 80030d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <I2C_TransferConfig+0x58>)
 80030da:	430b      	orrs	r3, r1
 80030dc:	43db      	mvns	r3, r3
 80030de:	ea02 0103 	and.w	r1, r2, r3
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030e8:	7a7b      	ldrb	r3, [r7, #9]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	03ff63ff 	.word	0x03ff63ff

08003114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	d138      	bne.n	800319c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003134:	2302      	movs	r3, #2
 8003136:	e032      	b.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d139      	bne.n	8003234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e033      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2224      	movs	r2, #36	; 0x24
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003244:	b08f      	sub	sp, #60	; 0x3c
 8003246:	af0a      	add	r7, sp, #40	; 0x28
 8003248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e116      	b.n	8003482 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe fb6a 	bl	8001948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2203      	movs	r2, #3
 8003278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f002 fb89 	bl	80059aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	687e      	ldr	r6, [r7, #4]
 80032a0:	466d      	mov	r5, sp
 80032a2:	f106 0410 	add.w	r4, r6, #16
 80032a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80032b6:	1d33      	adds	r3, r6, #4
 80032b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ba:	6838      	ldr	r0, [r7, #0]
 80032bc:	f002 fb49 	bl	8005952 <USB_CoreInit>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0d7      	b.n	8003482 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 fb77 	bl	80059cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	e04a      	b.n	800337a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	333d      	adds	r3, #61	; 0x3d
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	333c      	adds	r3, #60	; 0x3c
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	b298      	uxth	r0, r3
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3342      	adds	r3, #66	; 0x42
 8003320:	4602      	mov	r2, r0
 8003322:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	333f      	adds	r3, #63	; 0x3f
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3344      	adds	r3, #68	; 0x44
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3348      	adds	r3, #72	; 0x48
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3350      	adds	r3, #80	; 0x50
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	3301      	adds	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d3af      	bcc.n	80032e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	e044      	b.n	8003414 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033f8:	7bfa      	ldrb	r2, [r7, #15]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	3301      	adds	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	429a      	cmp	r2, r3
 800341c:	d3b5      	bcc.n	800338a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	687e      	ldr	r6, [r7, #4]
 8003426:	466d      	mov	r5, sp
 8003428:	f106 0410 	add.w	r4, r6, #16
 800342c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003438:	e885 0003 	stmia.w	r5, {r0, r1}
 800343c:	1d33      	adds	r3, r6, #4
 800343e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	f002 faed 	bl	8005a20 <USB_DevInit>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e014      	b.n	8003482 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b01      	cmp	r3, #1
 800346e:	d102      	bne.n	8003476 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f80a 	bl	800348a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f002 fc7d 	bl	8005d7a <USB_DevDisconnect>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800348a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	f043 0303 	orr.w	r3, r3, #3
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40007000 	.word	0x40007000

080034f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <HAL_PWREx_GetVoltageRange+0x18>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40007000 	.word	0x40007000

08003510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351e:	d130      	bne.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352c:	d038      	beq.n	80035a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003536:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2232      	movs	r2, #50	; 0x32
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0c9b      	lsrs	r3, r3, #18
 8003550:	3301      	adds	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003554:	e002      	b.n	800355c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b01      	subs	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d102      	bne.n	8003570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f2      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357c:	d110      	bne.n	80035a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e00f      	b.n	80035a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d007      	beq.n	80035a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003598:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800359e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40007000 	.word	0x40007000
 80035b4:	20000000 	.word	0x20000000
 80035b8:	431bde83 	.word	0x431bde83

080035bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ca:	6053      	str	r3, [r2, #4]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40007000 	.word	0x40007000

080035dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80035e4:	f7fe fb88 	bl	8001cf8 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e063      	b.n	80036bc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fe f89f 	bl	800174c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800360e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f858 	bl	80036c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	3b01      	subs	r3, #1
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	2120      	movs	r1, #32
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f850 	bl	80036e4 <QSPI_WaitFlagStateUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003648:	7afb      	ldrb	r3, [r7, #11]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d131      	bne.n	80036b2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003658:	f023 0310 	bic.w	r3, r3, #16
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6852      	ldr	r2, [r2, #4]
 8003660:	0611      	lsls	r1, r2, #24
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_QSPI_Init+0xe8>)
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6912      	ldr	r2, [r2, #16]
 800367e:	0411      	lsls	r1, r2, #16
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6952      	ldr	r2, [r2, #20]
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6992      	ldr	r2, [r2, #24]
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	430b      	orrs	r3, r1
 8003692:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80036ba:	7afb      	ldrb	r3, [r7, #11]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	ffe0f8fe 	.word	0xffe0f8fe

080036c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036f4:	e01a      	b.n	800372c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d016      	beq.n	800372c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe fafb 	bl	8001cf8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2204      	movs	r2, #4
 8003718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e00e      	b.n	800374a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	429a      	cmp	r2, r3
 8003746:	d1d6      	bne.n	80036f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e3d4      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003766:	4ba1      	ldr	r3, [pc, #644]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003770:	4b9e      	ldr	r3, [pc, #632]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80e4 	beq.w	8003950 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_RCC_OscConfig+0x4a>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	f040 808b 	bne.w	80038ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 8087 	bne.w	80038ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800379e:	4b93      	ldr	r3, [pc, #588]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCC_OscConfig+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e3ac      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	4b8c      	ldr	r3, [pc, #560]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <HAL_RCC_OscConfig+0x7c>
 80037c6:	4b89      	ldr	r3, [pc, #548]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ce:	e005      	b.n	80037dc <HAL_RCC_OscConfig+0x88>
 80037d0:	4b86      	ldr	r3, [pc, #536]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80037d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037dc:	4293      	cmp	r3, r2
 80037de:	d223      	bcs.n	8003828 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd41 	bl	800426c <RCC_SetFlashLatencyFromMSIRange>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e38d      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f4:	4b7d      	ldr	r3, [pc, #500]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a7c      	ldr	r2, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80037fa:	f043 0308 	orr.w	r3, r3, #8
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4977      	ldr	r1, [pc, #476]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	4972      	ldr	r1, [pc, #456]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
 8003826:	e025      	b.n	8003874 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003828:	4b70      	ldr	r3, [pc, #448]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6f      	ldr	r2, [pc, #444]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 800382e:	f043 0308 	orr.w	r3, r3, #8
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b6d      	ldr	r3, [pc, #436]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	496a      	ldr	r1, [pc, #424]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003846:	4b69      	ldr	r3, [pc, #420]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	4965      	ldr	r1, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fd01 	bl	800426c <RCC_SetFlashLatencyFromMSIRange>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e34d      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003874:	f000 fc36 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	495a      	ldr	r1, [pc, #360]	; (80039f0 <HAL_RCC_OscConfig+0x29c>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x2a0>)
 8003892:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003894:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x2a4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe f9dd 	bl	8001c58 <HAL_InitTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d052      	beq.n	800394e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	e331      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d032      	beq.n	800391a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038b4:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4c      	ldr	r2, [pc, #304]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fa1a 	bl	8001cf8 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c8:	f7fe fa16 	bl	8001cf8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e31a      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038da:	4b44      	ldr	r3, [pc, #272]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a40      	ldr	r2, [pc, #256]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80038ec:	f043 0308 	orr.w	r3, r3, #8
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	493b      	ldr	r1, [pc, #236]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	4936      	ldr	r1, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
 8003918:	e01a      	b.n	8003950 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a33      	ldr	r2, [pc, #204]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003926:	f7fe f9e7 	bl	8001cf8 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800392e:	f7fe f9e3 	bl	8001cf8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e2e7      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003940:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x1da>
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800394e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d074      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b08      	cmp	r3, #8
 8003960:	d005      	beq.n	800396e <HAL_RCC_OscConfig+0x21a>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d10e      	bne.n	8003986 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d10b      	bne.n	8003986 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396e:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d064      	beq.n	8003a44 <HAL_RCC_OscConfig+0x2f0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d160      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e2c4      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x24a>
 8003990:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e01d      	b.n	80039da <HAL_RCC_OscConfig+0x286>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a6:	d10c      	bne.n	80039c2 <HAL_RCC_OscConfig+0x26e>
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e00b      	b.n	80039da <HAL_RCC_OscConfig+0x286>
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a06      	ldr	r2, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x298>)
 80039d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe f989 	bl	8001cf8 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e8:	e011      	b.n	8003a0e <HAL_RCC_OscConfig+0x2ba>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	08006874 	.word	0x08006874
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe f97c 	bl	8001cf8 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e280      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0e:	4baf      	ldr	r3, [pc, #700]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x2a8>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe f96c 	bl	8001cf8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe f968 	bl	8001cf8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e26c      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a36:	4ba5      	ldr	r3, [pc, #660]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x2d0>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d060      	beq.n	8003b14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_OscConfig+0x310>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d119      	bne.n	8003a92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d116      	bne.n	8003a92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a64:	4b99      	ldr	r3, [pc, #612]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_OscConfig+0x328>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e249      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b93      	ldr	r3, [pc, #588]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	4990      	ldr	r1, [pc, #576]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a90:	e040      	b.n	8003b14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d023      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9a:	4b8c      	ldr	r3, [pc, #560]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a8b      	ldr	r2, [pc, #556]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe f927 	bl	8001cf8 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aae:	f7fe f923 	bl	8001cf8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e227      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac0:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	497c      	ldr	r1, [pc, #496]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
 8003ae0:	e018      	b.n	8003b14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae2:	4b7a      	ldr	r3, [pc, #488]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a79      	ldr	r2, [pc, #484]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fe f903 	bl	8001cf8 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fe f8ff 	bl	8001cf8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e203      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b08:	4b70      	ldr	r3, [pc, #448]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f0      	bne.n	8003af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d03c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01c      	beq.n	8003b62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b28:	4b68      	ldr	r3, [pc, #416]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2e:	4a67      	ldr	r2, [pc, #412]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fe f8de 	bl	8001cf8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b40:	f7fe f8da 	bl	8001cf8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e1de      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b52:	4b5e      	ldr	r3, [pc, #376]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ef      	beq.n	8003b40 <HAL_RCC_OscConfig+0x3ec>
 8003b60:	e01b      	b.n	8003b9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b62:	4b5a      	ldr	r3, [pc, #360]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b68:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fe f8c1 	bl	8001cf8 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fe f8bd 	bl	8001cf8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e1c1      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ef      	bne.n	8003b7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a6 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bac:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b44      	ldr	r3, [pc, #272]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	4a43      	ldr	r2, [pc, #268]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc4:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd4:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_RCC_OscConfig+0x57c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d118      	bne.n	8003c12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCC_OscConfig+0x57c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3a      	ldr	r2, [pc, #232]	; (8003cd0 <HAL_RCC_OscConfig+0x57c>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bec:	f7fe f884 	bl	8001cf8 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fe f880 	bl	8001cf8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e184      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <HAL_RCC_OscConfig+0x57c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d108      	bne.n	8003c2c <HAL_RCC_OscConfig+0x4d8>
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2a:	e024      	b.n	8003c76 <HAL_RCC_OscConfig+0x522>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d110      	bne.n	8003c56 <HAL_RCC_OscConfig+0x502>
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c44:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c54:	e00f      	b.n	8003c76 <HAL_RCC_OscConfig+0x522>
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fe f83b 	bl	8001cf8 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe f837 	bl	8001cf8 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e139      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_OscConfig+0x578>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ed      	beq.n	8003c86 <HAL_RCC_OscConfig+0x532>
 8003caa:	e01a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe f824 	bl	8001cf8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb2:	e00f      	b.n	8003cd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f820 	bl	8001cf8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d906      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e122      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd4:	4b90      	ldr	r3, [pc, #576]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e8      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b8b      	ldr	r3, [pc, #556]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	4a8a      	ldr	r2, [pc, #552]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8108 	beq.w	8003f0e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	f040 80d0 	bne.w	8003ea8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d08:	4b83      	ldr	r3, [pc, #524]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d130      	bne.n	8003d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	3b01      	subs	r3, #1
 8003d28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d127      	bne.n	8003d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11f      	bne.n	8003d7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d48:	2a07      	cmp	r2, #7
 8003d4a:	bf14      	ite	ne
 8003d4c:	2201      	movne	r2, #1
 8003d4e:	2200      	moveq	r2, #0
 8003d50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d113      	bne.n	8003d7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	3b01      	subs	r3, #1
 8003d64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d06e      	beq.n	8003e5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d069      	beq.n	8003e58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d84:	4b64      	ldr	r3, [pc, #400]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d90:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0b7      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003da0:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5c      	ldr	r2, [pc, #368]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dac:	f7fd ffa4 	bl	8001cf8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd ffa0 	bl	8001cf8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0a4      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc6:	4b54      	ldr	r3, [pc, #336]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd2:	4b51      	ldr	r3, [pc, #324]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_RCC_OscConfig+0x7c8>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003de2:	3a01      	subs	r2, #1
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	4311      	orrs	r1, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dec:	0212      	lsls	r2, r2, #8
 8003dee:	4311      	orrs	r1, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003df4:	0852      	lsrs	r2, r2, #1
 8003df6:	3a01      	subs	r2, #1
 8003df8:	0552      	lsls	r2, r2, #21
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e00:	0852      	lsrs	r2, r2, #1
 8003e02:	3a01      	subs	r2, #1
 8003e04:	0652      	lsls	r2, r2, #25
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e0c:	0912      	lsrs	r2, r2, #4
 8003e0e:	0452      	lsls	r2, r2, #17
 8003e10:	430a      	orrs	r2, r1
 8003e12:	4941      	ldr	r1, [pc, #260]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e18:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a3e      	ldr	r2, [pc, #248]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e24:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a3b      	ldr	r2, [pc, #236]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e30:	f7fd ff62 	bl	8001cf8 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd ff5e 	bl	8001cf8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e062      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e56:	e05a      	b.n	8003f0e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e059      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d152      	bne.n	8003f0e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e74:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e80:	f7fd ff3a 	bl	8001cf8 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd ff36 	bl	8001cf8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e03a      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9a:	4b1f      	ldr	r3, [pc, #124]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x734>
 8003ea6:	e032      	b.n	8003f0e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d02d      	beq.n	8003f0a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003ecc:	f023 0303 	bic.w	r3, r3, #3
 8003ed0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003ed8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fd ff09 	bl	8001cf8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eea:	f7fd ff05 	bl	8001cf8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e009      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_OscConfig+0x7c4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f0      	bne.n	8003eea <HAL_RCC_OscConfig+0x796>
 8003f08:	e001      	b.n	8003f0e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	f99d808c 	.word	0xf99d808c

08003f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0c8      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f34:	4b66      	ldr	r3, [pc, #408]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d910      	bls.n	8003f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b63      	ldr	r3, [pc, #396]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 0207 	bic.w	r2, r3, #7
 8003f4a:	4961      	ldr	r1, [pc, #388]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0b0      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d04c      	beq.n	800400a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f78:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d121      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e09e      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f90:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d115      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e092      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa8:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e086      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb8:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e07e      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 0203 	bic.w	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	493f      	ldr	r1, [pc, #252]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fda:	f7fd fe8d 	bl	8001cf8 <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe2:	f7fd fe89 	bl	8001cf8 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e066      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 020c 	and.w	r2, r3, #12
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	429a      	cmp	r2, r3
 8004008:	d1eb      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	492c      	ldr	r1, [pc, #176]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d210      	bcs.n	8004058 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 0207 	bic.w	r2, r3, #7
 800403e:	4924      	ldr	r1, [pc, #144]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e036      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4918      	ldr	r1, [pc, #96]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4910      	ldr	r1, [pc, #64]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004096:	f000 f825 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 800409a:	4602      	mov	r2, r0
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_RCC_ClockConfig+0x1b4>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	490c      	ldr	r1, [pc, #48]	; (80040d8 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	5ccb      	ldrb	r3, [r1, r3]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd fdcc 	bl	8001c58 <HAL_InitTick>
 80040c0:	4603      	mov	r3, r0
 80040c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80040c4:	7afb      	ldrb	r3, [r7, #11]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40022000 	.word	0x40022000
 80040d4:	40021000 	.word	0x40021000
 80040d8:	08006874 	.word	0x08006874
 80040dc:	20000000 	.word	0x20000000
 80040e0:	20000004 	.word	0x20000004

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b089      	sub	sp, #36	; 0x24
 80040e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f2:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fc:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x34>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d121      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d11e      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004118:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004124:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	e005      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004134:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004140:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004154:	e00a      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d102      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e004      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d101      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800416a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d134      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0xa6>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d003      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0xac>
 8004188:	e005      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800418c:	617b      	str	r3, [r7, #20]
      break;
 800418e:	e005      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004192:	617b      	str	r3, [r7, #20]
      break;
 8004194:	e002      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	617b      	str	r3, [r7, #20]
      break;
 800419a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	3301      	adds	r3, #1
 80041a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	fb02 f203 	mul.w	r2, r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	0e5b      	lsrs	r3, r3, #25
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	3301      	adds	r3, #1
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041dc:	69bb      	ldr	r3, [r7, #24]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800688c 	.word	0x0800688c
 80041f4:	00f42400 	.word	0x00f42400
 80041f8:	007a1200 	.word	0x007a1200

080041fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <HAL_RCC_GetHCLKFreq+0x14>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000000 	.word	0x20000000

08004214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004218:	f7ff fff0 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4904      	ldr	r1, [pc, #16]	; (800423c <HAL_RCC_GetPCLK1Freq+0x28>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	08006884 	.word	0x08006884

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004244:	f7ff ffda 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0adb      	lsrs	r3, r3, #11
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4904      	ldr	r1, [pc, #16]	; (8004268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000
 8004268:	08006884 	.word	0x08006884

0800426c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004278:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004284:	f7ff f936 	bl	80034f4 <HAL_PWREx_GetVoltageRange>
 8004288:	6178      	str	r0, [r7, #20]
 800428a:	e014      	b.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	6593      	str	r3, [r2, #88]	; 0x58
 8004298:	4b22      	ldr	r3, [pc, #136]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042a4:	f7ff f926 	bl	80034f4 <HAL_PWREx_GetVoltageRange>
 80042a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d10b      	bne.n	80042d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d919      	bls.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2ba0      	cmp	r3, #160	; 0xa0
 80042c8:	d902      	bls.n	80042d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ca:	2302      	movs	r3, #2
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	e013      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d0:	2301      	movs	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e010      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d902      	bls.n	80042e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042dc:	2303      	movs	r3, #3
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e00a      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d102      	bne.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042e8:	2302      	movs	r3, #2
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e004      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b70      	cmp	r3, #112	; 0x70
 80042f2:	d101      	bne.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042f4:	2301      	movs	r3, #1
 80042f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 0207 	bic.w	r2, r3, #7
 8004300:	4909      	ldr	r1, [pc, #36]	; (8004328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	429a      	cmp	r2, r3
 8004314:	d001      	beq.n	800431a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	40022000 	.word	0x40022000

0800432c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004334:	2300      	movs	r3, #0
 8004336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004338:	2300      	movs	r3, #0
 800433a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004344:	2b00      	cmp	r3, #0
 8004346:	d041      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004350:	d02a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004352:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004356:	d824      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800435c:	d008      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800435e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004362:	d81e      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436c:	d010      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800436e:	e018      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004370:	4b86      	ldr	r3, [pc, #536]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a85      	ldr	r2, [pc, #532]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800437c:	e015      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f000 facb 	bl	8004920 <RCCEx_PLLSAI1_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800438e:	e00c      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3320      	adds	r3, #32
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fbb6 	bl	8004b08 <RCCEx_PLLSAI2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a0:	e003      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	74fb      	strb	r3, [r7, #19]
      break;
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b0:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043be:	4973      	ldr	r1, [pc, #460]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043c6:	e001      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d041      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043e0:	d02a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043e6:	d824      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ec:	d008      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f2:	d81e      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043fc:	d010      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043fe:	e018      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004400:	4b62      	ldr	r3, [pc, #392]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a61      	ldr	r2, [pc, #388]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440c:	e015      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fa83 	bl	8004920 <RCCEx_PLLSAI1_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800441e:	e00c      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3320      	adds	r3, #32
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fb6e 	bl	8004b08 <RCCEx_PLLSAI2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	74fb      	strb	r3, [r7, #19]
      break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004440:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444e:	494f      	ldr	r1, [pc, #316]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a0 	beq.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a40      	ldr	r2, [pc, #256]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ac:	f7fd fc24 	bl	8001cf8 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fd fc20 	bl	8001cf8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	74fb      	strb	r3, [r7, #19]
        break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c8:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d15c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d019      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a20      	ldr	r2, [pc, #128]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004514:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd fbdf 	bl	8001cf8 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453c:	e00b      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd fbdb 	bl	8001cf8 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d902      	bls.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	74fb      	strb	r3, [r7, #19]
            break;
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ec      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457a:	4904      	ldr	r1, [pc, #16]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004582:	e009      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004598:	7c7b      	ldrb	r3, [r7, #17]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b9e      	ldr	r3, [pc, #632]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	4a9d      	ldr	r2, [pc, #628]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b6:	4b98      	ldr	r3, [pc, #608]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f023 0203 	bic.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	4994      	ldr	r1, [pc, #592]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 020c 	bic.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	498c      	ldr	r1, [pc, #560]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045fa:	4b87      	ldr	r3, [pc, #540]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	4983      	ldr	r1, [pc, #524]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800461c:	4b7e      	ldr	r3, [pc, #504]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	497b      	ldr	r1, [pc, #492]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	4972      	ldr	r1, [pc, #456]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004660:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	496a      	ldr	r1, [pc, #424]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	4961      	ldr	r1, [pc, #388]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a4:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	4959      	ldr	r1, [pc, #356]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c6:	4b54      	ldr	r3, [pc, #336]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	4950      	ldr	r1, [pc, #320]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e8:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	4948      	ldr	r1, [pc, #288]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	493f      	ldr	r1, [pc, #252]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d028      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800472c:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473a:	4937      	ldr	r1, [pc, #220]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800474a:	d106      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a31      	ldr	r2, [pc, #196]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004756:	60d3      	str	r3, [r2, #12]
 8004758:	e011      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004762:	d10c      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f8d8 	bl	8004920 <RCCEx_PLLSAI1_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d028      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800478a:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	491f      	ldr	r1, [pc, #124]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a8:	d106      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b4:	60d3      	str	r3, [r2, #12]
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f8a9 	bl	8004920 <RCCEx_PLLSAI1_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d02b      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f6:	4908      	ldr	r1, [pc, #32]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004806:	d109      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a02      	ldr	r2, [pc, #8]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004812:	60d3      	str	r3, [r2, #12]
 8004814:	e014      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004824:	d10c      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2101      	movs	r1, #1
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f877 	bl	8004920 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02f      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485a:	4928      	ldr	r1, [pc, #160]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486a:	d10d      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f854 	bl	8004920 <RCCEx_PLLSAI1_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d014      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	74bb      	strb	r3, [r7, #18]
 8004886:	e011      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800488c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004890:	d10c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3320      	adds	r3, #32
 8004896:	2102      	movs	r1, #2
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f935 	bl	8004b08 <RCCEx_PLLSAI2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c6:	490d      	ldr	r1, [pc, #52]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ea:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000

08004900 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800490a:	f043 0304 	orr.w	r3, r3, #4
 800490e:	6013      	str	r3, [r2, #0]
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000

08004920 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492e:	4b75      	ldr	r3, [pc, #468]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d018      	beq.n	800496c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800493a:	4b72      	ldr	r3, [pc, #456]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0203 	and.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d10d      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
       ||
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004952:	4b6c      	ldr	r3, [pc, #432]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
       ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d047      	beq.n	80049f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e044      	b.n	80049f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d018      	beq.n	80049a6 <RCCEx_PLLSAI1_Config+0x86>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d825      	bhi.n	80049c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004978:	2b01      	cmp	r3, #1
 800497a:	d002      	beq.n	8004982 <RCCEx_PLLSAI1_Config+0x62>
 800497c:	2b02      	cmp	r3, #2
 800497e:	d009      	beq.n	8004994 <RCCEx_PLLSAI1_Config+0x74>
 8004980:	e020      	b.n	80049c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004982:	4b60      	ldr	r3, [pc, #384]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004992:	e01a      	b.n	80049ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004994:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d116      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a4:	e013      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a6:	4b57      	ldr	r3, [pc, #348]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049b2:	4b54      	ldr	r3, [pc, #336]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049c2:	e006      	b.n	80049d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e004      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ca:	bf00      	nop
 80049cc:	e002      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10d      	bne.n	80049f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	430b      	orrs	r3, r1
 80049f0:	4944      	ldr	r1, [pc, #272]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d17d      	bne.n	8004af8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049fc:	4b41      	ldr	r3, [pc, #260]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a40      	ldr	r2, [pc, #256]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fd f976 	bl	8001cf8 <HAL_GetTick>
 8004a0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a0e:	e009      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a10:	f7fd f972 	bl	8001cf8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d902      	bls.n	8004a24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	73fb      	strb	r3, [r7, #15]
        break;
 8004a22:	e005      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a24:	4b37      	ldr	r3, [pc, #220]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ef      	bne.n	8004a10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d160      	bne.n	8004af8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d111      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a3c:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	0211      	lsls	r1, r2, #8
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68d2      	ldr	r2, [r2, #12]
 8004a52:	0912      	lsrs	r2, r2, #4
 8004a54:	0452      	lsls	r2, r2, #17
 8004a56:	430a      	orrs	r2, r1
 8004a58:	492a      	ldr	r1, [pc, #168]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	610b      	str	r3, [r1, #16]
 8004a5e:	e027      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d112      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	0211      	lsls	r1, r2, #8
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6912      	ldr	r2, [r2, #16]
 8004a7c:	0852      	lsrs	r2, r2, #1
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	0552      	lsls	r2, r2, #21
 8004a82:	430a      	orrs	r2, r1
 8004a84:	491f      	ldr	r1, [pc, #124]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	610b      	str	r3, [r1, #16]
 8004a8a:	e011      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6892      	ldr	r2, [r2, #8]
 8004a9c:	0211      	lsls	r1, r2, #8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6952      	ldr	r2, [r2, #20]
 8004aa2:	0852      	lsrs	r2, r2, #1
 8004aa4:	3a01      	subs	r2, #1
 8004aa6:	0652      	lsls	r2, r2, #25
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	4916      	ldr	r1, [pc, #88]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fd f91c 	bl	8001cf8 <HAL_GetTick>
 8004ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac2:	e009      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ac4:	f7fd f918 	bl	8001cf8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d902      	bls.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ad6:	e005      	b.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ef      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	4904      	ldr	r1, [pc, #16]	; (8004b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000

08004b08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b16:	4b6a      	ldr	r3, [pc, #424]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d018      	beq.n	8004b54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b22:	4b67      	ldr	r3, [pc, #412]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d10d      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
       ||
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b3a:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
       ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d047      	beq.n	8004bde <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	e044      	b.n	8004bde <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d018      	beq.n	8004b8e <RCCEx_PLLSAI2_Config+0x86>
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d825      	bhi.n	8004bac <RCCEx_PLLSAI2_Config+0xa4>
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d002      	beq.n	8004b6a <RCCEx_PLLSAI2_Config+0x62>
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d009      	beq.n	8004b7c <RCCEx_PLLSAI2_Config+0x74>
 8004b68:	e020      	b.n	8004bac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b6a:	4b55      	ldr	r3, [pc, #340]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11d      	bne.n	8004bb2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7a:	e01a      	b.n	8004bb2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b7c:	4b50      	ldr	r3, [pc, #320]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8c:	e013      	b.n	8004bb6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b9a:	4b49      	ldr	r3, [pc, #292]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004baa:	e006      	b.n	8004bba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb0:	e004      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bc2:	4b3f      	ldr	r3, [pc, #252]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6819      	ldr	r1, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	4939      	ldr	r1, [pc, #228]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d167      	bne.n	8004cb4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004be4:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a35      	ldr	r2, [pc, #212]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf0:	f7fd f882 	bl	8001cf8 <HAL_GetTick>
 8004bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bf6:	e009      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf8:	f7fd f87e 	bl	8001cf8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	73fb      	strb	r3, [r7, #15]
        break;
 8004c0a:	e005      	b.n	8004c18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c0c:	4b2c      	ldr	r3, [pc, #176]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ef      	bne.n	8004bf8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d14a      	bne.n	8004cb4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d111      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6892      	ldr	r2, [r2, #8]
 8004c34:	0211      	lsls	r1, r2, #8
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68d2      	ldr	r2, [r2, #12]
 8004c3a:	0912      	lsrs	r2, r2, #4
 8004c3c:	0452      	lsls	r2, r2, #17
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	491f      	ldr	r1, [pc, #124]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	614b      	str	r3, [r1, #20]
 8004c46:	e011      	b.n	8004c6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c48:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6892      	ldr	r2, [r2, #8]
 8004c58:	0211      	lsls	r1, r2, #8
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6912      	ldr	r2, [r2, #16]
 8004c5e:	0852      	lsrs	r2, r2, #1
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0652      	lsls	r2, r2, #25
 8004c64:	430a      	orrs	r2, r1
 8004c66:	4916      	ldr	r1, [pc, #88]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fd f83e 	bl	8001cf8 <HAL_GetTick>
 8004c7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c7e:	e009      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c80:	f7fd f83a 	bl	8001cf8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d902      	bls.n	8004c94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	73fb      	strb	r3, [r7, #15]
          break;
 8004c92:	e005      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ef      	beq.n	8004c80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	4904      	ldr	r1, [pc, #16]	; (8004cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000

08004cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e095      	b.n	8004e02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce6:	d009      	beq.n	8004cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	61da      	str	r2, [r3, #28]
 8004cee:	e005      	b.n	8004cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc fd5c 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d3c:	d902      	bls.n	8004d44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e002      	b.n	8004d4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d52:	d007      	beq.n	8004d64 <HAL_SPI_Init+0xa0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	ea42 0103 	orr.w	r1, r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	f003 0204 	and.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004de0:	ea42 0103 	orr.w	r1, r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e040      	b.n	8004e9e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fc fd15 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2224      	movs	r2, #36	; 0x24
 8004e36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f991 	bl	8005170 <UART_SetConfig>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e022      	b.n	8004e9e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fc0f 	bl	8005684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fc96 	bl	80057c8 <UART_CheckIdleState>
 8004e9c:	4603      	mov	r3, r0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b08a      	sub	sp, #40	; 0x28
 8004eaa:	af02      	add	r7, sp, #8
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	f040 8082 	bne.w	8004fc4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_Transmit+0x26>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e07a      	b.n	8004fc6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Transmit+0x38>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e073      	b.n	8004fc6 <HAL_UART_Transmit+0x120>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2221      	movs	r2, #33	; 0x21
 8004ef2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ef4:	f7fc ff00 	bl	8001cf8 <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d108      	bne.n	8004f26 <HAL_UART_Transmit+0x80>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e003      	b.n	8004f2e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f36:	e02d      	b.n	8004f94 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fc89 	bl	800585a <UART_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e039      	b.n	8004fc6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	881a      	ldrh	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f64:	b292      	uxth	r2, r2
 8004f66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e008      	b.n	8004f82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	781a      	ldrb	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1cb      	bne.n	8004f38 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2140      	movs	r1, #64	; 0x40
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fc55 	bl	800585a <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e005      	b.n	8004fc6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
  }
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08a      	sub	sp, #40	; 0x28
 8004fd2:	af02      	add	r7, sp, #8
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	f040 80bf 	bne.w	8005166 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_UART_Receive+0x26>
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0b7      	b.n	8005168 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_UART_Receive+0x38>
 8005002:	2302      	movs	r3, #2
 8005004:	e0b0      	b.n	8005168 <HAL_UART_Receive+0x19a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2222      	movs	r2, #34	; 0x22
 800501a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005022:	f7fc fe69 	bl	8001cf8 <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005040:	d10e      	bne.n	8005060 <HAL_UART_Receive+0x92>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d105      	bne.n	8005056 <HAL_UART_Receive+0x88>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005054:	e02d      	b.n	80050b2 <HAL_UART_Receive+0xe4>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	22ff      	movs	r2, #255	; 0xff
 800505a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800505e:	e028      	b.n	80050b2 <HAL_UART_Receive+0xe4>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10d      	bne.n	8005084 <HAL_UART_Receive+0xb6>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <HAL_UART_Receive+0xac>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	22ff      	movs	r2, #255	; 0xff
 8005074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005078:	e01b      	b.n	80050b2 <HAL_UART_Receive+0xe4>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	227f      	movs	r2, #127	; 0x7f
 800507e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005082:	e016      	b.n	80050b2 <HAL_UART_Receive+0xe4>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800508c:	d10d      	bne.n	80050aa <HAL_UART_Receive+0xdc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <HAL_UART_Receive+0xd2>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	227f      	movs	r2, #127	; 0x7f
 800509a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800509e:	e008      	b.n	80050b2 <HAL_UART_Receive+0xe4>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	223f      	movs	r2, #63	; 0x3f
 80050a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050a8:	e003      	b.n	80050b2 <HAL_UART_Receive+0xe4>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c2:	d108      	bne.n	80050d6 <HAL_UART_Receive+0x108>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	e003      	b.n	80050de <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050e6:	e033      	b.n	8005150 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	2120      	movs	r1, #32
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fbb1 	bl	800585a <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e032      	b.n	8005168 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10c      	bne.n	8005122 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800510e:	b29a      	uxth	r2, r3
 8005110:	8a7b      	ldrh	r3, [r7, #18]
 8005112:	4013      	ands	r3, r2
 8005114:	b29a      	uxth	r2, r3
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3302      	adds	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e00d      	b.n	800513e <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005128:	b29b      	uxth	r3, r3
 800512a:	b2da      	uxtb	r2, r3
 800512c:	8a7b      	ldrh	r3, [r7, #18]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	4013      	ands	r3, r2
 8005132:	b2da      	uxtb	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1c5      	bne.n	80050e8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005166:	2302      	movs	r3, #2
  }
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	b5b0      	push	{r4, r5, r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4313      	orrs	r3, r2
 8005192:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4bad      	ldr	r3, [pc, #692]	; (8005450 <UART_SetConfig+0x2e0>)
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	69f9      	ldr	r1, [r7, #28]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4aa2      	ldr	r2, [pc, #648]	; (8005454 <UART_SetConfig+0x2e4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a99      	ldr	r2, [pc, #612]	; (8005458 <UART_SetConfig+0x2e8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d121      	bne.n	800523a <UART_SetConfig+0xca>
 80051f6:	4b99      	ldr	r3, [pc, #612]	; (800545c <UART_SetConfig+0x2ec>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b03      	cmp	r3, #3
 8005202:	d817      	bhi.n	8005234 <UART_SetConfig+0xc4>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x9c>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	0800521d 	.word	0x0800521d
 8005210:	08005229 	.word	0x08005229
 8005214:	08005223 	.word	0x08005223
 8005218:	0800522f 	.word	0x0800522f
 800521c:	2301      	movs	r3, #1
 800521e:	76fb      	strb	r3, [r7, #27]
 8005220:	e0e7      	b.n	80053f2 <UART_SetConfig+0x282>
 8005222:	2302      	movs	r3, #2
 8005224:	76fb      	strb	r3, [r7, #27]
 8005226:	e0e4      	b.n	80053f2 <UART_SetConfig+0x282>
 8005228:	2304      	movs	r3, #4
 800522a:	76fb      	strb	r3, [r7, #27]
 800522c:	e0e1      	b.n	80053f2 <UART_SetConfig+0x282>
 800522e:	2308      	movs	r3, #8
 8005230:	76fb      	strb	r3, [r7, #27]
 8005232:	e0de      	b.n	80053f2 <UART_SetConfig+0x282>
 8005234:	2310      	movs	r3, #16
 8005236:	76fb      	strb	r3, [r7, #27]
 8005238:	e0db      	b.n	80053f2 <UART_SetConfig+0x282>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a88      	ldr	r2, [pc, #544]	; (8005460 <UART_SetConfig+0x2f0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d132      	bne.n	80052aa <UART_SetConfig+0x13a>
 8005244:	4b85      	ldr	r3, [pc, #532]	; (800545c <UART_SetConfig+0x2ec>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d828      	bhi.n	80052a4 <UART_SetConfig+0x134>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0xe8>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800528d 	.word	0x0800528d
 800525c:	080052a5 	.word	0x080052a5
 8005260:	080052a5 	.word	0x080052a5
 8005264:	080052a5 	.word	0x080052a5
 8005268:	08005299 	.word	0x08005299
 800526c:	080052a5 	.word	0x080052a5
 8005270:	080052a5 	.word	0x080052a5
 8005274:	080052a5 	.word	0x080052a5
 8005278:	08005293 	.word	0x08005293
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052a5 	.word	0x080052a5
 8005288:	0800529f 	.word	0x0800529f
 800528c:	2300      	movs	r3, #0
 800528e:	76fb      	strb	r3, [r7, #27]
 8005290:	e0af      	b.n	80053f2 <UART_SetConfig+0x282>
 8005292:	2302      	movs	r3, #2
 8005294:	76fb      	strb	r3, [r7, #27]
 8005296:	e0ac      	b.n	80053f2 <UART_SetConfig+0x282>
 8005298:	2304      	movs	r3, #4
 800529a:	76fb      	strb	r3, [r7, #27]
 800529c:	e0a9      	b.n	80053f2 <UART_SetConfig+0x282>
 800529e:	2308      	movs	r3, #8
 80052a0:	76fb      	strb	r3, [r7, #27]
 80052a2:	e0a6      	b.n	80053f2 <UART_SetConfig+0x282>
 80052a4:	2310      	movs	r3, #16
 80052a6:	76fb      	strb	r3, [r7, #27]
 80052a8:	e0a3      	b.n	80053f2 <UART_SetConfig+0x282>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <UART_SetConfig+0x2f4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d120      	bne.n	80052f6 <UART_SetConfig+0x186>
 80052b4:	4b69      	ldr	r3, [pc, #420]	; (800545c <UART_SetConfig+0x2ec>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052be:	2b30      	cmp	r3, #48	; 0x30
 80052c0:	d013      	beq.n	80052ea <UART_SetConfig+0x17a>
 80052c2:	2b30      	cmp	r3, #48	; 0x30
 80052c4:	d814      	bhi.n	80052f0 <UART_SetConfig+0x180>
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d009      	beq.n	80052de <UART_SetConfig+0x16e>
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d810      	bhi.n	80052f0 <UART_SetConfig+0x180>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <UART_SetConfig+0x168>
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d006      	beq.n	80052e4 <UART_SetConfig+0x174>
 80052d6:	e00b      	b.n	80052f0 <UART_SetConfig+0x180>
 80052d8:	2300      	movs	r3, #0
 80052da:	76fb      	strb	r3, [r7, #27]
 80052dc:	e089      	b.n	80053f2 <UART_SetConfig+0x282>
 80052de:	2302      	movs	r3, #2
 80052e0:	76fb      	strb	r3, [r7, #27]
 80052e2:	e086      	b.n	80053f2 <UART_SetConfig+0x282>
 80052e4:	2304      	movs	r3, #4
 80052e6:	76fb      	strb	r3, [r7, #27]
 80052e8:	e083      	b.n	80053f2 <UART_SetConfig+0x282>
 80052ea:	2308      	movs	r3, #8
 80052ec:	76fb      	strb	r3, [r7, #27]
 80052ee:	e080      	b.n	80053f2 <UART_SetConfig+0x282>
 80052f0:	2310      	movs	r3, #16
 80052f2:	76fb      	strb	r3, [r7, #27]
 80052f4:	e07d      	b.n	80053f2 <UART_SetConfig+0x282>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a5b      	ldr	r2, [pc, #364]	; (8005468 <UART_SetConfig+0x2f8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d120      	bne.n	8005342 <UART_SetConfig+0x1d2>
 8005300:	4b56      	ldr	r3, [pc, #344]	; (800545c <UART_SetConfig+0x2ec>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800530a:	2bc0      	cmp	r3, #192	; 0xc0
 800530c:	d013      	beq.n	8005336 <UART_SetConfig+0x1c6>
 800530e:	2bc0      	cmp	r3, #192	; 0xc0
 8005310:	d814      	bhi.n	800533c <UART_SetConfig+0x1cc>
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d009      	beq.n	800532a <UART_SetConfig+0x1ba>
 8005316:	2b80      	cmp	r3, #128	; 0x80
 8005318:	d810      	bhi.n	800533c <UART_SetConfig+0x1cc>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <UART_SetConfig+0x1b4>
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d006      	beq.n	8005330 <UART_SetConfig+0x1c0>
 8005322:	e00b      	b.n	800533c <UART_SetConfig+0x1cc>
 8005324:	2300      	movs	r3, #0
 8005326:	76fb      	strb	r3, [r7, #27]
 8005328:	e063      	b.n	80053f2 <UART_SetConfig+0x282>
 800532a:	2302      	movs	r3, #2
 800532c:	76fb      	strb	r3, [r7, #27]
 800532e:	e060      	b.n	80053f2 <UART_SetConfig+0x282>
 8005330:	2304      	movs	r3, #4
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	e05d      	b.n	80053f2 <UART_SetConfig+0x282>
 8005336:	2308      	movs	r3, #8
 8005338:	76fb      	strb	r3, [r7, #27]
 800533a:	e05a      	b.n	80053f2 <UART_SetConfig+0x282>
 800533c:	2310      	movs	r3, #16
 800533e:	76fb      	strb	r3, [r7, #27]
 8005340:	e057      	b.n	80053f2 <UART_SetConfig+0x282>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a49      	ldr	r2, [pc, #292]	; (800546c <UART_SetConfig+0x2fc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d125      	bne.n	8005398 <UART_SetConfig+0x228>
 800534c:	4b43      	ldr	r3, [pc, #268]	; (800545c <UART_SetConfig+0x2ec>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535a:	d017      	beq.n	800538c <UART_SetConfig+0x21c>
 800535c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005360:	d817      	bhi.n	8005392 <UART_SetConfig+0x222>
 8005362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005366:	d00b      	beq.n	8005380 <UART_SetConfig+0x210>
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d811      	bhi.n	8005392 <UART_SetConfig+0x222>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <UART_SetConfig+0x20a>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	d006      	beq.n	8005386 <UART_SetConfig+0x216>
 8005378:	e00b      	b.n	8005392 <UART_SetConfig+0x222>
 800537a:	2300      	movs	r3, #0
 800537c:	76fb      	strb	r3, [r7, #27]
 800537e:	e038      	b.n	80053f2 <UART_SetConfig+0x282>
 8005380:	2302      	movs	r3, #2
 8005382:	76fb      	strb	r3, [r7, #27]
 8005384:	e035      	b.n	80053f2 <UART_SetConfig+0x282>
 8005386:	2304      	movs	r3, #4
 8005388:	76fb      	strb	r3, [r7, #27]
 800538a:	e032      	b.n	80053f2 <UART_SetConfig+0x282>
 800538c:	2308      	movs	r3, #8
 800538e:	76fb      	strb	r3, [r7, #27]
 8005390:	e02f      	b.n	80053f2 <UART_SetConfig+0x282>
 8005392:	2310      	movs	r3, #16
 8005394:	76fb      	strb	r3, [r7, #27]
 8005396:	e02c      	b.n	80053f2 <UART_SetConfig+0x282>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2d      	ldr	r2, [pc, #180]	; (8005454 <UART_SetConfig+0x2e4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d125      	bne.n	80053ee <UART_SetConfig+0x27e>
 80053a2:	4b2e      	ldr	r3, [pc, #184]	; (800545c <UART_SetConfig+0x2ec>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b0:	d017      	beq.n	80053e2 <UART_SetConfig+0x272>
 80053b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b6:	d817      	bhi.n	80053e8 <UART_SetConfig+0x278>
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	d00b      	beq.n	80053d6 <UART_SetConfig+0x266>
 80053be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c2:	d811      	bhi.n	80053e8 <UART_SetConfig+0x278>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <UART_SetConfig+0x260>
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053cc:	d006      	beq.n	80053dc <UART_SetConfig+0x26c>
 80053ce:	e00b      	b.n	80053e8 <UART_SetConfig+0x278>
 80053d0:	2300      	movs	r3, #0
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	e00d      	b.n	80053f2 <UART_SetConfig+0x282>
 80053d6:	2302      	movs	r3, #2
 80053d8:	76fb      	strb	r3, [r7, #27]
 80053da:	e00a      	b.n	80053f2 <UART_SetConfig+0x282>
 80053dc:	2304      	movs	r3, #4
 80053de:	76fb      	strb	r3, [r7, #27]
 80053e0:	e007      	b.n	80053f2 <UART_SetConfig+0x282>
 80053e2:	2308      	movs	r3, #8
 80053e4:	76fb      	strb	r3, [r7, #27]
 80053e6:	e004      	b.n	80053f2 <UART_SetConfig+0x282>
 80053e8:	2310      	movs	r3, #16
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	e001      	b.n	80053f2 <UART_SetConfig+0x282>
 80053ee:	2310      	movs	r3, #16
 80053f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a17      	ldr	r2, [pc, #92]	; (8005454 <UART_SetConfig+0x2e4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	f040 8087 	bne.w	800550c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053fe:	7efb      	ldrb	r3, [r7, #27]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d837      	bhi.n	8005474 <UART_SetConfig+0x304>
 8005404:	a201      	add	r2, pc, #4	; (adr r2, 800540c <UART_SetConfig+0x29c>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	08005431 	.word	0x08005431
 8005410:	08005475 	.word	0x08005475
 8005414:	08005439 	.word	0x08005439
 8005418:	08005475 	.word	0x08005475
 800541c:	0800543f 	.word	0x0800543f
 8005420:	08005475 	.word	0x08005475
 8005424:	08005475 	.word	0x08005475
 8005428:	08005475 	.word	0x08005475
 800542c:	08005447 	.word	0x08005447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005430:	f7fe fef0 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8005434:	6178      	str	r0, [r7, #20]
        break;
 8005436:	e022      	b.n	800547e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <UART_SetConfig+0x300>)
 800543a:	617b      	str	r3, [r7, #20]
        break;
 800543c:	e01f      	b.n	800547e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800543e:	f7fe fe51 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8005442:	6178      	str	r0, [r7, #20]
        break;
 8005444:	e01b      	b.n	800547e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800544a:	617b      	str	r3, [r7, #20]
        break;
 800544c:	e017      	b.n	800547e <UART_SetConfig+0x30e>
 800544e:	bf00      	nop
 8005450:	efff69f3 	.word	0xefff69f3
 8005454:	40008000 	.word	0x40008000
 8005458:	40013800 	.word	0x40013800
 800545c:	40021000 	.word	0x40021000
 8005460:	40004400 	.word	0x40004400
 8005464:	40004800 	.word	0x40004800
 8005468:	40004c00 	.word	0x40004c00
 800546c:	40005000 	.word	0x40005000
 8005470:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	76bb      	strb	r3, [r7, #26]
        break;
 800547c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80f1 	beq.w	8005668 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	429a      	cmp	r2, r3
 8005494:	d305      	bcc.n	80054a2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d902      	bls.n	80054a8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	76bb      	strb	r3, [r7, #26]
 80054a6:	e0df      	b.n	8005668 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	020b      	lsls	r3, r1, #8
 80054ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054be:	0202      	lsls	r2, r0, #8
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	6849      	ldr	r1, [r1, #4]
 80054c4:	0849      	lsrs	r1, r1, #1
 80054c6:	4608      	mov	r0, r1
 80054c8:	f04f 0100 	mov.w	r1, #0
 80054cc:	1814      	adds	r4, r2, r0
 80054ce:	eb43 0501 	adc.w	r5, r3, r1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	4620      	mov	r0, r4
 80054de:	4629      	mov	r1, r5
 80054e0:	f7fa fece 	bl	8000280 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f2:	d308      	bcc.n	8005506 <UART_SetConfig+0x396>
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fa:	d204      	bcs.n	8005506 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	60da      	str	r2, [r3, #12]
 8005504:	e0b0      	b.n	8005668 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	76bb      	strb	r3, [r7, #26]
 800550a:	e0ad      	b.n	8005668 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005514:	d15c      	bne.n	80055d0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005516:	7efb      	ldrb	r3, [r7, #27]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d828      	bhi.n	800556e <UART_SetConfig+0x3fe>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0x3b4>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	08005549 	.word	0x08005549
 8005528:	08005551 	.word	0x08005551
 800552c:	08005559 	.word	0x08005559
 8005530:	0800556f 	.word	0x0800556f
 8005534:	0800555f 	.word	0x0800555f
 8005538:	0800556f 	.word	0x0800556f
 800553c:	0800556f 	.word	0x0800556f
 8005540:	0800556f 	.word	0x0800556f
 8005544:	08005567 	.word	0x08005567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005548:	f7fe fe64 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 800554c:	6178      	str	r0, [r7, #20]
        break;
 800554e:	e013      	b.n	8005578 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005550:	f7fe fe76 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005554:	6178      	str	r0, [r7, #20]
        break;
 8005556:	e00f      	b.n	8005578 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005558:	4b49      	ldr	r3, [pc, #292]	; (8005680 <UART_SetConfig+0x510>)
 800555a:	617b      	str	r3, [r7, #20]
        break;
 800555c:	e00c      	b.n	8005578 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555e:	f7fe fdc1 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8005562:	6178      	str	r0, [r7, #20]
        break;
 8005564:	e008      	b.n	8005578 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556a:	617b      	str	r3, [r7, #20]
        break;
 800556c:	e004      	b.n	8005578 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	76bb      	strb	r3, [r7, #26]
        break;
 8005576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d074      	beq.n	8005668 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	005a      	lsls	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	b29b      	uxth	r3, r3
 8005594:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b0f      	cmp	r3, #15
 800559a:	d916      	bls.n	80055ca <UART_SetConfig+0x45a>
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a2:	d212      	bcs.n	80055ca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f023 030f 	bic.w	r3, r3, #15
 80055ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	89fb      	ldrh	r3, [r7, #14]
 80055bc:	4313      	orrs	r3, r2
 80055be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	89fa      	ldrh	r2, [r7, #14]
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	e04e      	b.n	8005668 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	76bb      	strb	r3, [r7, #26]
 80055ce:	e04b      	b.n	8005668 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055d0:	7efb      	ldrb	r3, [r7, #27]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d827      	bhi.n	8005626 <UART_SetConfig+0x4b6>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x46c>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005611 	.word	0x08005611
 80055e8:	08005627 	.word	0x08005627
 80055ec:	08005617 	.word	0x08005617
 80055f0:	08005627 	.word	0x08005627
 80055f4:	08005627 	.word	0x08005627
 80055f8:	08005627 	.word	0x08005627
 80055fc:	0800561f 	.word	0x0800561f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005600:	f7fe fe08 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8005604:	6178      	str	r0, [r7, #20]
        break;
 8005606:	e013      	b.n	8005630 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fe fe1a 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 800560c:	6178      	str	r0, [r7, #20]
        break;
 800560e:	e00f      	b.n	8005630 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <UART_SetConfig+0x510>)
 8005612:	617b      	str	r3, [r7, #20]
        break;
 8005614:	e00c      	b.n	8005630 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005616:	f7fe fd65 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 800561a:	6178      	str	r0, [r7, #20]
        break;
 800561c:	e008      	b.n	8005630 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005622:	617b      	str	r3, [r7, #20]
        break;
 8005624:	e004      	b.n	8005630 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	76bb      	strb	r3, [r7, #26]
        break;
 800562e:	bf00      	nop
    }

    if (pclk != 0U)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d018      	beq.n	8005668 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085a      	lsrs	r2, r3, #1
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	441a      	add	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	b29b      	uxth	r3, r3
 800564a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b0f      	cmp	r3, #15
 8005650:	d908      	bls.n	8005664 <UART_SetConfig+0x4f4>
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005658:	d204      	bcs.n	8005664 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	e001      	b.n	8005668 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005674:	7ebb      	ldrb	r3, [r7, #26]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bdb0      	pop	{r4, r5, r7, pc}
 800567e:	bf00      	nop
 8005680:	00f42400 	.word	0x00f42400

08005684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01a      	beq.n	800579a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005782:	d10a      	bne.n	800579a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	605a      	str	r2, [r3, #4]
  }
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057d8:	f7fc fa8e 	bl	8001cf8 <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d10e      	bne.n	800580a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f82d 	bl	800585a <UART_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e023      	b.n	8005852 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d10e      	bne.n	8005836 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f817 	bl	800585a <UART_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e00d      	b.n	8005852 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586a:	e05e      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d05a      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005874:	f7fc fa40 	bl	8001cf8 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <UART_WaitOnFlagUntilTimeout+0x30>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11b      	bne.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005898:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e043      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02c      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058de:	d124      	bne.n	800592a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058e8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e00f      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4013      	ands	r3, r2
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	429a      	cmp	r2, r3
 8005938:	bf0c      	ite	eq
 800593a:	2301      	moveq	r3, #1
 800593c:	2300      	movne	r3, #0
 800593e:	b2db      	uxtb	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	429a      	cmp	r2, r3
 8005946:	d091      	beq.n	800586c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005952:	b084      	sub	sp, #16
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	f107 001c 	add.w	r0, r7, #28
 8005960:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa23 	bl	8005dbc <USB_CoreReset>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800597a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
 800598c:	e005      	b.n	800599a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059a6:	b004      	add	sp, #16
 80059a8:	4770      	bx	lr

080059aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d106      	bne.n	80059f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	e00b      	b.n	8005a10 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	e001      	b.n	8005a10 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e003      	b.n	8005a18 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005a10:	2032      	movs	r0, #50	; 0x32
 8005a12:	f7fc f97d 	bl	8001d10 <HAL_Delay>

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a20:	b084      	sub	sp, #16
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e009      	b.n	8005a54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3340      	adds	r3, #64	; 0x40
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b0e      	cmp	r3, #14
 8005a58:	d9f2      	bls.n	8005a40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11c      	bne.n	8005a9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6e:	f043 0302 	orr.w	r3, r3, #2
 8005a72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e005      	b.n	8005aa6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	4619      	mov	r1, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	680b      	ldr	r3, [r1, #0]
 8005ac4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ac6:	2103      	movs	r1, #3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f93d 	bl	8005d48 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ace:	2110      	movs	r1, #16
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f8f1 	bl	8005cb8 <USB_FlushTxFifo>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f90f 	bl	8005d04 <USB_FlushRxFifo>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	461a      	mov	r2, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2300      	movs	r3, #0
 8005b12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	e043      	b.n	8005ba2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b30:	d118      	bne.n	8005b64 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e013      	b.n	8005b76 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e008      	b.n	8005b76 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	461a      	mov	r2, r3
 8005b84:	2300      	movs	r3, #0
 8005b86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	461a      	mov	r2, r3
 8005b96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d3b7      	bcc.n	8005b1a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	e043      	b.n	8005c38 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc6:	d118      	bne.n	8005bfa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e013      	b.n	8005c0c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e008      	b.n	8005c0c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	461a      	mov	r2, r3
 8005c08:	2300      	movs	r3, #0
 8005c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	3301      	adds	r3, #1
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d3b7      	bcc.n	8005bb0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f043 0210 	orr.w	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <USB_DevInit+0x294>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f043 0208 	orr.w	r2, r3, #8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d107      	bne.n	8005ca2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c9a:	f043 0304 	orr.w	r3, r3, #4
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cae:	b004      	add	sp, #16
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	803c3800 	.word	0x803c3800

08005cb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <USB_FlushTxFifo+0x48>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e006      	b.n	8005cf2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d0f0      	beq.n	8005cd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	00030d40 	.word	0x00030d40

08005d04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2210      	movs	r2, #16
 8005d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <USB_FlushRxFifo+0x40>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d901      	bls.n	8005d28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e006      	b.n	8005d36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d0f0      	beq.n	8005d16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	00030d40 	.word	0x00030d40

08005d48 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d94:	f023 0303 	bic.w	r3, r3, #3
 8005d98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <USB_CoreReset+0x64>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d901      	bls.n	8005dda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e01b      	b.n	8005e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	daf2      	bge.n	8005dc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f043 0201 	orr.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <USB_CoreReset+0x64>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d901      	bls.n	8005e04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e006      	b.n	8005e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d0f0      	beq.n	8005df2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	00030d40 	.word	0x00030d40

08005e24 <__errno>:
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <__errno+0x8>)
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	2000000c 	.word	0x2000000c

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4d0d      	ldr	r5, [pc, #52]	; (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4d0b      	ldr	r5, [pc, #44]	; (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	; (8005e74 <__libc_init_array+0x44>)
 8005e44:	f000 fc62 	bl	800670c <_init>
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	080068f8 	.word	0x080068f8
 8005e6c:	080068f8 	.word	0x080068f8
 8005e70:	080068f8 	.word	0x080068f8
 8005e74:	080068fc 	.word	0x080068fc

08005e78 <memset>:
 8005e78:	4402      	add	r2, r0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <sniprintf>:
 8005e88:	b40c      	push	{r2, r3}
 8005e8a:	b530      	push	{r4, r5, lr}
 8005e8c:	4b17      	ldr	r3, [pc, #92]	; (8005eec <sniprintf+0x64>)
 8005e8e:	1e0c      	subs	r4, r1, #0
 8005e90:	681d      	ldr	r5, [r3, #0]
 8005e92:	b09d      	sub	sp, #116	; 0x74
 8005e94:	da08      	bge.n	8005ea8 <sniprintf+0x20>
 8005e96:	238b      	movs	r3, #139	; 0x8b
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9e:	b01d      	add	sp, #116	; 0x74
 8005ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea4:	b002      	add	sp, #8
 8005ea6:	4770      	bx	lr
 8005ea8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005eac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005eb0:	bf14      	ite	ne
 8005eb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005eb6:	4623      	moveq	r3, r4
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	9307      	str	r3, [sp, #28]
 8005ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ec0:	9002      	str	r0, [sp, #8]
 8005ec2:	9006      	str	r0, [sp, #24]
 8005ec4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ec8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005eca:	ab21      	add	r3, sp, #132	; 0x84
 8005ecc:	a902      	add	r1, sp, #8
 8005ece:	4628      	mov	r0, r5
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	f000 f869 	bl	8005fa8 <_svfiprintf_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	bfbc      	itt	lt
 8005eda:	238b      	movlt	r3, #139	; 0x8b
 8005edc:	602b      	strlt	r3, [r5, #0]
 8005ede:	2c00      	cmp	r4, #0
 8005ee0:	d0dd      	beq.n	8005e9e <sniprintf+0x16>
 8005ee2:	9b02      	ldr	r3, [sp, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e7d9      	b.n	8005e9e <sniprintf+0x16>
 8005eea:	bf00      	nop
 8005eec:	2000000c 	.word	0x2000000c

08005ef0 <__ssputs_r>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	688e      	ldr	r6, [r1, #8]
 8005ef6:	429e      	cmp	r6, r3
 8005ef8:	4682      	mov	sl, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4690      	mov	r8, r2
 8005efe:	461f      	mov	r7, r3
 8005f00:	d838      	bhi.n	8005f74 <__ssputs_r+0x84>
 8005f02:	898a      	ldrh	r2, [r1, #12]
 8005f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f08:	d032      	beq.n	8005f70 <__ssputs_r+0x80>
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	6909      	ldr	r1, [r1, #16]
 8005f0e:	eba5 0901 	sub.w	r9, r5, r1
 8005f12:	6965      	ldr	r5, [r4, #20]
 8005f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	444b      	add	r3, r9
 8005f20:	106d      	asrs	r5, r5, #1
 8005f22:	429d      	cmp	r5, r3
 8005f24:	bf38      	it	cc
 8005f26:	461d      	movcc	r5, r3
 8005f28:	0553      	lsls	r3, r2, #21
 8005f2a:	d531      	bpl.n	8005f90 <__ssputs_r+0xa0>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	f000 fb47 	bl	80065c0 <_malloc_r>
 8005f32:	4606      	mov	r6, r0
 8005f34:	b950      	cbnz	r0, 8005f4c <__ssputs_r+0x5c>
 8005f36:	230c      	movs	r3, #12
 8005f38:	f8ca 3000 	str.w	r3, [sl]
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4c:	6921      	ldr	r1, [r4, #16]
 8005f4e:	464a      	mov	r2, r9
 8005f50:	f000 fabe 	bl	80064d0 <memcpy>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	6126      	str	r6, [r4, #16]
 8005f62:	6165      	str	r5, [r4, #20]
 8005f64:	444e      	add	r6, r9
 8005f66:	eba5 0509 	sub.w	r5, r5, r9
 8005f6a:	6026      	str	r6, [r4, #0]
 8005f6c:	60a5      	str	r5, [r4, #8]
 8005f6e:	463e      	mov	r6, r7
 8005f70:	42be      	cmp	r6, r7
 8005f72:	d900      	bls.n	8005f76 <__ssputs_r+0x86>
 8005f74:	463e      	mov	r6, r7
 8005f76:	4632      	mov	r2, r6
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	f000 fab6 	bl	80064ec <memmove>
 8005f80:	68a3      	ldr	r3, [r4, #8]
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	1b9b      	subs	r3, r3, r6
 8005f86:	4432      	add	r2, r6
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	6022      	str	r2, [r4, #0]
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7db      	b.n	8005f48 <__ssputs_r+0x58>
 8005f90:	462a      	mov	r2, r5
 8005f92:	f000 fb6f 	bl	8006674 <_realloc_r>
 8005f96:	4606      	mov	r6, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d1e1      	bne.n	8005f60 <__ssputs_r+0x70>
 8005f9c:	6921      	ldr	r1, [r4, #16]
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	f000 fabe 	bl	8006520 <_free_r>
 8005fa4:	e7c7      	b.n	8005f36 <__ssputs_r+0x46>
	...

08005fa8 <_svfiprintf_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	4698      	mov	r8, r3
 8005fae:	898b      	ldrh	r3, [r1, #12]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	b09d      	sub	sp, #116	; 0x74
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	4614      	mov	r4, r2
 8005fba:	d50e      	bpl.n	8005fda <_svfiprintf_r+0x32>
 8005fbc:	690b      	ldr	r3, [r1, #16]
 8005fbe:	b963      	cbnz	r3, 8005fda <_svfiprintf_r+0x32>
 8005fc0:	2140      	movs	r1, #64	; 0x40
 8005fc2:	f000 fafd 	bl	80065c0 <_malloc_r>
 8005fc6:	6028      	str	r0, [r5, #0]
 8005fc8:	6128      	str	r0, [r5, #16]
 8005fca:	b920      	cbnz	r0, 8005fd6 <_svfiprintf_r+0x2e>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	e0d1      	b.n	800617a <_svfiprintf_r+0x1d2>
 8005fd6:	2340      	movs	r3, #64	; 0x40
 8005fd8:	616b      	str	r3, [r5, #20]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fde:	2320      	movs	r3, #32
 8005fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fe8:	2330      	movs	r3, #48	; 0x30
 8005fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006194 <_svfiprintf_r+0x1ec>
 8005fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ff2:	f04f 0901 	mov.w	r9, #1
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	469a      	mov	sl, r3
 8005ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ffe:	b10a      	cbz	r2, 8006004 <_svfiprintf_r+0x5c>
 8006000:	2a25      	cmp	r2, #37	; 0x25
 8006002:	d1f9      	bne.n	8005ff8 <_svfiprintf_r+0x50>
 8006004:	ebba 0b04 	subs.w	fp, sl, r4
 8006008:	d00b      	beq.n	8006022 <_svfiprintf_r+0x7a>
 800600a:	465b      	mov	r3, fp
 800600c:	4622      	mov	r2, r4
 800600e:	4629      	mov	r1, r5
 8006010:	4638      	mov	r0, r7
 8006012:	f7ff ff6d 	bl	8005ef0 <__ssputs_r>
 8006016:	3001      	adds	r0, #1
 8006018:	f000 80aa 	beq.w	8006170 <_svfiprintf_r+0x1c8>
 800601c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800601e:	445a      	add	r2, fp
 8006020:	9209      	str	r2, [sp, #36]	; 0x24
 8006022:	f89a 3000 	ldrb.w	r3, [sl]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80a2 	beq.w	8006170 <_svfiprintf_r+0x1c8>
 800602c:	2300      	movs	r3, #0
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006036:	f10a 0a01 	add.w	sl, sl, #1
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006042:	931a      	str	r3, [sp, #104]	; 0x68
 8006044:	4654      	mov	r4, sl
 8006046:	2205      	movs	r2, #5
 8006048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604c:	4851      	ldr	r0, [pc, #324]	; (8006194 <_svfiprintf_r+0x1ec>)
 800604e:	f7fa f8c7 	bl	80001e0 <memchr>
 8006052:	9a04      	ldr	r2, [sp, #16]
 8006054:	b9d8      	cbnz	r0, 800608e <_svfiprintf_r+0xe6>
 8006056:	06d0      	lsls	r0, r2, #27
 8006058:	bf44      	itt	mi
 800605a:	2320      	movmi	r3, #32
 800605c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006060:	0711      	lsls	r1, r2, #28
 8006062:	bf44      	itt	mi
 8006064:	232b      	movmi	r3, #43	; 0x2b
 8006066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800606a:	f89a 3000 	ldrb.w	r3, [sl]
 800606e:	2b2a      	cmp	r3, #42	; 0x2a
 8006070:	d015      	beq.n	800609e <_svfiprintf_r+0xf6>
 8006072:	9a07      	ldr	r2, [sp, #28]
 8006074:	4654      	mov	r4, sl
 8006076:	2000      	movs	r0, #0
 8006078:	f04f 0c0a 	mov.w	ip, #10
 800607c:	4621      	mov	r1, r4
 800607e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006082:	3b30      	subs	r3, #48	; 0x30
 8006084:	2b09      	cmp	r3, #9
 8006086:	d94e      	bls.n	8006126 <_svfiprintf_r+0x17e>
 8006088:	b1b0      	cbz	r0, 80060b8 <_svfiprintf_r+0x110>
 800608a:	9207      	str	r2, [sp, #28]
 800608c:	e014      	b.n	80060b8 <_svfiprintf_r+0x110>
 800608e:	eba0 0308 	sub.w	r3, r0, r8
 8006092:	fa09 f303 	lsl.w	r3, r9, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	46a2      	mov	sl, r4
 800609c:	e7d2      	b.n	8006044 <_svfiprintf_r+0x9c>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	1d19      	adds	r1, r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	9103      	str	r1, [sp, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfbb      	ittet	lt
 80060aa:	425b      	neglt	r3, r3
 80060ac:	f042 0202 	orrlt.w	r2, r2, #2
 80060b0:	9307      	strge	r3, [sp, #28]
 80060b2:	9307      	strlt	r3, [sp, #28]
 80060b4:	bfb8      	it	lt
 80060b6:	9204      	strlt	r2, [sp, #16]
 80060b8:	7823      	ldrb	r3, [r4, #0]
 80060ba:	2b2e      	cmp	r3, #46	; 0x2e
 80060bc:	d10c      	bne.n	80060d8 <_svfiprintf_r+0x130>
 80060be:	7863      	ldrb	r3, [r4, #1]
 80060c0:	2b2a      	cmp	r3, #42	; 0x2a
 80060c2:	d135      	bne.n	8006130 <_svfiprintf_r+0x188>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	9203      	str	r2, [sp, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bfb8      	it	lt
 80060d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060d4:	3402      	adds	r4, #2
 80060d6:	9305      	str	r3, [sp, #20]
 80060d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061a4 <_svfiprintf_r+0x1fc>
 80060dc:	7821      	ldrb	r1, [r4, #0]
 80060de:	2203      	movs	r2, #3
 80060e0:	4650      	mov	r0, sl
 80060e2:	f7fa f87d 	bl	80001e0 <memchr>
 80060e6:	b140      	cbz	r0, 80060fa <_svfiprintf_r+0x152>
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	eba0 000a 	sub.w	r0, r0, sl
 80060ee:	fa03 f000 	lsl.w	r0, r3, r0
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	4303      	orrs	r3, r0
 80060f6:	3401      	adds	r4, #1
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fe:	4826      	ldr	r0, [pc, #152]	; (8006198 <_svfiprintf_r+0x1f0>)
 8006100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006104:	2206      	movs	r2, #6
 8006106:	f7fa f86b 	bl	80001e0 <memchr>
 800610a:	2800      	cmp	r0, #0
 800610c:	d038      	beq.n	8006180 <_svfiprintf_r+0x1d8>
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <_svfiprintf_r+0x1f4>)
 8006110:	bb1b      	cbnz	r3, 800615a <_svfiprintf_r+0x1b2>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	3307      	adds	r3, #7
 8006116:	f023 0307 	bic.w	r3, r3, #7
 800611a:	3308      	adds	r3, #8
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006120:	4433      	add	r3, r6
 8006122:	9309      	str	r3, [sp, #36]	; 0x24
 8006124:	e767      	b.n	8005ff6 <_svfiprintf_r+0x4e>
 8006126:	fb0c 3202 	mla	r2, ip, r2, r3
 800612a:	460c      	mov	r4, r1
 800612c:	2001      	movs	r0, #1
 800612e:	e7a5      	b.n	800607c <_svfiprintf_r+0xd4>
 8006130:	2300      	movs	r3, #0
 8006132:	3401      	adds	r4, #1
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	4619      	mov	r1, r3
 8006138:	f04f 0c0a 	mov.w	ip, #10
 800613c:	4620      	mov	r0, r4
 800613e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006142:	3a30      	subs	r2, #48	; 0x30
 8006144:	2a09      	cmp	r2, #9
 8006146:	d903      	bls.n	8006150 <_svfiprintf_r+0x1a8>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0c5      	beq.n	80060d8 <_svfiprintf_r+0x130>
 800614c:	9105      	str	r1, [sp, #20]
 800614e:	e7c3      	b.n	80060d8 <_svfiprintf_r+0x130>
 8006150:	fb0c 2101 	mla	r1, ip, r1, r2
 8006154:	4604      	mov	r4, r0
 8006156:	2301      	movs	r3, #1
 8006158:	e7f0      	b.n	800613c <_svfiprintf_r+0x194>
 800615a:	ab03      	add	r3, sp, #12
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	462a      	mov	r2, r5
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <_svfiprintf_r+0x1f8>)
 8006162:	a904      	add	r1, sp, #16
 8006164:	4638      	mov	r0, r7
 8006166:	f3af 8000 	nop.w
 800616a:	1c42      	adds	r2, r0, #1
 800616c:	4606      	mov	r6, r0
 800616e:	d1d6      	bne.n	800611e <_svfiprintf_r+0x176>
 8006170:	89ab      	ldrh	r3, [r5, #12]
 8006172:	065b      	lsls	r3, r3, #25
 8006174:	f53f af2c 	bmi.w	8005fd0 <_svfiprintf_r+0x28>
 8006178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800617a:	b01d      	add	sp, #116	; 0x74
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	ab03      	add	r3, sp, #12
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	462a      	mov	r2, r5
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <_svfiprintf_r+0x1f8>)
 8006188:	a904      	add	r1, sp, #16
 800618a:	4638      	mov	r0, r7
 800618c:	f000 f87a 	bl	8006284 <_printf_i>
 8006190:	e7eb      	b.n	800616a <_svfiprintf_r+0x1c2>
 8006192:	bf00      	nop
 8006194:	080068bc 	.word	0x080068bc
 8006198:	080068c6 	.word	0x080068c6
 800619c:	00000000 	.word	0x00000000
 80061a0:	08005ef1 	.word	0x08005ef1
 80061a4:	080068c2 	.word	0x080068c2

080061a8 <_printf_common>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	4616      	mov	r6, r2
 80061ae:	4699      	mov	r9, r3
 80061b0:	688a      	ldr	r2, [r1, #8]
 80061b2:	690b      	ldr	r3, [r1, #16]
 80061b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	bfb8      	it	lt
 80061bc:	4613      	movlt	r3, r2
 80061be:	6033      	str	r3, [r6, #0]
 80061c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061c4:	4607      	mov	r7, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	b10a      	cbz	r2, 80061ce <_printf_common+0x26>
 80061ca:	3301      	adds	r3, #1
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	0699      	lsls	r1, r3, #26
 80061d2:	bf42      	ittt	mi
 80061d4:	6833      	ldrmi	r3, [r6, #0]
 80061d6:	3302      	addmi	r3, #2
 80061d8:	6033      	strmi	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	f015 0506 	ands.w	r5, r5, #6
 80061e0:	d106      	bne.n	80061f0 <_printf_common+0x48>
 80061e2:	f104 0a19 	add.w	sl, r4, #25
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	6832      	ldr	r2, [r6, #0]
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	dc26      	bgt.n	800623e <_printf_common+0x96>
 80061f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061f4:	1e13      	subs	r3, r2, #0
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	bf18      	it	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	0692      	lsls	r2, r2, #26
 80061fe:	d42b      	bmi.n	8006258 <_printf_common+0xb0>
 8006200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006204:	4649      	mov	r1, r9
 8006206:	4638      	mov	r0, r7
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d01e      	beq.n	800624c <_printf_common+0xa4>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	68e5      	ldr	r5, [r4, #12]
 8006212:	6832      	ldr	r2, [r6, #0]
 8006214:	f003 0306 	and.w	r3, r3, #6
 8006218:	2b04      	cmp	r3, #4
 800621a:	bf08      	it	eq
 800621c:	1aad      	subeq	r5, r5, r2
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	bf0c      	ite	eq
 8006224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006228:	2500      	movne	r5, #0
 800622a:	4293      	cmp	r3, r2
 800622c:	bfc4      	itt	gt
 800622e:	1a9b      	subgt	r3, r3, r2
 8006230:	18ed      	addgt	r5, r5, r3
 8006232:	2600      	movs	r6, #0
 8006234:	341a      	adds	r4, #26
 8006236:	42b5      	cmp	r5, r6
 8006238:	d11a      	bne.n	8006270 <_printf_common+0xc8>
 800623a:	2000      	movs	r0, #0
 800623c:	e008      	b.n	8006250 <_printf_common+0xa8>
 800623e:	2301      	movs	r3, #1
 8006240:	4652      	mov	r2, sl
 8006242:	4649      	mov	r1, r9
 8006244:	4638      	mov	r0, r7
 8006246:	47c0      	blx	r8
 8006248:	3001      	adds	r0, #1
 800624a:	d103      	bne.n	8006254 <_printf_common+0xac>
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006254:	3501      	adds	r5, #1
 8006256:	e7c6      	b.n	80061e6 <_printf_common+0x3e>
 8006258:	18e1      	adds	r1, r4, r3
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	2030      	movs	r0, #48	; 0x30
 800625e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006262:	4422      	add	r2, r4
 8006264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800626c:	3302      	adds	r3, #2
 800626e:	e7c7      	b.n	8006200 <_printf_common+0x58>
 8006270:	2301      	movs	r3, #1
 8006272:	4622      	mov	r2, r4
 8006274:	4649      	mov	r1, r9
 8006276:	4638      	mov	r0, r7
 8006278:	47c0      	blx	r8
 800627a:	3001      	adds	r0, #1
 800627c:	d0e6      	beq.n	800624c <_printf_common+0xa4>
 800627e:	3601      	adds	r6, #1
 8006280:	e7d9      	b.n	8006236 <_printf_common+0x8e>
	...

08006284 <_printf_i>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	460c      	mov	r4, r1
 800628a:	4691      	mov	r9, r2
 800628c:	7e27      	ldrb	r7, [r4, #24]
 800628e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006290:	2f78      	cmp	r7, #120	; 0x78
 8006292:	4680      	mov	r8, r0
 8006294:	469a      	mov	sl, r3
 8006296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800629a:	d807      	bhi.n	80062ac <_printf_i+0x28>
 800629c:	2f62      	cmp	r7, #98	; 0x62
 800629e:	d80a      	bhi.n	80062b6 <_printf_i+0x32>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	f000 80d8 	beq.w	8006456 <_printf_i+0x1d2>
 80062a6:	2f58      	cmp	r7, #88	; 0x58
 80062a8:	f000 80a3 	beq.w	80063f2 <_printf_i+0x16e>
 80062ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062b4:	e03a      	b.n	800632c <_printf_i+0xa8>
 80062b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ba:	2b15      	cmp	r3, #21
 80062bc:	d8f6      	bhi.n	80062ac <_printf_i+0x28>
 80062be:	a001      	add	r0, pc, #4	; (adr r0, 80062c4 <_printf_i+0x40>)
 80062c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062c4:	0800631d 	.word	0x0800631d
 80062c8:	08006331 	.word	0x08006331
 80062cc:	080062ad 	.word	0x080062ad
 80062d0:	080062ad 	.word	0x080062ad
 80062d4:	080062ad 	.word	0x080062ad
 80062d8:	080062ad 	.word	0x080062ad
 80062dc:	08006331 	.word	0x08006331
 80062e0:	080062ad 	.word	0x080062ad
 80062e4:	080062ad 	.word	0x080062ad
 80062e8:	080062ad 	.word	0x080062ad
 80062ec:	080062ad 	.word	0x080062ad
 80062f0:	0800643d 	.word	0x0800643d
 80062f4:	08006361 	.word	0x08006361
 80062f8:	0800641f 	.word	0x0800641f
 80062fc:	080062ad 	.word	0x080062ad
 8006300:	080062ad 	.word	0x080062ad
 8006304:	0800645f 	.word	0x0800645f
 8006308:	080062ad 	.word	0x080062ad
 800630c:	08006361 	.word	0x08006361
 8006310:	080062ad 	.word	0x080062ad
 8006314:	080062ad 	.word	0x080062ad
 8006318:	08006427 	.word	0x08006427
 800631c:	680b      	ldr	r3, [r1, #0]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	600a      	str	r2, [r1, #0]
 8006324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800632c:	2301      	movs	r3, #1
 800632e:	e0a3      	b.n	8006478 <_printf_i+0x1f4>
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	6808      	ldr	r0, [r1, #0]
 8006334:	062e      	lsls	r6, r5, #24
 8006336:	f100 0304 	add.w	r3, r0, #4
 800633a:	d50a      	bpl.n	8006352 <_printf_i+0xce>
 800633c:	6805      	ldr	r5, [r0, #0]
 800633e:	600b      	str	r3, [r1, #0]
 8006340:	2d00      	cmp	r5, #0
 8006342:	da03      	bge.n	800634c <_printf_i+0xc8>
 8006344:	232d      	movs	r3, #45	; 0x2d
 8006346:	426d      	negs	r5, r5
 8006348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634c:	485e      	ldr	r0, [pc, #376]	; (80064c8 <_printf_i+0x244>)
 800634e:	230a      	movs	r3, #10
 8006350:	e019      	b.n	8006386 <_printf_i+0x102>
 8006352:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006356:	6805      	ldr	r5, [r0, #0]
 8006358:	600b      	str	r3, [r1, #0]
 800635a:	bf18      	it	ne
 800635c:	b22d      	sxthne	r5, r5
 800635e:	e7ef      	b.n	8006340 <_printf_i+0xbc>
 8006360:	680b      	ldr	r3, [r1, #0]
 8006362:	6825      	ldr	r5, [r4, #0]
 8006364:	1d18      	adds	r0, r3, #4
 8006366:	6008      	str	r0, [r1, #0]
 8006368:	0628      	lsls	r0, r5, #24
 800636a:	d501      	bpl.n	8006370 <_printf_i+0xec>
 800636c:	681d      	ldr	r5, [r3, #0]
 800636e:	e002      	b.n	8006376 <_printf_i+0xf2>
 8006370:	0669      	lsls	r1, r5, #25
 8006372:	d5fb      	bpl.n	800636c <_printf_i+0xe8>
 8006374:	881d      	ldrh	r5, [r3, #0]
 8006376:	4854      	ldr	r0, [pc, #336]	; (80064c8 <_printf_i+0x244>)
 8006378:	2f6f      	cmp	r7, #111	; 0x6f
 800637a:	bf0c      	ite	eq
 800637c:	2308      	moveq	r3, #8
 800637e:	230a      	movne	r3, #10
 8006380:	2100      	movs	r1, #0
 8006382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006386:	6866      	ldr	r6, [r4, #4]
 8006388:	60a6      	str	r6, [r4, #8]
 800638a:	2e00      	cmp	r6, #0
 800638c:	bfa2      	ittt	ge
 800638e:	6821      	ldrge	r1, [r4, #0]
 8006390:	f021 0104 	bicge.w	r1, r1, #4
 8006394:	6021      	strge	r1, [r4, #0]
 8006396:	b90d      	cbnz	r5, 800639c <_printf_i+0x118>
 8006398:	2e00      	cmp	r6, #0
 800639a:	d04d      	beq.n	8006438 <_printf_i+0x1b4>
 800639c:	4616      	mov	r6, r2
 800639e:	fbb5 f1f3 	udiv	r1, r5, r3
 80063a2:	fb03 5711 	mls	r7, r3, r1, r5
 80063a6:	5dc7      	ldrb	r7, [r0, r7]
 80063a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063ac:	462f      	mov	r7, r5
 80063ae:	42bb      	cmp	r3, r7
 80063b0:	460d      	mov	r5, r1
 80063b2:	d9f4      	bls.n	800639e <_printf_i+0x11a>
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d10b      	bne.n	80063d0 <_printf_i+0x14c>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	07df      	lsls	r7, r3, #31
 80063bc:	d508      	bpl.n	80063d0 <_printf_i+0x14c>
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	4299      	cmp	r1, r3
 80063c4:	bfde      	ittt	le
 80063c6:	2330      	movle	r3, #48	; 0x30
 80063c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063d0:	1b92      	subs	r2, r2, r6
 80063d2:	6122      	str	r2, [r4, #16]
 80063d4:	f8cd a000 	str.w	sl, [sp]
 80063d8:	464b      	mov	r3, r9
 80063da:	aa03      	add	r2, sp, #12
 80063dc:	4621      	mov	r1, r4
 80063de:	4640      	mov	r0, r8
 80063e0:	f7ff fee2 	bl	80061a8 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d14c      	bne.n	8006482 <_printf_i+0x1fe>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b004      	add	sp, #16
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	4835      	ldr	r0, [pc, #212]	; (80064c8 <_printf_i+0x244>)
 80063f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	680e      	ldr	r6, [r1, #0]
 80063fc:	061f      	lsls	r7, r3, #24
 80063fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006402:	600e      	str	r6, [r1, #0]
 8006404:	d514      	bpl.n	8006430 <_printf_i+0x1ac>
 8006406:	07d9      	lsls	r1, r3, #31
 8006408:	bf44      	itt	mi
 800640a:	f043 0320 	orrmi.w	r3, r3, #32
 800640e:	6023      	strmi	r3, [r4, #0]
 8006410:	b91d      	cbnz	r5, 800641a <_printf_i+0x196>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f023 0320 	bic.w	r3, r3, #32
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	2310      	movs	r3, #16
 800641c:	e7b0      	b.n	8006380 <_printf_i+0xfc>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	f043 0320 	orr.w	r3, r3, #32
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2378      	movs	r3, #120	; 0x78
 8006428:	4828      	ldr	r0, [pc, #160]	; (80064cc <_printf_i+0x248>)
 800642a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800642e:	e7e3      	b.n	80063f8 <_printf_i+0x174>
 8006430:	065e      	lsls	r6, r3, #25
 8006432:	bf48      	it	mi
 8006434:	b2ad      	uxthmi	r5, r5
 8006436:	e7e6      	b.n	8006406 <_printf_i+0x182>
 8006438:	4616      	mov	r6, r2
 800643a:	e7bb      	b.n	80063b4 <_printf_i+0x130>
 800643c:	680b      	ldr	r3, [r1, #0]
 800643e:	6826      	ldr	r6, [r4, #0]
 8006440:	6960      	ldr	r0, [r4, #20]
 8006442:	1d1d      	adds	r5, r3, #4
 8006444:	600d      	str	r5, [r1, #0]
 8006446:	0635      	lsls	r5, r6, #24
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	d501      	bpl.n	8006450 <_printf_i+0x1cc>
 800644c:	6018      	str	r0, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0x1d2>
 8006450:	0671      	lsls	r1, r6, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0x1c8>
 8006454:	8018      	strh	r0, [r3, #0]
 8006456:	2300      	movs	r3, #0
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	4616      	mov	r6, r2
 800645c:	e7ba      	b.n	80063d4 <_printf_i+0x150>
 800645e:	680b      	ldr	r3, [r1, #0]
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	600a      	str	r2, [r1, #0]
 8006464:	681e      	ldr	r6, [r3, #0]
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	2100      	movs	r1, #0
 800646a:	4630      	mov	r0, r6
 800646c:	f7f9 feb8 	bl	80001e0 <memchr>
 8006470:	b108      	cbz	r0, 8006476 <_printf_i+0x1f2>
 8006472:	1b80      	subs	r0, r0, r6
 8006474:	6060      	str	r0, [r4, #4]
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	2300      	movs	r3, #0
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	e7a8      	b.n	80063d4 <_printf_i+0x150>
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	4632      	mov	r2, r6
 8006486:	4649      	mov	r1, r9
 8006488:	4640      	mov	r0, r8
 800648a:	47d0      	blx	sl
 800648c:	3001      	adds	r0, #1
 800648e:	d0ab      	beq.n	80063e8 <_printf_i+0x164>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	079b      	lsls	r3, r3, #30
 8006494:	d413      	bmi.n	80064be <_printf_i+0x23a>
 8006496:	68e0      	ldr	r0, [r4, #12]
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	4298      	cmp	r0, r3
 800649c:	bfb8      	it	lt
 800649e:	4618      	movlt	r0, r3
 80064a0:	e7a4      	b.n	80063ec <_printf_i+0x168>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4632      	mov	r2, r6
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d09b      	beq.n	80063e8 <_printf_i+0x164>
 80064b0:	3501      	adds	r5, #1
 80064b2:	68e3      	ldr	r3, [r4, #12]
 80064b4:	9903      	ldr	r1, [sp, #12]
 80064b6:	1a5b      	subs	r3, r3, r1
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	dcf2      	bgt.n	80064a2 <_printf_i+0x21e>
 80064bc:	e7eb      	b.n	8006496 <_printf_i+0x212>
 80064be:	2500      	movs	r5, #0
 80064c0:	f104 0619 	add.w	r6, r4, #25
 80064c4:	e7f5      	b.n	80064b2 <_printf_i+0x22e>
 80064c6:	bf00      	nop
 80064c8:	080068cd 	.word	0x080068cd
 80064cc:	080068de 	.word	0x080068de

080064d0 <memcpy>:
 80064d0:	440a      	add	r2, r1
 80064d2:	4291      	cmp	r1, r2
 80064d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064d8:	d100      	bne.n	80064dc <memcpy+0xc>
 80064da:	4770      	bx	lr
 80064dc:	b510      	push	{r4, lr}
 80064de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e6:	4291      	cmp	r1, r2
 80064e8:	d1f9      	bne.n	80064de <memcpy+0xe>
 80064ea:	bd10      	pop	{r4, pc}

080064ec <memmove>:
 80064ec:	4288      	cmp	r0, r1
 80064ee:	b510      	push	{r4, lr}
 80064f0:	eb01 0402 	add.w	r4, r1, r2
 80064f4:	d902      	bls.n	80064fc <memmove+0x10>
 80064f6:	4284      	cmp	r4, r0
 80064f8:	4623      	mov	r3, r4
 80064fa:	d807      	bhi.n	800650c <memmove+0x20>
 80064fc:	1e43      	subs	r3, r0, #1
 80064fe:	42a1      	cmp	r1, r4
 8006500:	d008      	beq.n	8006514 <memmove+0x28>
 8006502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800650a:	e7f8      	b.n	80064fe <memmove+0x12>
 800650c:	4402      	add	r2, r0
 800650e:	4601      	mov	r1, r0
 8006510:	428a      	cmp	r2, r1
 8006512:	d100      	bne.n	8006516 <memmove+0x2a>
 8006514:	bd10      	pop	{r4, pc}
 8006516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800651a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800651e:	e7f7      	b.n	8006510 <memmove+0x24>

08006520 <_free_r>:
 8006520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006522:	2900      	cmp	r1, #0
 8006524:	d048      	beq.n	80065b8 <_free_r+0x98>
 8006526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800652a:	9001      	str	r0, [sp, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f1a1 0404 	sub.w	r4, r1, #4
 8006532:	bfb8      	it	lt
 8006534:	18e4      	addlt	r4, r4, r3
 8006536:	f000 f8d3 	bl	80066e0 <__malloc_lock>
 800653a:	4a20      	ldr	r2, [pc, #128]	; (80065bc <_free_r+0x9c>)
 800653c:	9801      	ldr	r0, [sp, #4]
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	4615      	mov	r5, r2
 8006542:	b933      	cbnz	r3, 8006552 <_free_r+0x32>
 8006544:	6063      	str	r3, [r4, #4]
 8006546:	6014      	str	r4, [r2, #0]
 8006548:	b003      	add	sp, #12
 800654a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800654e:	f000 b8cd 	b.w	80066ec <__malloc_unlock>
 8006552:	42a3      	cmp	r3, r4
 8006554:	d90b      	bls.n	800656e <_free_r+0x4e>
 8006556:	6821      	ldr	r1, [r4, #0]
 8006558:	1862      	adds	r2, r4, r1
 800655a:	4293      	cmp	r3, r2
 800655c:	bf04      	itt	eq
 800655e:	681a      	ldreq	r2, [r3, #0]
 8006560:	685b      	ldreq	r3, [r3, #4]
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	bf04      	itt	eq
 8006566:	1852      	addeq	r2, r2, r1
 8006568:	6022      	streq	r2, [r4, #0]
 800656a:	602c      	str	r4, [r5, #0]
 800656c:	e7ec      	b.n	8006548 <_free_r+0x28>
 800656e:	461a      	mov	r2, r3
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b10b      	cbz	r3, 8006578 <_free_r+0x58>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d9fa      	bls.n	800656e <_free_r+0x4e>
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	1855      	adds	r5, r2, r1
 800657c:	42a5      	cmp	r5, r4
 800657e:	d10b      	bne.n	8006598 <_free_r+0x78>
 8006580:	6824      	ldr	r4, [r4, #0]
 8006582:	4421      	add	r1, r4
 8006584:	1854      	adds	r4, r2, r1
 8006586:	42a3      	cmp	r3, r4
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	d1dd      	bne.n	8006548 <_free_r+0x28>
 800658c:	681c      	ldr	r4, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	6053      	str	r3, [r2, #4]
 8006592:	4421      	add	r1, r4
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	e7d7      	b.n	8006548 <_free_r+0x28>
 8006598:	d902      	bls.n	80065a0 <_free_r+0x80>
 800659a:	230c      	movs	r3, #12
 800659c:	6003      	str	r3, [r0, #0]
 800659e:	e7d3      	b.n	8006548 <_free_r+0x28>
 80065a0:	6825      	ldr	r5, [r4, #0]
 80065a2:	1961      	adds	r1, r4, r5
 80065a4:	428b      	cmp	r3, r1
 80065a6:	bf04      	itt	eq
 80065a8:	6819      	ldreq	r1, [r3, #0]
 80065aa:	685b      	ldreq	r3, [r3, #4]
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	bf04      	itt	eq
 80065b0:	1949      	addeq	r1, r1, r5
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	6054      	str	r4, [r2, #4]
 80065b6:	e7c7      	b.n	8006548 <_free_r+0x28>
 80065b8:	b003      	add	sp, #12
 80065ba:	bd30      	pop	{r4, r5, pc}
 80065bc:	200000b8 	.word	0x200000b8

080065c0 <_malloc_r>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	1ccd      	adds	r5, r1, #3
 80065c4:	f025 0503 	bic.w	r5, r5, #3
 80065c8:	3508      	adds	r5, #8
 80065ca:	2d0c      	cmp	r5, #12
 80065cc:	bf38      	it	cc
 80065ce:	250c      	movcc	r5, #12
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	4606      	mov	r6, r0
 80065d4:	db01      	blt.n	80065da <_malloc_r+0x1a>
 80065d6:	42a9      	cmp	r1, r5
 80065d8:	d903      	bls.n	80065e2 <_malloc_r+0x22>
 80065da:	230c      	movs	r3, #12
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	2000      	movs	r0, #0
 80065e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e2:	f000 f87d 	bl	80066e0 <__malloc_lock>
 80065e6:	4921      	ldr	r1, [pc, #132]	; (800666c <_malloc_r+0xac>)
 80065e8:	680a      	ldr	r2, [r1, #0]
 80065ea:	4614      	mov	r4, r2
 80065ec:	b99c      	cbnz	r4, 8006616 <_malloc_r+0x56>
 80065ee:	4f20      	ldr	r7, [pc, #128]	; (8006670 <_malloc_r+0xb0>)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	b923      	cbnz	r3, 80065fe <_malloc_r+0x3e>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4630      	mov	r0, r6
 80065f8:	f000 f862 	bl	80066c0 <_sbrk_r>
 80065fc:	6038      	str	r0, [r7, #0]
 80065fe:	4629      	mov	r1, r5
 8006600:	4630      	mov	r0, r6
 8006602:	f000 f85d 	bl	80066c0 <_sbrk_r>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d123      	bne.n	8006652 <_malloc_r+0x92>
 800660a:	230c      	movs	r3, #12
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	4630      	mov	r0, r6
 8006610:	f000 f86c 	bl	80066ec <__malloc_unlock>
 8006614:	e7e3      	b.n	80065de <_malloc_r+0x1e>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	1b5b      	subs	r3, r3, r5
 800661a:	d417      	bmi.n	800664c <_malloc_r+0x8c>
 800661c:	2b0b      	cmp	r3, #11
 800661e:	d903      	bls.n	8006628 <_malloc_r+0x68>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	441c      	add	r4, r3
 8006624:	6025      	str	r5, [r4, #0]
 8006626:	e004      	b.n	8006632 <_malloc_r+0x72>
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	42a2      	cmp	r2, r4
 800662c:	bf0c      	ite	eq
 800662e:	600b      	streq	r3, [r1, #0]
 8006630:	6053      	strne	r3, [r2, #4]
 8006632:	4630      	mov	r0, r6
 8006634:	f000 f85a 	bl	80066ec <__malloc_unlock>
 8006638:	f104 000b 	add.w	r0, r4, #11
 800663c:	1d23      	adds	r3, r4, #4
 800663e:	f020 0007 	bic.w	r0, r0, #7
 8006642:	1ac2      	subs	r2, r0, r3
 8006644:	d0cc      	beq.n	80065e0 <_malloc_r+0x20>
 8006646:	1a1b      	subs	r3, r3, r0
 8006648:	50a3      	str	r3, [r4, r2]
 800664a:	e7c9      	b.n	80065e0 <_malloc_r+0x20>
 800664c:	4622      	mov	r2, r4
 800664e:	6864      	ldr	r4, [r4, #4]
 8006650:	e7cc      	b.n	80065ec <_malloc_r+0x2c>
 8006652:	1cc4      	adds	r4, r0, #3
 8006654:	f024 0403 	bic.w	r4, r4, #3
 8006658:	42a0      	cmp	r0, r4
 800665a:	d0e3      	beq.n	8006624 <_malloc_r+0x64>
 800665c:	1a21      	subs	r1, r4, r0
 800665e:	4630      	mov	r0, r6
 8006660:	f000 f82e 	bl	80066c0 <_sbrk_r>
 8006664:	3001      	adds	r0, #1
 8006666:	d1dd      	bne.n	8006624 <_malloc_r+0x64>
 8006668:	e7cf      	b.n	800660a <_malloc_r+0x4a>
 800666a:	bf00      	nop
 800666c:	200000b8 	.word	0x200000b8
 8006670:	200000bc 	.word	0x200000bc

08006674 <_realloc_r>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	4607      	mov	r7, r0
 8006678:	4614      	mov	r4, r2
 800667a:	460e      	mov	r6, r1
 800667c:	b921      	cbnz	r1, 8006688 <_realloc_r+0x14>
 800667e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006682:	4611      	mov	r1, r2
 8006684:	f7ff bf9c 	b.w	80065c0 <_malloc_r>
 8006688:	b922      	cbnz	r2, 8006694 <_realloc_r+0x20>
 800668a:	f7ff ff49 	bl	8006520 <_free_r>
 800668e:	4625      	mov	r5, r4
 8006690:	4628      	mov	r0, r5
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006694:	f000 f830 	bl	80066f8 <_malloc_usable_size_r>
 8006698:	42a0      	cmp	r0, r4
 800669a:	d20f      	bcs.n	80066bc <_realloc_r+0x48>
 800669c:	4621      	mov	r1, r4
 800669e:	4638      	mov	r0, r7
 80066a0:	f7ff ff8e 	bl	80065c0 <_malloc_r>
 80066a4:	4605      	mov	r5, r0
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d0f2      	beq.n	8006690 <_realloc_r+0x1c>
 80066aa:	4631      	mov	r1, r6
 80066ac:	4622      	mov	r2, r4
 80066ae:	f7ff ff0f 	bl	80064d0 <memcpy>
 80066b2:	4631      	mov	r1, r6
 80066b4:	4638      	mov	r0, r7
 80066b6:	f7ff ff33 	bl	8006520 <_free_r>
 80066ba:	e7e9      	b.n	8006690 <_realloc_r+0x1c>
 80066bc:	4635      	mov	r5, r6
 80066be:	e7e7      	b.n	8006690 <_realloc_r+0x1c>

080066c0 <_sbrk_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4d06      	ldr	r5, [pc, #24]	; (80066dc <_sbrk_r+0x1c>)
 80066c4:	2300      	movs	r3, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	f7fb fa1a 	bl	8001b04 <_sbrk>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d102      	bne.n	80066da <_sbrk_r+0x1a>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	b103      	cbz	r3, 80066da <_sbrk_r+0x1a>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	200007a8 	.word	0x200007a8

080066e0 <__malloc_lock>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__malloc_lock+0x8>)
 80066e2:	f000 b811 	b.w	8006708 <__retarget_lock_acquire_recursive>
 80066e6:	bf00      	nop
 80066e8:	200007b0 	.word	0x200007b0

080066ec <__malloc_unlock>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__malloc_unlock+0x8>)
 80066ee:	f000 b80c 	b.w	800670a <__retarget_lock_release_recursive>
 80066f2:	bf00      	nop
 80066f4:	200007b0 	.word	0x200007b0

080066f8 <_malloc_usable_size_r>:
 80066f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fc:	1f18      	subs	r0, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfbc      	itt	lt
 8006702:	580b      	ldrlt	r3, [r1, r0]
 8006704:	18c0      	addlt	r0, r0, r3
 8006706:	4770      	bx	lr

08006708 <__retarget_lock_acquire_recursive>:
 8006708:	4770      	bx	lr

0800670a <__retarget_lock_release_recursive>:
 800670a:	4770      	bx	lr

0800670c <_init>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr

08006718 <_fini>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr
