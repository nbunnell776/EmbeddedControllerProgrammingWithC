
UCSD-Embedded-C-Assignment-2-LL-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006574  08006574  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006574  08006574  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006574  08006574  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800657c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000070  080065ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  080065ec  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b327  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003833  00000000  00000000  0003b3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0003ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  00040470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3aa  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192a3  00000000  00000000  0006cef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbca4  00000000  00000000  00086195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181e39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f44  00000000  00000000  00181e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006474 	.word	0x08006474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006474 	.word	0x08006474

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__NVIC_GetPriorityGrouping+0x18>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	f003 0307 	and.w	r3, r3, #7
}
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	db0b      	blt.n	80002b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f003 021f 	and.w	r2, r3, #31
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <__NVIC_EnableIRQ+0x38>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	2001      	movs	r0, #1
 80002ae:	fa00 f202 	lsl.w	r2, r0, r2
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	f04f 32ff 	mov.w	r2, #4294967295
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	401a      	ands	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000364:	f04f 31ff 	mov.w	r1, #4294967295
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43d9      	mvns	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	4313      	orrs	r3, r2
         );
}
 8000376:	4618      	mov	r0, r3
 8000378:	3724      	adds	r7, #36	; 0x24
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f043 0201 	orr.w	r2, r3, #1
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	601a      	str	r2, [r3, #0]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	609a      	str	r2, [r3, #8]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
	...

080003f0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80003fa:	4a17      	ldr	r2, [pc, #92]	; (8000458 <LL_SYSCFG_SetEXTISource+0x68>)
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	3302      	adds	r3, #2
 8000402:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	0c1b      	lsrs	r3, r3, #16
 800040a:	43db      	mvns	r3, r3
 800040c:	ea02 0103 	and.w	r1, r2, r3
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	fa93 f3a3 	rbit	r3, r3
 800041c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d101      	bne.n	800042c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000428:	2320      	movs	r3, #32
 800042a:	e003      	b.n	8000434 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	fab3 f383 	clz	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	fa03 f202 	lsl.w	r2, r3, r2
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <LL_SYSCFG_SetEXTISource+0x68>)
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	430a      	orrs	r2, r1
 8000444:	3302      	adds	r3, #2
 8000446:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800044a:	bf00      	nop
 800044c:	371c      	adds	r7, #28
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40010000 	.word	0x40010000

0800045c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800045c:	b480      	push	{r7}
 800045e:	b08b      	sub	sp, #44	; 0x2c
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	fa93 f3a3 	rbit	r3, r3
 8000476:	613b      	str	r3, [r7, #16]
  return result;
 8000478:	693b      	ldr	r3, [r7, #16]
 800047a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000482:	2320      	movs	r3, #32
 8000484:	e003      	b.n	800048e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	fab3 f383 	clz	r3, r3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	2103      	movs	r1, #3
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	fa93 f3a3 	rbit	r3, r3
 80004a4:	61fb      	str	r3, [r7, #28]
  return result;
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80004aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d101      	bne.n	80004b4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80004b0:	2320      	movs	r3, #32
 80004b2:	e003      	b.n	80004bc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80004b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b6:	fab3 f383 	clz	r3, r3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	fa01 f303 	lsl.w	r3, r1, r3
 80004c4:	431a      	orrs	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	372c      	adds	r7, #44	; 0x2c
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b08b      	sub	sp, #44	; 0x2c
 80004da:	af00      	add	r7, sp, #0
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	68da      	ldr	r2, [r3, #12]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	fa93 f3a3 	rbit	r3, r3
 80004f0:	613b      	str	r3, [r7, #16]
  return result;
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d101      	bne.n	8000500 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80004fc:	2320      	movs	r3, #32
 80004fe:	e003      	b.n	8000508 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	fab3 f383 	clz	r3, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	2103      	movs	r1, #3
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	43db      	mvns	r3, r3
 8000512:	401a      	ands	r2, r3
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	fa93 f3a3 	rbit	r3, r3
 800051e:	61fb      	str	r3, [r7, #28]
  return result;
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800052a:	2320      	movs	r3, #32
 800052c:	e003      	b.n	8000536 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	fab3 f383 	clz	r3, r3
 8000534:	b2db      	uxtb	r3, r3
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	431a      	orrs	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	60da      	str	r2, [r3, #12]
}
 8000544:	bf00      	nop
 8000546:	372c      	adds	r7, #44	; 0x2c
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	691a      	ldr	r2, [r3, #16]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	4013      	ands	r3, r2
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d101      	bne.n	800058e <LL_GPIO_IsInputPinSet+0x1c>
 800058a:	2301      	movs	r3, #1
 800058c:	e000      	b.n	8000590 <LL_GPIO_IsInputPinSet+0x1e>
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	619a      	str	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000

08000604 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <LL_APB1_GRP1_EnableClock+0x2c>)
 800060e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000610:	4907      	ldr	r1, [pc, #28]	; (8000630 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <LL_APB1_GRP1_EnableClock+0x2c>)
 800061a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4013      	ands	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000

08000634 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <LL_APB2_GRP1_EnableClock+0x2c>)
 800063e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <LL_APB2_GRP1_EnableClock+0x2c>)
 800064a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4013      	ands	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40021000 	.word	0x40021000

08000664 <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]: X and Y coordinates on the wafer expressed in BCD format
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <LL_GetUID_Word0+0x14>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	1fff7590 	.word	0x1fff7590

0800067c <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <LL_GetUID_Word1+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	1fff7594 	.word	0x1fff7594

08000694 <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <LL_GetUID_Word2+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	1fff7598 	.word	0x1fff7598

080006ac <LL_GetFlashSize>:
  * @note   This bitfield indicates the size of the device Flash memory expressed in
  *         Kbytes. As an example, 0x040 corresponds to 64 Kbytes.
  * @retval FLASH_SIZE[15:0]: Flash memory size
  */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0xFFFFU);
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <LL_GetFlashSize+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	b29b      	uxth	r3, r3
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	1fff75e0 	.word	0x1fff75e0

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f001 f94a 	bl	8001962 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f863 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fab1 	bl	8000c38 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80006d6:	f000 f903 	bl	80008e0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80006da:	f000 f939 	bl	8000950 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80006de:	f000 f977 	bl	80009d0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80006e2:	f000 f99b 	bl	8000a1c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80006e6:	f000 f9d7 	bl	8000a98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80006ea:	f000 fa25 	bl	8000b38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ee:	f000 fa75 	bl	8000bdc <MX_USB_OTG_FS_PCD_Init>
  /*
   * Leverage LL APIs to pull the internal flash size and get the chip's UID value
   * as a 96-byte data block
   */

  uint32_t flashSize = LL_GetFlashSize();
 80006f2:	f7ff ffdb 	bl	80006ac <LL_GetFlashSize>
 80006f6:	4603      	mov	r3, r0
 80006f8:	613b      	str	r3, [r7, #16]

  uint32_t uidWord[3];
  uidWord[0] = LL_GetUID_Word0();
 80006fa:	f7ff ffb3 	bl	8000664 <LL_GetUID_Word0>
 80006fe:	4603      	mov	r3, r0
 8000700:	607b      	str	r3, [r7, #4]
  uidWord[1] = LL_GetUID_Word1();
 8000702:	f7ff ffbb 	bl	800067c <LL_GetUID_Word1>
 8000706:	4603      	mov	r3, r0
 8000708:	60bb      	str	r3, [r7, #8]
  uidWord[2] = LL_GetUID_Word2();
 800070a:	f7ff ffc3 	bl	8000694 <LL_GetUID_Word2>
 800070e:	4603      	mov	r3, r0
 8000710:	60fb      	str	r3, [r7, #12]
   * as practice w/ LL_USART
   */

  // Use a char* to push data from the uint32_T variables into the serial buffer
  // byte-by-byte
  uint8_t* dataPtr = &flashSize;
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	61fb      	str	r3, [r7, #28]

  for (uint8_t i = 0; i < (sizeof(uint32_t)/sizeof(uint8_t)); i++)
 8000718:	2300      	movs	r3, #0
 800071a:	76fb      	strb	r3, [r7, #27]
 800071c:	e00a      	b.n	8000734 <main+0x70>
  {
	  LL_USART_TransmitData8(USART1, *(dataPtr++));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	61fa      	str	r2, [r7, #28]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4619      	mov	r1, r3
 8000728:	4817      	ldr	r0, [pc, #92]	; (8000788 <main+0xc4>)
 800072a:	f7ff fe50 	bl	80003ce <LL_USART_TransmitData8>
  for (uint8_t i = 0; i < (sizeof(uint32_t)/sizeof(uint8_t)); i++)
 800072e:	7efb      	ldrb	r3, [r7, #27]
 8000730:	3301      	adds	r3, #1
 8000732:	76fb      	strb	r3, [r7, #27]
 8000734:	7efb      	ldrb	r3, [r7, #27]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d9f1      	bls.n	800071e <main+0x5a>
  }

  dataPtr = &uidWord;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	61fb      	str	r3, [r7, #28]
  {
    LL_USART_TransmitData8(USART1, (uint32_t)*(dataPtr + i));
  }
  */

  for (int i = 0; i < ((3 * sizeof(uint32_t))/sizeof(uint8_t)); ++i)
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	e00a      	b.n	800075a <main+0x96>
	{
		//printf("0x%2hx\n", *(ptr++));
		printf("%02hx", *(dataPtr++));
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	61fa      	str	r2, [r7, #28]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <main+0xc8>)
 8000750:	f004 ff3a 	bl	80055c8 <iprintf>
  for (int i = 0; i < ((3 * sizeof(uint32_t))/sizeof(uint8_t)); ++i)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	2b0b      	cmp	r3, #11
 800075e:	d9f1      	bls.n	8000744 <main+0x80>
	  * Within loop, poll for status of Blue Button, GPIOC.13 (active low).
	  * If pin is clear, set LED2, GPIOB.14 (active high)
	  * If pin is set, clear LED2
	  */

	  if(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13))
 8000760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000764:	480a      	ldr	r0, [pc, #40]	; (8000790 <main+0xcc>)
 8000766:	f7ff ff04 	bl	8000572 <LL_GPIO_IsInputPinSet>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <main+0xb8>
	  {
	    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14);
 8000770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <main+0xd0>)
 8000776:	f7ff ff1f 	bl	80005b8 <LL_GPIO_ResetOutputPin>
 800077a:	e7f1      	b.n	8000760 <main+0x9c>
	  }
	  else
	  {
	    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14);
 800077c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <main+0xd0>)
 8000782:	f7ff ff0b 	bl	800059c <LL_GPIO_SetOutputPin>
	  if(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13))
 8000786:	e7eb      	b.n	8000760 <main+0x9c>
 8000788:	40013800 	.word	0x40013800
 800078c:	0800648c 	.word	0x0800648c
 8000790:	48000800 	.word	0x48000800
 8000794:	48000400 	.word	0x48000400

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0b8      	sub	sp, #224	; 0xe0
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007a2:	2244      	movs	r2, #68	; 0x44
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 ff06 	bl	80055b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2288      	movs	r2, #136	; 0x88
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fef8 	bl	80055b8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c8:	f001 ff6e 	bl	80026a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007cc:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <SystemClock_Config+0x140>)
 80007ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007d2:	4a41      	ldr	r2, [pc, #260]	; (80008d8 <SystemClock_Config+0x140>)
 80007d4:	f023 0318 	bic.w	r3, r3, #24
 80007d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007dc:	2314      	movs	r3, #20
 80007de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f4:	2360      	movs	r3, #96	; 0x60
 80007f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000800:	2301      	movs	r3, #1
 8000802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800080c:	2328      	movs	r3, #40	; 0x28
 800080e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000812:	2307      	movs	r3, #7
 8000814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000828:	4618      	mov	r0, r3
 800082a:	f002 f87d 	bl	8002928 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000834:	f000 fd54 	bl	80012e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000856:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800085a:	2104      	movs	r1, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fc49 	bl	80030f4 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000868:	f000 fd3a 	bl	80012e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <SystemClock_Config+0x144>)
 800086e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000874:	2300      	movs	r3, #0
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000878:	2300      	movs	r3, #0
 800087a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000882:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000886:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000888:	2301      	movs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000890:	2318      	movs	r3, #24
 8000892:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000894:	2307      	movs	r3, #7
 8000896:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80008a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008a4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fdf1 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80008b4:	f000 fd14 	bl	80012e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008bc:	f001 ff12 	bl	80026e4 <HAL_PWREx_ControlVoltageScaling>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x132>
  {
    Error_Handler();
 80008c6:	f000 fd0b 	bl	80012e0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008ca:	f003 f8cb 	bl	8003a64 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008ce:	bf00      	nop
 80008d0:	37e0      	adds	r7, #224	; 0xe0
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	00012085 	.word	0x00012085

080008e0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_DFSDM1_Init+0x68>)
 80008e6:	4a19      	ldr	r2, [pc, #100]	; (800094c <MX_DFSDM1_Init+0x6c>)
 80008e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_DFSDM1_Init+0x68>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_DFSDM1_Init+0x68>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_DFSDM1_Init+0x68>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_DFSDM1_Init+0x68>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_DFSDM1_Init+0x68>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_DFSDM1_Init+0x68>)
 800090a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_DFSDM1_Init+0x68>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_DFSDM1_Init+0x68>)
 8000918:	2204      	movs	r2, #4
 800091a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_DFSDM1_Init+0x68>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_DFSDM1_Init+0x68>)
 8000924:	2201      	movs	r2, #1
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_DFSDM1_Init+0x68>)
 800092a:	2200      	movs	r2, #0
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_DFSDM1_Init+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_DFSDM1_Init+0x68>)
 8000936:	f001 f993 	bl	8001c60 <HAL_DFSDM_ChannelInit>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000940:	f000 fcce 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000c0 	.word	0x200000c0
 800094c:	40016020 	.word	0x40016020

08000950 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C2_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C2_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C2_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C2_Init+0x74>)
 800098c:	f001 fc1e 	bl	80021cc <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 fca3 	bl	80012e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C2_Init+0x74>)
 800099e:	f001 fca4 	bl	80022ea <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 fc9a 	bl	80012e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C2_Init+0x74>)
 80009b0:	f001 fce6 	bl	8002380 <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 fc91 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000500 	.word	0x20000500
 80009c8:	40005800 	.word	0x40005800
 80009cc:	10909cec 	.word	0x10909cec

080009d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <MX_QUADSPI_Init+0x48>)
 80009d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 80009e8:	2210      	movs	r2, #16
 80009ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 80009ee:	2217      	movs	r2, #23
 80009f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_QUADSPI_Init+0x44>)
 8000a00:	f001 fed6 	bl	80027b0 <HAL_QSPI_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a0a:	f000 fc69 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200005b0 	.word	0x200005b0
 8000a18:	a0001000 	.word	0xa0001000

08000a1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <MX_SPI3_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a76:	2208      	movs	r2, #8
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_SPI3_Init+0x74>)
 8000a7c:	f003 f9d4 	bl	8003e28 <HAL_SPI_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 fc2b 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000054c 	.word	0x2000054c
 8000a94:	40003c00 	.word	0x40003c00

08000a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000ac2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ac6:	f7ff fdb5 	bl	8000634 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff fd82 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000ad0:	23c0      	movs	r3, #192	; 0xc0
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_USART1_UART_Init+0x98>)
 8000aee:	f003 fdb1 	bl	8004654 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000af2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000af6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b04:	230c      	movs	r3, #12
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_USART1_UART_Init+0x9c>)
 8000b18:	f004 fa3e 	bl	8004f98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART1_UART_Init+0x9c>)
 8000b1e:	f7ff fc40 	bl	80003a2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_USART1_UART_Init+0x9c>)
 8000b24:	f7ff fc2d 	bl	8000382 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3738      	adds	r7, #56	; 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	48000400 	.word	0x48000400
 8000b34:	40013800 	.word	0x40013800

08000b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000b62:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b66:	f7ff fd4d 	bl	8000604 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000b6a:	2008      	movs	r0, #8
 8000b6c:	f7ff fd32 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_USART3_UART_Init+0x9c>)
 8000b90:	f003 fd60 	bl	8004654 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000b94:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b98:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_USART3_UART_Init+0xa0>)
 8000bba:	f004 f9ed 	bl	8004f98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_USART3_UART_Init+0xa0>)
 8000bc0:	f7ff fbef 	bl	80003a2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_USART3_UART_Init+0xa0>)
 8000bc6:	f7ff fbdc 	bl	8000382 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3738      	adds	r7, #56	; 0x38
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	48000c00 	.word	0x48000c00
 8000bd8:	40004800 	.word	0x40004800

08000bdc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2206      	movs	r2, #6
 8000bec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c20:	f001 fbfa 	bl	8002418 <HAL_PCD_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c2a:	f000 fb59 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000f8 	.word	0x200000f8

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8000c5a:	2010      	movs	r0, #16
 8000c5c:	f7ff fcba 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c60:	2004      	movs	r0, #4
 8000c62:	f7ff fcb7 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff fcb4 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fcb1 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000c72:	2008      	movs	r0, #8
 8000c74:	f7ff fcae 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8000c78:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c7c:	48c9      	ldr	r0, [pc, #804]	; (8000fa4 <MX_GPIO_Init+0x36c>)
 8000c7e:	f7ff fc9b 	bl	80005b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin);
 8000c82:	f248 1104 	movw	r1, #33028	; 0x8104
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff fc95 	bl	80005b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c8e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c92:	48c5      	ldr	r0, [pc, #788]	; (8000fa8 <MX_GPIO_Init+0x370>)
 8000c94:	f7ff fc90 	bl	80005b8 <LL_GPIO_ResetOutputPin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8000c98:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c9c:	48c3      	ldr	r0, [pc, #780]	; (8000fac <MX_GPIO_Init+0x374>)
 8000c9e:	f7ff fc8b 	bl	80005b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8000ca2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ca6:	48c2      	ldr	r0, [pc, #776]	; (8000fb0 <MX_GPIO_Init+0x378>)
 8000ca8:	f7ff fc86 	bl	80005b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	48be      	ldr	r0, [pc, #760]	; (8000fac <MX_GPIO_Init+0x374>)
 8000cb2:	f7ff fc73 	bl	800059c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	48bb      	ldr	r0, [pc, #748]	; (8000fa8 <MX_GPIO_Init+0x370>)
 8000cba:	f7ff fc6f 	bl	800059c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	48b8      	ldr	r0, [pc, #736]	; (8000fa4 <MX_GPIO_Init+0x36c>)
 8000cc2:	f7ff fc6b 	bl	800059c <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cc6:	f240 1315 	movw	r3, #277	; 0x115
 8000cca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	48b0      	ldr	r0, [pc, #704]	; (8000fa4 <MX_GPIO_Init+0x36c>)
 8000ce2:	f003 fcb7 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ce6:	233f      	movs	r3, #63	; 0x3f
 8000ce8:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	48ae      	ldr	r0, [pc, #696]	; (8000fb0 <MX_GPIO_Init+0x378>)
 8000cf8:	f003 fcac 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d00:	2302      	movs	r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f003 fc9a 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d20:	f248 1304 	movw	r3, #33028	; 0x8104
 8000d24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d26:	2301      	movs	r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f003 fc89 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d42:	2308      	movs	r3, #8
 8000d44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d46:	2302      	movs	r3, #2
 8000d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f003 fc77 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d66:	2310      	movs	r3, #16
 8000d68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f003 fc6b 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d7e:	23e0      	movs	r3, #224	; 0xe0
 8000d80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d82:	2302      	movs	r3, #2
 8000d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000d92:	2305      	movs	r3, #5
 8000d94:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f003 fc59 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000da2:	2302      	movs	r3, #2
 8000da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	487d      	ldr	r0, [pc, #500]	; (8000fa8 <MX_GPIO_Init+0x370>)
 8000db4:	f003 fc4e 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000db8:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000dbc:	607b      	str	r3, [r7, #4]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4875      	ldr	r0, [pc, #468]	; (8000fa8 <MX_GPIO_Init+0x370>)
 8000dd4:	f003 fc3e 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000dd8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ddc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dde:	2301      	movs	r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	486e      	ldr	r0, [pc, #440]	; (8000fac <MX_GPIO_Init+0x374>)
 8000df4:	f003 fc2e 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000df8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	4867      	ldr	r0, [pc, #412]	; (8000fb0 <MX_GPIO_Init+0x378>)
 8000e14:	f003 fc1e 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	485d      	ldr	r0, [pc, #372]	; (8000fac <MX_GPIO_Init+0x374>)
 8000e36:	f003 fc0d 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e3a:	2378      	movs	r3, #120	; 0x78
 8000e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4855      	ldr	r0, [pc, #340]	; (8000fac <MX_GPIO_Init+0x374>)
 8000e58:	f003 fbfc 	bl	8004654 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e62:	2302      	movs	r3, #2
 8000e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	484b      	ldr	r0, [pc, #300]	; (8000fa8 <MX_GPIO_Init+0x370>)
 8000e7c:	f003 fbea 	bl	8004654 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 8000e80:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000e84:	2004      	movs	r0, #4
 8000e86:	f7ff fab3 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 8000e8a:	494a      	ldr	r1, [pc, #296]	; (8000fb4 <MX_GPIO_Init+0x37c>)
 8000e8c:	2004      	movs	r0, #4
 8000e8e:	f7ff faaf 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 8000e92:	4949      	ldr	r1, [pc, #292]	; (8000fb8 <MX_GPIO_Init+0x380>)
 8000e94:	2004      	movs	r0, #4
 8000e96:	f7ff faab 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000e9a:	4948      	ldr	r1, [pc, #288]	; (8000fbc <MX_GPIO_Init+0x384>)
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff faa7 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000ea2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff faa2 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 8000eac:	4944      	ldr	r1, [pc, #272]	; (8000fc0 <MX_GPIO_Init+0x388>)
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f7ff fa9e 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8000eb4:	4943      	ldr	r1, [pc, #268]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f7ff fa9a 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 8000ebc:	4942      	ldr	r1, [pc, #264]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff fa96 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 8000ec4:	4941      	ldr	r1, [pc, #260]	; (8000fcc <MX_GPIO_Init+0x394>)
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f7ff fa92 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8000ecc:	4940      	ldr	r1, [pc, #256]	; (8000fd0 <MX_GPIO_Init+0x398>)
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fa8e 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8000ed4:	493f      	ldr	r1, [pc, #252]	; (8000fd4 <MX_GPIO_Init+0x39c>)
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff fa8a 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 8000edc:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f7ff fa85 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8000ee6:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000eea:	2004      	movs	r0, #4
 8000eec:	f7ff fa80 	bl	80003f0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f04:	2301      	movs	r3, #1
 8000f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 f95e 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000f14:	2320      	movs	r3, #32
 8000f16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 f94c 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f93a 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f60:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 f927 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	e019      	b.n	8000fd8 <MX_GPIO_Init+0x3a0>
 8000fa4:	48001000 	.word	0x48001000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	48000c00 	.word	0x48000c00
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	00f00001 	.word	0x00f00001
 8000fb8:	0f000001 	.word	0x0f000001
 8000fbc:	00f00003 	.word	0x00f00003
 8000fc0:	0f000002 	.word	0x0f000002
 8000fc4:	f0000002 	.word	0xf0000002
 8000fc8:	0f000003 	.word	0x0f000003
 8000fcc:	f0000003 	.word	0xf0000003
 8000fd0:	f0000001 	.word	0xf0000001
 8000fd4:	000f0002 	.word	0x000f0002
 8000fd8:	f003 f8fa 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8000fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 f8e7 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001002:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001006:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800100c:	2301      	movs	r3, #1
 800100e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001018:	2301      	movs	r3, #1
 800101a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4618      	mov	r0, r3
 8001024:	f003 f8d4 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001032:	2301      	movs	r3, #1
 8001034:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800103e:	2301      	movs	r3, #1
 8001040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f8c1 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800104e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001052:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001058:	2301      	movs	r3, #1
 800105a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001064:	2301      	movs	r3, #1
 8001066:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4618      	mov	r0, r3
 8001070:	f003 f8ae 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800107c:	2301      	movs	r3, #1
 800107e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4618      	mov	r0, r3
 8001094:	f003 f89c 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8001098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010ae:	2301      	movs	r3, #1
 80010b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f889 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80010be:	2304      	movs	r3, #4
 80010c0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 f877 	bl	80041d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4618      	mov	r0, r3
 8001102:	f003 f865 	bl	80041d0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 8001106:	2200      	movs	r2, #0
 8001108:	2108      	movs	r1, #8
 800110a:	485e      	ldr	r0, [pc, #376]	; (8001284 <MX_GPIO_Init+0x64c>)
 800110c:	f7ff f9e3 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	485b      	ldr	r0, [pc, #364]	; (8001284 <MX_GPIO_Init+0x64c>)
 8001116:	f7ff f9de 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 800111a:	2200      	movs	r2, #0
 800111c:	2140      	movs	r1, #64	; 0x40
 800111e:	4859      	ldr	r0, [pc, #356]	; (8001284 <MX_GPIO_Init+0x64c>)
 8001120:	f7ff f9d9 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	4857      	ldr	r0, [pc, #348]	; (8001288 <MX_GPIO_Init+0x650>)
 800112c:	f7ff f9d3 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001130:	2200      	movs	r2, #0
 8001132:	2101      	movs	r1, #1
 8001134:	4855      	ldr	r0, [pc, #340]	; (800128c <MX_GPIO_Init+0x654>)
 8001136:	f7ff f9ce 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001140:	4853      	ldr	r0, [pc, #332]	; (8001290 <MX_GPIO_Init+0x658>)
 8001142:	f7ff f9c8 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114c:	4850      	ldr	r0, [pc, #320]	; (8001290 <MX_GPIO_Init+0x658>)
 800114e:	f7ff f9c2 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001158:	484d      	ldr	r0, [pc, #308]	; (8001290 <MX_GPIO_Init+0x658>)
 800115a:	f7ff f9bc 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001164:	484a      	ldr	r0, [pc, #296]	; (8001290 <MX_GPIO_Init+0x658>)
 8001166:	f7ff f9b6 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 800116a:	2200      	movs	r2, #0
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	4846      	ldr	r0, [pc, #280]	; (8001288 <MX_GPIO_Init+0x650>)
 8001170:	f7ff f9b1 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	4843      	ldr	r0, [pc, #268]	; (8001288 <MX_GPIO_Init+0x650>)
 800117c:	f7ff f9ab 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 8001180:	2200      	movs	r2, #0
 8001182:	2104      	movs	r1, #4
 8001184:	4842      	ldr	r0, [pc, #264]	; (8001290 <MX_GPIO_Init+0x658>)
 8001186:	f7ff f9a6 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 800118a:	2200      	movs	r2, #0
 800118c:	2102      	movs	r1, #2
 800118e:	483d      	ldr	r0, [pc, #244]	; (8001284 <MX_GPIO_Init+0x64c>)
 8001190:	f7ff f9a1 	bl	80004d6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 8001194:	2200      	movs	r2, #0
 8001196:	2108      	movs	r1, #8
 8001198:	483a      	ldr	r0, [pc, #232]	; (8001284 <MX_GPIO_Init+0x64c>)
 800119a:	f7ff f95f 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	4838      	ldr	r0, [pc, #224]	; (8001284 <MX_GPIO_Init+0x64c>)
 80011a4:	f7ff f95a 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2140      	movs	r1, #64	; 0x40
 80011ac:	4835      	ldr	r0, [pc, #212]	; (8001284 <MX_GPIO_Init+0x64c>)
 80011ae:	f7ff f955 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b8:	4833      	ldr	r0, [pc, #204]	; (8001288 <MX_GPIO_Init+0x650>)
 80011ba:	f7ff f94f 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	4832      	ldr	r0, [pc, #200]	; (800128c <MX_GPIO_Init+0x654>)
 80011c4:	f7ff f94a 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ce:	4830      	ldr	r0, [pc, #192]	; (8001290 <MX_GPIO_Init+0x658>)
 80011d0:	f7ff f944 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011da:	482d      	ldr	r0, [pc, #180]	; (8001290 <MX_GPIO_Init+0x658>)
 80011dc:	f7ff f93e 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	482a      	ldr	r0, [pc, #168]	; (8001290 <MX_GPIO_Init+0x658>)
 80011e8:	f7ff f938 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f2:	4827      	ldr	r0, [pc, #156]	; (8001290 <MX_GPIO_Init+0x658>)
 80011f4:	f7ff f932 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	4822      	ldr	r0, [pc, #136]	; (8001288 <MX_GPIO_Init+0x650>)
 80011fe:	f7ff f92d 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <MX_GPIO_Init+0x650>)
 800120a:	f7ff f927 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 800120e:	2200      	movs	r2, #0
 8001210:	2104      	movs	r1, #4
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <MX_GPIO_Init+0x658>)
 8001214:	f7ff f922 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001218:	2200      	movs	r2, #0
 800121a:	2102      	movs	r1, #2
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <MX_GPIO_Init+0x64c>)
 800121e:	f7ff f91d 	bl	800045c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001222:	213f      	movs	r1, #63	; 0x3f
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <MX_GPIO_Init+0x650>)
 8001226:	f7ff f993 	bl	8000550 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D7_GPIO_Port, ARD_D7_Pin);
 800122a:	2110      	movs	r1, #16
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f7ff f98e 	bl	8000550 <LL_GPIO_EnablePinAnalogControl>

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D6_GPIO_Port, ARD_D6_Pin);
 8001234:	2102      	movs	r1, #2
 8001236:	4815      	ldr	r0, [pc, #84]	; (800128c <MX_GPIO_Init+0x654>)
 8001238:	f7ff f98a 	bl	8000550 <LL_GPIO_EnablePinAnalogControl>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800123c:	f7ff f818 	bl	8000270 <__NVIC_GetPriorityGrouping>
 8001240:	4603      	mov	r3, r0
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f868 	bl	800031c <NVIC_EncodePriority>
 800124c:	4603      	mov	r3, r0
 800124e:	4619      	mov	r1, r3
 8001250:	2017      	movs	r0, #23
 8001252:	f7ff f839 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001256:	2017      	movs	r0, #23
 8001258:	f7ff f818 	bl	800028c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800125c:	f7ff f808 	bl	8000270 <__NVIC_GetPriorityGrouping>
 8001260:	4603      	mov	r3, r0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f858 	bl	800031c <NVIC_EncodePriority>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	2028      	movs	r0, #40	; 0x28
 8001272:	f7ff f829 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001276:	2028      	movs	r0, #40	; 0x28
 8001278:	f7ff f808 	bl	800028c <__NVIC_EnableIRQ>

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48001000 	.word	0x48001000
 8001288:	48000800 	.word	0x48000800
 800128c:	48000400 	.word	0x48000400
 8001290:	48000c00 	.word	0x48000c00

08001294 <_write>:

/* USER CODE BEGIN 4 */

int _write( int handle, uint8_t* data, uint32_t size ) {
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  int count = size;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	617b      	str	r3, [r7, #20]
  while( count-- ) {
 80012a4:	e00d      	b.n	80012c2 <_write+0x2e>
      while( !( USART1->ISR & USART_ISR_TXE ) ) {};
 80012a6:	bf00      	nop
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <_write+0x48>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f9      	beq.n	80012a8 <_write+0x14>
      USART1->TDR = *data++;
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_write+0x48>)
 80012be:	b292      	uxth	r2, r2
 80012c0:	851a      	strh	r2, [r3, #40]	; 0x28
  while( count-- ) {
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	617a      	str	r2, [r7, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ec      	bne.n	80012a6 <_write+0x12>
  }
  return size;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40013800 	.word	0x40013800

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_MspInit+0x44>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6613      	str	r3, [r2, #96]	; 0x60
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x44>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_MspInit+0x44>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6593      	str	r3, [r2, #88]	; 0x58
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_MspInit+0x44>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_DFSDM_ChannelMspInit+0x84>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d12d      	bne.n	80013b0 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x88>)
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135e:	6613      	str	r3, [r2, #96]	; 0x60
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x88>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_DFSDM_ChannelMspInit+0x88>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001384:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001396:	2306      	movs	r3, #6
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80013a2:	f000 fd69 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_DFSDM_ChannelMspInit+0x84>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a02      	ldr	r2, [pc, #8]	; (80013b8 <HAL_DFSDM_ChannelMspInit+0x84>)
 80013ae:	6013      	str	r3, [r2, #0]
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000008c 	.word	0x2000008c
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48001000 	.word	0x48001000

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0x7c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d128      	bne.n	8001438 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001404:	2312      	movs	r3, #18
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001410:	2304      	movs	r3, #4
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <HAL_I2C_MspInit+0x84>)
 800141c:	f000 fd2c 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_I2C_MspInit+0x80>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_I2C_MspInit+0x80>)
 8001426:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142a:	6593      	str	r3, [r2, #88]	; 0x58
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_I2C_MspInit+0x80>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40005800 	.word	0x40005800
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_QSPI_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d128      	bne.n	80014c0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_QSPI_MspInit+0x80>)
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <HAL_QSPI_MspInit+0x80>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6513      	str	r3, [r2, #80]	; 0x50
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_QSPI_MspInit+0x80>)
 800147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_QSPI_MspInit+0x80>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_QSPI_MspInit+0x80>)
 800148c:	f043 0310 	orr.w	r3, r3, #16
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_QSPI_MspInit+0x80>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800149e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80014a2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014b0:	230a      	movs	r3, #10
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_QSPI_MspInit+0x84>)
 80014bc:	f000 fcdc 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	a0001000 	.word	0xa0001000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48001000 	.word	0x48001000

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_SPI_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d128      	bne.n	8001548 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_SPI_MspInit+0x80>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a16      	ldr	r2, [pc, #88]	; (8001554 <HAL_SPI_MspInit+0x80>)
 80014fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_SPI_MspInit+0x80>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001526:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001538:	2306      	movs	r3, #6
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_SPI_MspInit+0x84>)
 8001544:	f000 fc98 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40003c00 	.word	0x40003c00
 8001554:	40021000 	.word	0x40021000
 8001558:	48000800 	.word	0x48000800

0800155c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800157c:	d154      	bne.n	8001628 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a2b      	ldr	r2, [pc, #172]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f000 fc63 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015c4:	230a      	movs	r3, #10
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f000 fc51 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 80015dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d114      	bne.n	8001624 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6593      	str	r3, [r2, #88]	; 0x58
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001612:	f001 f8bd 	bl	8002790 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_PCD_MspInit+0xd4>)
 800161c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001620:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001622:	e001      	b.n	8001628 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001624:	f001 f8b4 	bl	8002790 <HAL_PWREx_EnableVddUSB>
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	d101      	bne.n	800164e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40010400 	.word	0x40010400

08001660 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6153      	str	r3, [r2, #20]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40010400 	.word	0x40010400

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f99e 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 80016d8:	2020      	movs	r0, #32
 80016da:	f7ff ffab 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80016e4:	2020      	movs	r0, #32
 80016e6:	f7ff ffbb 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 80016ea:	2040      	movs	r0, #64	; 0x40
 80016ec:	f7ff ffa2 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80016f6:	2040      	movs	r0, #64	; 0x40
 80016f8:	f7ff ffb2 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 80016fc:	2080      	movs	r0, #128	; 0x80
 80016fe:	f7ff ff99 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001708:	2080      	movs	r0, #128	; 0x80
 800170a:	f7ff ffa9 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 800170e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001712:	f7ff ff8f 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 800171c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001720:	f7ff ff9e 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 800172c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001730:	f7ff ff80 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 800173a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800173e:	f7ff ff8f 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001742:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001746:	f7ff ff75 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001750:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001754:	f7ff ff84 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800175c:	f7ff ff6a 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001766:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800176a:	f7ff ff79 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800176e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001772:	f7ff ff5f 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800177c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001780:	f7ff ff6e 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001784:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001788:	f7ff ff54 	bl	8001634 <LL_EXTI_IsActiveFlag_0_31>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001792:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001796:	f7ff ff63 	bl	8001660 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}

0800179e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00a      	b.n	80017c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017b0:	f3af 8000 	nop.w
 80017b4:	4601      	mov	r1, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60ba      	str	r2, [r7, #8]
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf0      	blt.n	80017b0 <_read+0x12>
	}

return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001800:	605a      	str	r2, [r3, #4]
	return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
	return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f003 fe78 	bl	8005564 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20018000 	.word	0x20018000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000090 	.word	0x20000090
 80018a8:	20000608 	.word	0x20000608

080018ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <SystemInit+0x5c>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <SystemInit+0x5c>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <SystemInit+0x60>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <SystemInit+0x60>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <SystemInit+0x60>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <SystemInit+0x60>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a0d      	ldr	r2, [pc, #52]	; (800190c <SystemInit+0x60>)
 80018d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80018dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80018e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <SystemInit+0x60>)
 80018e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <SystemInit+0x60>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <SystemInit+0x60>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <SystemInit+0x60>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	40021000 	.word	0x40021000

08001910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001914:	f7ff ffca 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001918:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800191a:	e003      	b.n	8001924 <LoopCopyDataInit>

0800191c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800191e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001920:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001922:	3104      	adds	r1, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001924:	480a      	ldr	r0, [pc, #40]	; (8001950 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001928:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800192a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800192c:	d3f6      	bcc.n	800191c <CopyDataInit>
	ldr	r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001930:	e002      	b.n	8001938 <LoopFillZerobss>

08001932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001932:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001934:	f842 3b04 	str.w	r3, [r2], #4

08001938 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <LoopForever+0x16>)
	cmp	r2, r3
 800193a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800193c:	d3f9      	bcc.n	8001932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f003 fe17 	bl	8005570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001942:	f7fe febf 	bl	80006c4 <main>

08001946 <LoopForever>:

LoopForever:
    b LoopForever
 8001946:	e7fe      	b.n	8001946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001948:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800194c:	0800657c 	.word	0x0800657c
	ldr	r0, =_sdata
 8001950:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001954:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001958:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800195c:	20000608 	.word	0x20000608

08001960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC1_2_IRQHandler>

08001962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 f943 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f80e 	bl	8001994 <HAL_InitTick>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	e001      	b.n	8001988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001984:	f7ff fcb2 	bl	80012ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001988:	79fb      	ldrb	r3, [r7, #7]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_InitTick+0x6c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_InitTick+0x70>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_InitTick+0x6c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f941 	bl	8001c46 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d809      	bhi.n	80019e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f919 	bl	8001c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_InitTick+0x74>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e004      	b.n	80019f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e001      	b.n	80019f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	200005f4 	.word	0x200005f4

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200005f4 	.word	0x200005f4

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008

08001a94 <__NVIC_SetPriorityGrouping>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_SetPriority>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff47 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff5c 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffb0 	bl	8001bb4 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0ac      	b.n	8001dcc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f8b2 	bl	8001de0 <DFSDM_GetChannelFromInstance>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4a55      	ldr	r2, [pc, #340]	; (8001dd4 <HAL_DFSDM_ChannelInit+0x174>)
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e09f      	b.n	8001dcc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fb51 	bl	8001334 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001c92:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <HAL_DFSDM_ChannelInit+0x178>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_DFSDM_ChannelInit+0x178>)
 8001c9a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001c9c:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_DFSDM_ChannelInit+0x178>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d125      	bne.n	8001cf0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001caa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cae:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4948      	ldr	r1, [pc, #288]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cc4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001cc8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	791b      	ldrb	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d108      	bne.n	8001ce4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001cd2:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	493f      	ldr	r1, [pc, #252]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3c      	ldr	r2, [pc, #240]	; (8001ddc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cee:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001cfe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d0e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001d14:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 020f 	bic.w	r2, r2, #15
 8001d2c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001d54:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f002 0207 	and.w	r2, r2, #7
 8001d80:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dac:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f810 	bl	8001de0 <DFSDM_GetChannelFromInstance>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_DFSDM_ChannelInit+0x174>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000098 	.word	0x20000098
 8001dd8:	20000094 	.word	0x20000094
 8001ddc:	40016000 	.word	0x40016000

08001de0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <DFSDM_GetChannelFromInstance+0x7c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d102      	bne.n	8001df6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e02b      	b.n	8001e4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <DFSDM_GetChannelFromInstance+0x80>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d102      	bne.n	8001e04 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e024      	b.n	8001e4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <DFSDM_GetChannelFromInstance+0x84>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d102      	bne.n	8001e12 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e01d      	b.n	8001e4e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <DFSDM_GetChannelFromInstance+0x88>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d102      	bne.n	8001e20 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e016      	b.n	8001e4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <DFSDM_GetChannelFromInstance+0x8c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d102      	bne.n	8001e2e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e00f      	b.n	8001e4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <DFSDM_GetChannelFromInstance+0x90>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d102      	bne.n	8001e3c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001e36:	2306      	movs	r3, #6
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e008      	b.n	8001e4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <DFSDM_GetChannelFromInstance+0x94>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001e44:	2307      	movs	r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e001      	b.n	8001e4e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40016000 	.word	0x40016000
 8001e60:	40016020 	.word	0x40016020
 8001e64:	40016040 	.word	0x40016040
 8001e68:	40016080 	.word	0x40016080
 8001e6c:	400160a0 	.word	0x400160a0
 8001e70:	400160c0 	.word	0x400160c0
 8001e74:	400160e0 	.word	0x400160e0

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e17f      	b.n	8002188 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8171 	beq.w	8002182 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_GPIO_Init+0x48>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d118      	bne.n	8001f60 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x128>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	6939      	ldr	r1, [r7, #16]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80ac 	beq.w	8002182 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_GPIO_Init+0x330>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	4a5e      	ldr	r2, [pc, #376]	; (80021a8 <HAL_GPIO_Init+0x330>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6613      	str	r3, [r2, #96]	; 0x60
 8002036:	4b5c      	ldr	r3, [pc, #368]	; (80021a8 <HAL_GPIO_Init+0x330>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002042:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_Init+0x242>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <HAL_GPIO_Init+0x338>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_Init+0x23e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_GPIO_Init+0x33c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x23a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_GPIO_Init+0x340>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x236>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x344>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x232>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4b      	ldr	r2, [pc, #300]	; (80021c0 <HAL_GPIO_Init+0x348>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x22e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <HAL_GPIO_Init+0x34c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x22a>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020ba:	2300      	movs	r3, #0
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020cc:	4937      	ldr	r1, [pc, #220]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_GPIO_Init+0x350>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fe:	4a32      	ldr	r2, [pc, #200]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f47f ae78 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48001000 	.word	0x48001000
 80021c0:	48001400 	.word	0x48001400
 80021c4:	48001800 	.word	0x48001800
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e081      	b.n	80022e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff f8e6 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	; 0x24
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800222c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e006      	b.n	8002254 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002252:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d104      	bne.n	8002266 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002278:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002288:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	ea42 0103 	orr.w	r1, r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	021a      	lsls	r2, r3, #8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69d9      	ldr	r1, [r3, #28]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d138      	bne.n	8002372 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800230a:	2302      	movs	r3, #2
 800230c:	e032      	b.n	8002374 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2224      	movs	r2, #36	; 0x24
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800233c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b20      	cmp	r3, #32
 8002394:	d139      	bne.n	800240a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e033      	b.n	800240c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800240a:	2302      	movs	r3, #2
  }
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	b08f      	sub	sp, #60	; 0x3c
 800241c:	af0a      	add	r7, sp, #40	; 0x28
 800241e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e116      	b.n	8002658 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d106      	bne.n	800244a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff f889 	bl	800155c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f002 fe3d 	bl	80050e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	687e      	ldr	r6, [r7, #4]
 8002476:	466d      	mov	r5, sp
 8002478:	f106 0410 	add.w	r4, r6, #16
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002488:	e885 0003 	stmia.w	r5, {r0, r1}
 800248c:	1d33      	adds	r3, r6, #4
 800248e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f002 fdfd 	bl	8005090 <USB_CoreInit>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0d7      	b.n	8002658 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fe2b 	bl	800510a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e04a      	b.n	8002550 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	333d      	adds	r3, #61	; 0x3d
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	333c      	adds	r3, #60	; 0x3c
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	b298      	uxth	r0, r3
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	3342      	adds	r3, #66	; 0x42
 80024f6:	4602      	mov	r2, r0
 80024f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	333f      	adds	r3, #63	; 0x3f
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3344      	adds	r3, #68	; 0x44
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3348      	adds	r3, #72	; 0x48
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	3350      	adds	r3, #80	; 0x50
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3af      	bcc.n	80024ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e044      	b.n	80025ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	3301      	adds	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3b5      	bcc.n	8002560 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	687e      	ldr	r6, [r7, #4]
 80025fc:	466d      	mov	r5, sp
 80025fe:	f106 0410 	add.w	r4, r6, #16
 8002602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800260e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002612:	1d33      	adds	r3, r6, #4
 8002614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002616:	6838      	ldr	r0, [r7, #0]
 8002618:	f002 fda2 	bl	8005160 <USB_DevInit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e014      	b.n	8002658 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f80a 	bl	8002660 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 ff32 	bl	80054ba <USB_DevDisconnect>

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002660 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002692:	f043 0303 	orr.w	r3, r3, #3
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40007000 	.word	0x40007000

080026c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40007000 	.word	0x40007000

080026e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f2:	d130      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f4:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002700:	d038      	beq.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2232      	movs	r2, #50	; 0x32
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0c9b      	lsrs	r3, r3, #18
 8002724:	3301      	adds	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002728:	e002      	b.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3b01      	subs	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273c:	d102      	bne.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x60>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f2      	bne.n	800272a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d110      	bne.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e00f      	b.n	8002776 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002762:	d007      	beq.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800276c:	4a05      	ldr	r2, [pc, #20]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002772:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40007000 	.word	0x40007000
 8002788:	20000000 	.word	0x20000000
 800278c:	431bde83 	.word	0x431bde83

08002790 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	6053      	str	r3, [r2, #4]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40007000 	.word	0x40007000

080027b0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff f93c 	bl	8001a34 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e063      	b.n	8002890 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe fe35 	bl	800144c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80027e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f858 	bl	800289c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	021a      	lsls	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	2120      	movs	r1, #32
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f850 	bl	80028b8 <QSPI_WaitFlagStateUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d131      	bne.n	8002886 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800282c:	f023 0310 	bic.w	r3, r3, #16
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6852      	ldr	r2, [r2, #4]
 8002834:	0611      	lsls	r1, r2, #24
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68d2      	ldr	r2, [r2, #12]
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_QSPI_Init+0xe8>)
 800284c:	4013      	ands	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6912      	ldr	r2, [r2, #16]
 8002852:	0411      	lsls	r1, r2, #16
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6952      	ldr	r2, [r2, #20]
 8002858:	4311      	orrs	r1, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6992      	ldr	r2, [r2, #24]
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	430b      	orrs	r3, r1
 8002866:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800288e:	7afb      	ldrb	r3, [r7, #11]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	ffe0f8fe 	.word	0xffe0f8fe

0800289c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80028c8:	e01a      	b.n	8002900 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d016      	beq.n	8002900 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7ff f8af 	bl	8001a34 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2204      	movs	r2, #4
 80028ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e00e      	b.n	800291e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	429a      	cmp	r2, r3
 800291a:	d1d6      	bne.n	80028ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e3d4      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293a:	4ba1      	ldr	r3, [pc, #644]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002944:	4b9e      	ldr	r3, [pc, #632]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80e4 	beq.w	8002b24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_RCC_OscConfig+0x4a>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	f040 808b 	bne.w	8002a80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 8087 	bne.w	8002a80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002972:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e3ac      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1a      	ldr	r2, [r3, #32]
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_RCC_OscConfig+0x7c>
 800299a:	4b89      	ldr	r3, [pc, #548]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a2:	e005      	b.n	80029b0 <HAL_RCC_OscConfig+0x88>
 80029a4:	4b86      	ldr	r3, [pc, #536]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d223      	bcs.n	80029fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fd09 	bl	80033d0 <RCC_SetFlashLatencyFromMSIRange>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e38d      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029c8:	4b7d      	ldr	r3, [pc, #500]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7c      	ldr	r2, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b7a      	ldr	r3, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4977      	ldr	r1, [pc, #476]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	4972      	ldr	r1, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
 80029fa:	e025      	b.n	8002a48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029fc:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6f      	ldr	r2, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b6d      	ldr	r3, [pc, #436]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	496a      	ldr	r1, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a1a:	4b69      	ldr	r3, [pc, #420]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	4965      	ldr	r1, [pc, #404]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fcc9 	bl	80033d0 <RCC_SetFlashLatencyFromMSIRange>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e34d      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a48:	f000 fc36 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b5c      	ldr	r3, [pc, #368]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	495a      	ldr	r1, [pc, #360]	; (8002bc4 <HAL_RCC_OscConfig+0x29c>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_OscConfig+0x2a0>)
 8002a66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a68:	4b58      	ldr	r3, [pc, #352]	; (8002bcc <HAL_RCC_OscConfig+0x2a4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe ff91 	bl	8001994 <HAL_InitTick>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d052      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	e331      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d032      	beq.n	8002aee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4c      	ldr	r2, [pc, #304]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a94:	f7fe ffce 	bl	8001a34 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9c:	f7fe ffca 	bl	8001a34 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e31a      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aae:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ac0:	f043 0308 	orr.w	r3, r3, #8
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	493b      	ldr	r1, [pc, #236]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	4936      	ldr	r1, [pc, #216]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
 8002aec:	e01a      	b.n	8002b24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aee:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002afa:	f7fe ff9b 	bl	8001a34 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b02:	f7fe ff97 	bl	8001a34 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e2e7      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b14:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x1da>
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d074      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x21a>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d10e      	bne.n	8002b5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d10b      	bne.n	8002b5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d064      	beq.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d160      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e2c4      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x24a>
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e01d      	b.n	8002bae <HAL_RCC_OscConfig+0x286>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7a:	d10c      	bne.n	8002b96 <HAL_RCC_OscConfig+0x26e>
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e00b      	b.n	8002bae <HAL_RCC_OscConfig+0x286>
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_RCC_OscConfig+0x298>)
 8002ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe ff3d 	bl	8001a34 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbc:	e011      	b.n	8002be2 <HAL_RCC_OscConfig+0x2ba>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08006494 	.word	0x08006494
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe ff30 	bl	8001a34 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e280      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be2:	4baf      	ldr	r3, [pc, #700]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x2a8>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe ff20 	bl	8001a34 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe ff1c 	bl	8001a34 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e26c      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0a:	4ba5      	ldr	r3, [pc, #660]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x2d0>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d060      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_OscConfig+0x310>
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d119      	bne.n	8002c66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d116      	bne.n	8002c66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c38:	4b99      	ldr	r3, [pc, #612]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x328>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e249      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b93      	ldr	r3, [pc, #588]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	4990      	ldr	r1, [pc, #576]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	e040      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d023      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c6e:	4b8c      	ldr	r3, [pc, #560]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a8b      	ldr	r2, [pc, #556]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fedb 	bl	8001a34 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c82:	f7fe fed7 	bl	8001a34 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e227      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c94:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	4b7f      	ldr	r3, [pc, #508]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	497c      	ldr	r1, [pc, #496]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
 8002cb4:	e018      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb6:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a79      	ldr	r2, [pc, #484]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7fe feb7 	bl	8001a34 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cca:	f7fe feb3 	bl	8001a34 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e203      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cdc:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d03c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01c      	beq.n	8002d36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfc:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d02:	4a67      	ldr	r2, [pc, #412]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fe92 	bl	8001a34 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d14:	f7fe fe8e 	bl	8001a34 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1de      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d26:	4b5e      	ldr	r3, [pc, #376]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <HAL_RCC_OscConfig+0x3ec>
 8002d34:	e01b      	b.n	8002d6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d36:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fe fe75 	bl	8001a34 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fe71 	bl	8001a34 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1c1      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d60:	4b4f      	ldr	r3, [pc, #316]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ef      	bne.n	8002d4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80a6 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d80:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	4a43      	ldr	r2, [pc, #268]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6593      	str	r3, [r2, #88]	; 0x58
 8002d98:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da4:	2301      	movs	r3, #1
 8002da6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da8:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <HAL_RCC_OscConfig+0x57c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d118      	bne.n	8002de6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x57c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3a      	ldr	r2, [pc, #232]	; (8002ea4 <HAL_RCC_OscConfig+0x57c>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fe38 	bl	8001a34 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc8:	f7fe fe34 	bl	8001a34 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e184      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_RCC_OscConfig+0x57c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4d8>
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dfe:	e024      	b.n	8002e4a <HAL_RCC_OscConfig+0x522>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d110      	bne.n	8002e2a <HAL_RCC_OscConfig+0x502>
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e28:	e00f      	b.n	8002e4a <HAL_RCC_OscConfig+0x522>
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e42:	f023 0304 	bic.w	r3, r3, #4
 8002e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe fdef 	bl	8001a34 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe fdeb 	bl	8001a34 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e139      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_OscConfig+0x578>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ed      	beq.n	8002e5a <HAL_RCC_OscConfig+0x532>
 8002e7e:	e01a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fdd8 	bl	8001a34 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe fdd4 	bl	8001a34 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d906      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e122      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea8:	4b90      	ldr	r3, [pc, #576]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e8      	bne.n	8002e88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb6:	7ffb      	ldrb	r3, [r7, #31]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4b8b      	ldr	r3, [pc, #556]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	4a8a      	ldr	r2, [pc, #552]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 8108 	beq.w	80030e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	f040 80d0 	bne.w	800307c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002edc:	4b83      	ldr	r3, [pc, #524]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 0203 	and.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d130      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	3b01      	subs	r3, #1
 8002efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d127      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d11f      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f1c:	2a07      	cmp	r2, #7
 8002f1e:	bf14      	ite	ne
 8002f20:	2201      	movne	r2, #1
 8002f22:	2200      	moveq	r2, #0
 8002f24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d113      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	3b01      	subs	r3, #1
 8002f38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d06e      	beq.n	8003030 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d069      	beq.n	800302c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b7      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f74:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5c      	ldr	r2, [pc, #368]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f80:	f7fe fd58 	bl	8001a34 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fd54 	bl	8001a34 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0a4      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9a:	4b54      	ldr	r3, [pc, #336]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa6:	4b51      	ldr	r3, [pc, #324]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <HAL_RCC_OscConfig+0x7c8>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fc0:	0212      	lsls	r2, r2, #8
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fc8:	0852      	lsrs	r2, r2, #1
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	0552      	lsls	r2, r2, #21
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fd4:	0852      	lsrs	r2, r2, #1
 8002fd6:	3a01      	subs	r2, #1
 8002fd8:	0652      	lsls	r2, r2, #25
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fe0:	0912      	lsrs	r2, r2, #4
 8002fe2:	0452      	lsls	r2, r2, #17
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	4941      	ldr	r1, [pc, #260]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fec:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3e      	ldr	r2, [pc, #248]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a3b      	ldr	r2, [pc, #236]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003002:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003004:	f7fe fd16 	bl	8001a34 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fd12 	bl	8001a34 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e062      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800302a:	e05a      	b.n	80030e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e059      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003030:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d152      	bne.n	80030e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800303c:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8003042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003046:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a27      	ldr	r2, [pc, #156]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003052:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003054:	f7fe fcee 	bl	8001a34 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fcea 	bl	8001a34 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e03a      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x734>
 800307a:	e032      	b.n	80030e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d02d      	beq.n	80030de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8003088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 80030a0:	f023 0303 	bic.w	r3, r3, #3
 80030a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 80030ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe fcbd 	bl	8001a34 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe fcb9 	bl	8001a34 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e009      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCC_OscConfig+0x7c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x796>
 80030dc:	e001      	b.n	80030e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	f99d808c 	.word	0xf99d808c

080030f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0c8      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003108:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d910      	bls.n	8003138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 0207 	bic.w	r2, r3, #7
 800311e:	4961      	ldr	r1, [pc, #388]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b5f      	ldr	r3, [pc, #380]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b0      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d04c      	beq.n	80031de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d107      	bne.n	800315c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314c:	4b56      	ldr	r3, [pc, #344]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d121      	bne.n	800319c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e09e      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d107      	bne.n	8003174 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e092      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800317c:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e086      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318c:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e07e      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 0203 	bic.w	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	493f      	ldr	r1, [pc, #252]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ae:	f7fe fc41 	bl	8001a34 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b6:	f7fe fc3d 	bl	8001a34 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e066      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 020c 	and.w	r2, r3, #12
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	429a      	cmp	r2, r3
 80031dc:	d1eb      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	492c      	ldr	r1, [pc, #176]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d210      	bcs.n	800322c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 0207 	bic.w	r2, r3, #7
 8003212:	4924      	ldr	r1, [pc, #144]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1b0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e036      	b.n	800329a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4918      	ldr	r1, [pc, #96]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4910      	ldr	r1, [pc, #64]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326a:	f000 f825 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800326e:	4602      	mov	r2, r0
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	490c      	ldr	r1, [pc, #48]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fb80 	bl	8001994 <HAL_InitTick>
 8003294:	4603      	mov	r3, r0
 8003296:	72fb      	strb	r3, [r7, #11]

  return status;
 8003298:	7afb      	ldrb	r3, [r7, #11]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08006494 	.word	0x08006494
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c6:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d121      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d11e      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003314:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10d      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d102      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e004      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d101      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_RCC_GetSysClockFreq+0x114>)
 800333e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d134      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0xa6>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d003      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0xac>
 800335c:	e005      	b.n	800336a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003360:	617b      	str	r3, [r7, #20]
      break;
 8003362:	e005      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003366:	617b      	str	r3, [r7, #20]
      break;
 8003368:	e002      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	617b      	str	r3, [r7, #20]
      break;
 800336e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	3301      	adds	r3, #1
 800337c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	fb02 f203 	mul.w	r2, r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	0e5b      	lsrs	r3, r3, #25
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	3301      	adds	r3, #1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033b0:	69bb      	ldr	r3, [r7, #24]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	080064ac 	.word	0x080064ac
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033e8:	f7ff f96e 	bl	80026c8 <HAL_PWREx_GetVoltageRange>
 80033ec:	6178      	str	r0, [r7, #20]
 80033ee:	e014      	b.n	800341a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4a24      	ldr	r2, [pc, #144]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003408:	f7ff f95e 	bl	80026c8 <HAL_PWREx_GetVoltageRange>
 800340c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003418:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003420:	d10b      	bne.n	800343a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	d919      	bls.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2ba0      	cmp	r3, #160	; 0xa0
 800342c:	d902      	bls.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800342e:	2302      	movs	r3, #2
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e013      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003434:	2301      	movs	r3, #1
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e010      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d902      	bls.n	8003446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003440:	2303      	movs	r3, #3
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	e00a      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b80      	cmp	r3, #128	; 0x80
 800344a:	d102      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800344c:	2302      	movs	r3, #2
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e004      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b70      	cmp	r3, #112	; 0x70
 8003456:	d101      	bne.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003458:	2301      	movs	r3, #1
 800345a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 0207 	bic.w	r2, r3, #7
 8003464:	4909      	ldr	r1, [pc, #36]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	40022000 	.word	0x40022000

08003490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003498:	2300      	movs	r3, #0
 800349a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800349c:	2300      	movs	r3, #0
 800349e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d041      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034b4:	d02a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ba:	d824      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034c6:	d81e      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d0:	d010      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034d2:	e018      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034d4:	4b86      	ldr	r3, [pc, #536]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a85      	ldr	r2, [pc, #532]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e0:	e015      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 facb 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3320      	adds	r3, #32
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fbb6 	bl	8003c6c <RCCEx_PLLSAI2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	74fb      	strb	r3, [r7, #19]
      break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003514:	4b76      	ldr	r3, [pc, #472]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003522:	4973      	ldr	r1, [pc, #460]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d041      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003540:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003544:	d02a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003546:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800354a:	d824      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800354c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003550:	d008      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003556:	d81e      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003560:	d010      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003562:	e018      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003564:	4b62      	ldr	r3, [pc, #392]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a61      	ldr	r2, [pc, #388]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003570:	e015      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fa83 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003582:	e00c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3320      	adds	r3, #32
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fb6e 	bl	8003c6c <RCCEx_PLLSAI2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	74fb      	strb	r3, [r7, #19]
      break;
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800359c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035a4:	4b52      	ldr	r3, [pc, #328]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b2:	494f      	ldr	r1, [pc, #316]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ba:	e001      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a0 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d2:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003600:	2301      	movs	r3, #1
 8003602:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003610:	f7fe fa10 	bl	8001a34 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003616:	e009      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003618:	f7fe fa0c 	bl	8001a34 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	74fb      	strb	r3, [r7, #19]
        break;
 800362a:	e005      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ef      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d15c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003648:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01f      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d019      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe f9cb 	bl	8001a34 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e00b      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe f9c7 	bl	8001a34 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d902      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	74fb      	strb	r3, [r7, #19]
            break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ec      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036e6:	e009      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	74bb      	strb	r3, [r7, #18]
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fc:	7c7b      	ldrb	r3, [r7, #17]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b9e      	ldr	r3, [pc, #632]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a9d      	ldr	r2, [pc, #628]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800371a:	4b98      	ldr	r3, [pc, #608]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f023 0203 	bic.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	4994      	ldr	r1, [pc, #592]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373c:	4b8f      	ldr	r3, [pc, #572]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f023 020c 	bic.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	498c      	ldr	r1, [pc, #560]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375e:	4b87      	ldr	r3, [pc, #540]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4983      	ldr	r1, [pc, #524]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	497b      	ldr	r1, [pc, #492]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	4972      	ldr	r1, [pc, #456]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c4:	4b6d      	ldr	r3, [pc, #436]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	496a      	ldr	r1, [pc, #424]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	4961      	ldr	r1, [pc, #388]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003808:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	4959      	ldr	r1, [pc, #356]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	4950      	ldr	r1, [pc, #320]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	4948      	ldr	r1, [pc, #288]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	493f      	ldr	r1, [pc, #252]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d028      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389e:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ae:	d106      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a31      	ldr	r2, [pc, #196]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ba:	60d3      	str	r3, [r2, #12]
 80038bc:	e011      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f8d8 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d028      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038ee:	4b23      	ldr	r3, [pc, #140]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	491f      	ldr	r1, [pc, #124]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d106      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4a1a      	ldr	r2, [pc, #104]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003918:	60d3      	str	r3, [r2, #12]
 800391a:	e011      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f8a9 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02b      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d109      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a02      	ldr	r2, [pc, #8]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003976:	60d3      	str	r3, [r2, #12]
 8003978:	e014      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f877 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039be:	4928      	ldr	r1, [pc, #160]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ce:	d10d      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2102      	movs	r1, #2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f854 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d014      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3320      	adds	r3, #32
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f935 	bl	8003c6c <RCCEx_PLLSAI2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a06:	7cfb      	ldrb	r3, [r7, #19]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a1c:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	4904      	ldr	r1, [pc, #16]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000

08003a84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a92:	4b75      	ldr	r3, [pc, #468]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a9e:	4b72      	ldr	r3, [pc, #456]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0203 	and.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d10d      	bne.n	8003aca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ab6:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d047      	beq.n	8003b5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e044      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d018      	beq.n	8003b0a <RCCEx_PLLSAI1_Config+0x86>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d825      	bhi.n	8003b28 <RCCEx_PLLSAI1_Config+0xa4>
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d002      	beq.n	8003ae6 <RCCEx_PLLSAI1_Config+0x62>
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d009      	beq.n	8003af8 <RCCEx_PLLSAI1_Config+0x74>
 8003ae4:	e020      	b.n	8003b28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ae6:	4b60      	ldr	r3, [pc, #384]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11d      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af6:	e01a      	b.n	8003b2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af8:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b08:	e013      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b0a:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10f      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b16:	4b54      	ldr	r3, [pc, #336]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b26:	e006      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	e004      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6819      	ldr	r1, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	430b      	orrs	r3, r1
 8003b54:	4944      	ldr	r1, [pc, #272]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d17d      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b60:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fd ff62 	bl	8001a34 <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b72:	e009      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b74:	f7fd ff5e 	bl	8001a34 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	73fb      	strb	r3, [r7, #15]
        break;
 8003b86:	e005      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b88:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ef      	bne.n	8003b74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d160      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d111      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba0:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6892      	ldr	r2, [r2, #8]
 8003bb0:	0211      	lsls	r1, r2, #8
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68d2      	ldr	r2, [r2, #12]
 8003bb6:	0912      	lsrs	r2, r2, #4
 8003bb8:	0452      	lsls	r2, r2, #17
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	492a      	ldr	r1, [pc, #168]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	610b      	str	r3, [r1, #16]
 8003bc2:	e027      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d112      	bne.n	8003bf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bca:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	0211      	lsls	r1, r2, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6912      	ldr	r2, [r2, #16]
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	3a01      	subs	r2, #1
 8003be4:	0552      	lsls	r2, r2, #21
 8003be6:	430a      	orrs	r2, r1
 8003be8:	491f      	ldr	r1, [pc, #124]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
 8003bee:	e011      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6892      	ldr	r2, [r2, #8]
 8003c00:	0211      	lsls	r1, r2, #8
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6952      	ldr	r2, [r2, #20]
 8003c06:	0852      	lsrs	r2, r2, #1
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	0652      	lsls	r2, r2, #25
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	4916      	ldr	r1, [pc, #88]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd ff08 	bl	8001a34 <HAL_GetTick>
 8003c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c26:	e009      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c28:	f7fd ff04 	bl	8001a34 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d902      	bls.n	8003c3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	73fb      	strb	r3, [r7, #15]
          break;
 8003c3a:	e005      	b.n	8003c48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ef      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	4904      	ldr	r1, [pc, #16]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000

08003c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c86:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0203 	and.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10d      	bne.n	8003cb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
       ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c9e:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
       ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d047      	beq.n	8003d42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e044      	b.n	8003d42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d018      	beq.n	8003cf2 <RCCEx_PLLSAI2_Config+0x86>
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d825      	bhi.n	8003d10 <RCCEx_PLLSAI2_Config+0xa4>
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d002      	beq.n	8003cce <RCCEx_PLLSAI2_Config+0x62>
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d009      	beq.n	8003ce0 <RCCEx_PLLSAI2_Config+0x74>
 8003ccc:	e020      	b.n	8003d10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cce:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11d      	bne.n	8003d16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e01a      	b.n	8003d16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d116      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf0:	e013      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cfe:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d0e:	e006      	b.n	8003d1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e004      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	4939      	ldr	r1, [pc, #228]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d167      	bne.n	8003e18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d48:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a35      	ldr	r2, [pc, #212]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fd fe6e 	bl	8001a34 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d5a:	e009      	b.n	8003d70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d5c:	f7fd fe6a 	bl	8001a34 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d6e:	e005      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d70:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ef      	bne.n	8003d5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d14a      	bne.n	8003e18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d111      	bne.n	8003dac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	0211      	lsls	r1, r2, #8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0912      	lsrs	r2, r2, #4
 8003da0:	0452      	lsls	r2, r2, #17
 8003da2:	430a      	orrs	r2, r1
 8003da4:	491f      	ldr	r1, [pc, #124]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	614b      	str	r3, [r1, #20]
 8003daa:	e011      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003db4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6892      	ldr	r2, [r2, #8]
 8003dbc:	0211      	lsls	r1, r2, #8
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6912      	ldr	r2, [r2, #16]
 8003dc2:	0852      	lsrs	r2, r2, #1
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	0652      	lsls	r2, r2, #25
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	4916      	ldr	r1, [pc, #88]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fd fe2a 	bl	8001a34 <HAL_GetTick>
 8003de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003de2:	e009      	b.n	8003df8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de4:	f7fd fe26 	bl	8001a34 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d902      	bls.n	8003df8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	73fb      	strb	r3, [r7, #15]
          break;
 8003df6:	e005      	b.n	8003e04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ef      	beq.n	8003de4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4904      	ldr	r1, [pc, #16]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e095      	b.n	8003f66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4a:	d009      	beq.n	8003e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	61da      	str	r2, [r3, #28]
 8003e52:	e005      	b.n	8003e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd fb2a 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea0:	d902      	bls.n	8003ea8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e002      	b.n	8003eae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003eb6:	d007      	beq.n	8003ec8 <HAL_SPI_Init+0xa0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	ea42 0103 	orr.w	r1, r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	0c1b      	lsrs	r3, r3, #16
 8003f24:	f003 0204 	and.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f44:	ea42 0103 	orr.w	r1, r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <LL_EXTI_EnableIT_0_31>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4904      	ldr	r1, [pc, #16]	; (8003f90 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40010400 	.word	0x40010400

08003f94 <LL_EXTI_EnableIT_32_63>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <LL_EXTI_EnableIT_32_63+0x20>)
 8003f9e:	6a1a      	ldr	r2, [r3, #32]
 8003fa0:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <LL_EXTI_EnableIT_32_63+0x20>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	620b      	str	r3, [r1, #32]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40010400 	.word	0x40010400

08003fb8 <LL_EXTI_DisableIT_0_31>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <LL_EXTI_DisableIT_0_31+0x24>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	4904      	ldr	r1, [pc, #16]	; (8003fdc <LL_EXTI_DisableIT_0_31+0x24>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <LL_EXTI_DisableIT_32_63>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <LL_EXTI_DisableIT_32_63+0x24>)
 8003fea:	6a1a      	ldr	r2, [r3, #32]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4904      	ldr	r1, [pc, #16]	; (8004004 <LL_EXTI_DisableIT_32_63+0x24>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	620b      	str	r3, [r1, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010400 	.word	0x40010400

08004008 <LL_EXTI_EnableEvent_0_31>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	4904      	ldr	r1, [pc, #16]	; (8004028 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4313      	orrs	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010400 	.word	0x40010400

0800402c <LL_EXTI_EnableEvent_32_63>:
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <LL_EXTI_EnableEvent_32_63+0x20>)
 8004036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004038:	4904      	ldr	r1, [pc, #16]	; (800404c <LL_EXTI_EnableEvent_32_63+0x20>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40010400 	.word	0x40010400

08004050 <LL_EXTI_DisableEvent_0_31>:
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <LL_EXTI_DisableEvent_0_31+0x24>)
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	43db      	mvns	r3, r3
 8004060:	4904      	ldr	r1, [pc, #16]	; (8004074 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004062:	4013      	ands	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40010400 	.word	0x40010400

08004078 <LL_EXTI_DisableEvent_32_63>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <LL_EXTI_DisableEvent_32_63+0x24>)
 8004082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	43db      	mvns	r3, r3
 8004088:	4904      	ldr	r1, [pc, #16]	; (800409c <LL_EXTI_DisableEvent_32_63+0x24>)
 800408a:	4013      	ands	r3, r2
 800408c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010400 	.word	0x40010400

080040a0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	4904      	ldr	r1, [pc, #16]	; (80040c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40010400 	.word	0x40010400

080040c4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80040ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d0:	4904      	ldr	r1, [pc, #16]	; (80040e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40010400 	.word	0x40010400

080040e8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010400 	.word	0x40010400

08004110 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800411a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	43db      	mvns	r3, r3
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004122:	4013      	ands	r3, r2
 8004124:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010400 	.word	0x40010400

08004138 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4313      	orrs	r3, r2
 800414a:	60cb      	str	r3, [r1, #12]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	40010400 	.word	0x40010400

0800415c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	4904      	ldr	r1, [pc, #16]	; (800417c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4313      	orrs	r3, r2
 800416e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40010400 	.word	0x40010400

08004180 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	43db      	mvns	r3, r3
 8004190:	4904      	ldr	r1, [pc, #16]	; (80041a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004192:	4013      	ands	r3, r2
 8004194:	60cb      	str	r3, [r1, #12]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010400 	.word	0x40010400

080041a8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	4904      	ldr	r1, [pc, #16]	; (80041cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010400 	.word	0x40010400

080041d0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	7a1b      	ldrb	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80d1 	beq.w	8004388 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d063      	beq.n	80042b6 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7a5b      	ldrb	r3, [r3, #9]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d01c      	beq.n	8004230 <LL_EXTI_Init+0x60>
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	dc25      	bgt.n	8004246 <LL_EXTI_Init+0x76>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LL_EXTI_Init+0x34>
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d00b      	beq.n	800421a <LL_EXTI_Init+0x4a>
 8004202:	e020      	b.n	8004246 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff21 	bl	8004050 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff feac 	bl	8003f70 <LL_EXTI_EnableIT_0_31>
          break;
 8004218:	e018      	b.n	800424c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff feca 	bl	8003fb8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff feed 	bl	8004008 <LL_EXTI_EnableEvent_0_31>
          break;
 800422e:	e00d      	b.n	800424c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fe9b 	bl	8003f70 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fee2 	bl	8004008 <LL_EXTI_EnableEvent_0_31>
          break;
 8004244:	e002      	b.n	800424c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8004246:	2301      	movs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
          break;
 800424a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	7a9b      	ldrb	r3, [r3, #10]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d030      	beq.n	80042b6 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	7a9b      	ldrb	r3, [r3, #10]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d01c      	beq.n	8004296 <LL_EXTI_Init+0xc6>
 800425c:	2b03      	cmp	r3, #3
 800425e:	dc25      	bgt.n	80042ac <LL_EXTI_Init+0xdc>
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <LL_EXTI_Init+0x9a>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d00b      	beq.n	8004280 <LL_EXTI_Init+0xb0>
 8004268:	e020      	b.n	80042ac <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff86 	bl	8004180 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff11 	bl	80040a0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800427e:	e01b      	b.n	80042b8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff2f 	bl	80040e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff52 	bl	8004138 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004294:	e010      	b.n	80042b8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ff00 	bl	80040a0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff47 	bl	8004138 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80042aa:	e005      	b.n	80042b8 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f043 0302 	orr.w	r3, r3, #2
 80042b2:	60fb      	str	r3, [r7, #12]
            break;
 80042b4:	e000      	b.n	80042b8 <LL_EXTI_Init+0xe8>
        }
      }
 80042b6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d078      	beq.n	80043b2 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7a5b      	ldrb	r3, [r3, #9]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d01c      	beq.n	8004302 <LL_EXTI_Init+0x132>
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	dc25      	bgt.n	8004318 <LL_EXTI_Init+0x148>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <LL_EXTI_Init+0x106>
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d00b      	beq.n	80042ec <LL_EXTI_Init+0x11c>
 80042d4:	e020      	b.n	8004318 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fecc 	bl	8004078 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fe55 	bl	8003f94 <LL_EXTI_EnableIT_32_63>
          break;
 80042ea:	e01a      	b.n	8004322 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fe75 	bl	8003fe0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fe96 	bl	800402c <LL_EXTI_EnableEvent_32_63>
          break;
 8004300:	e00f      	b.n	8004322 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fe44 	bl	8003f94 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fe8b 	bl	800402c <LL_EXTI_EnableEvent_32_63>
          break;
 8004316:	e004      	b.n	8004322 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	60fb      	str	r3, [r7, #12]
          break;
 8004320:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7a9b      	ldrb	r3, [r3, #10]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d043      	beq.n	80043b2 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7a9b      	ldrb	r3, [r3, #10]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d01c      	beq.n	800436c <LL_EXTI_Init+0x19c>
 8004332:	2b03      	cmp	r3, #3
 8004334:	dc25      	bgt.n	8004382 <LL_EXTI_Init+0x1b2>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d002      	beq.n	8004340 <LL_EXTI_Init+0x170>
 800433a:	2b02      	cmp	r3, #2
 800433c:	d00b      	beq.n	8004356 <LL_EXTI_Init+0x186>
 800433e:	e020      	b.n	8004382 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff2f 	bl	80041a8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff feb8 	bl	80040c4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004354:	e02e      	b.n	80043b4 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fed8 	bl	8004110 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fef9 	bl	800415c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800436a:	e023      	b.n	80043b4 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fea7 	bl	80040c4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff feee 	bl	800415c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004380:	e018      	b.n	80043b4 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
            break;
 8004386:	e015      	b.n	80043b4 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fe13 	bl	8003fb8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fe5a 	bl	8004050 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe1d 	bl	8003fe0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fe64 	bl	8004078 <LL_EXTI_DisableEvent_32_63>
 80043b0:	e000      	b.n	80043b4 <LL_EXTI_Init+0x1e4>
      }
 80043b2:	bf00      	nop
  }

  return status;
 80043b4:	68fb      	ldr	r3, [r7, #12]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <LL_GPIO_SetPinMode>:
{
 80043be:	b480      	push	{r7}
 80043c0:	b08b      	sub	sp, #44	; 0x2c
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	613b      	str	r3, [r7, #16]
  return result;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80043e4:	2320      	movs	r3, #32
 80043e6:	e003      	b.n	80043f0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	2103      	movs	r1, #3
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	401a      	ands	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	61fb      	str	r3, [r7, #28]
  return result;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004412:	2320      	movs	r3, #32
 8004414:	e003      	b.n	800441e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	431a      	orrs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]
}
 800442c:	bf00      	nop
 800442e:	372c      	adds	r7, #44	; 0x2c
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_GPIO_SetPinOutputType>:
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	43db      	mvns	r3, r3
 800444c:	401a      	ands	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	605a      	str	r2, [r3, #4]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_GPIO_SetPinSpeed>:
{
 8004468:	b480      	push	{r7}
 800446a:	b08b      	sub	sp, #44	; 0x2c
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	613b      	str	r3, [r7, #16]
  return result;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800448e:	2320      	movs	r3, #32
 8004490:	e003      	b.n	800449a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	fab3 f383 	clz	r3, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2103      	movs	r1, #3
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	401a      	ands	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	61fb      	str	r3, [r7, #28]
  return result;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e003      	b.n	80044c8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	bf00      	nop
 80044d8:	372c      	adds	r7, #44	; 0x2c
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <LL_GPIO_SetPinPull>:
{
 80044e2:	b480      	push	{r7}
 80044e4:	b08b      	sub	sp, #44	; 0x2c
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	613b      	str	r3, [r7, #16]
  return result;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004508:	2320      	movs	r3, #32
 800450a:	e003      	b.n	8004514 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2103      	movs	r1, #3
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	401a      	ands	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	61fb      	str	r3, [r7, #28]
  return result;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004536:	2320      	movs	r3, #32
 8004538:	e003      	b.n	8004542 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	431a      	orrs	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	60da      	str	r2, [r3, #12]
}
 8004550:	bf00      	nop
 8004552:	372c      	adds	r7, #44	; 0x2c
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_GPIO_SetAFPin_0_7>:
{
 800455c:	b480      	push	{r7}
 800455e:	b08b      	sub	sp, #44	; 0x2c
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	613b      	str	r3, [r7, #16]
  return result;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004582:	2320      	movs	r3, #32
 8004584:	e003      	b.n	800458e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	210f      	movs	r1, #15
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	401a      	ands	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	61fb      	str	r3, [r7, #28]
  return result;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80045b0:	2320      	movs	r3, #32
 80045b2:	e003      	b.n	80045bc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	372c      	adds	r7, #44	; 0x2c
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <LL_GPIO_SetAFPin_8_15>:
{
 80045d6:	b480      	push	{r7}
 80045d8:	b08b      	sub	sp, #44	; 0x2c
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	613b      	str	r3, [r7, #16]
  return result;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e003      	b.n	800460a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	210f      	movs	r1, #15
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	401a      	ands	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	61fb      	str	r3, [r7, #28]
  return result;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800462e:	2320      	movs	r3, #32
 8004630:	e003      	b.n	800463a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	431a      	orrs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004648:	bf00      	nop
 800464a:	372c      	adds	r7, #44	; 0x2c
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	60fb      	str	r3, [r7, #12]
  return result;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <LL_GPIO_Init+0x26>
    return 32U;
 8004676:	2320      	movs	r3, #32
 8004678:	e003      	b.n	8004682 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004684:	e048      	b.n	8004718 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	2101      	movs	r1, #1
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d03a      	beq.n	8004712 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d003      	beq.n	80046ac <LL_GPIO_Init+0x58>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d10e      	bne.n	80046ca <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	461a      	mov	r2, r3
 80046b2:	69b9      	ldr	r1, [r7, #24]
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fed7 	bl	8004468 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff feb7 	bl	8004438 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	461a      	mov	r2, r3
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ff05 	bl	80044e2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d111      	bne.n	8004704 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2bff      	cmp	r3, #255	; 0xff
 80046e4:	d807      	bhi.n	80046f6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	461a      	mov	r2, r3
 80046ec:	69b9      	ldr	r1, [r7, #24]
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff34 	bl	800455c <LL_GPIO_SetAFPin_0_7>
 80046f4:	e006      	b.n	8004704 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	461a      	mov	r2, r3
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff69 	bl	80045d6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	461a      	mov	r2, r3
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fe56 	bl	80043be <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3301      	adds	r3, #1
 8004716:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1af      	bne.n	8004686 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <LL_RCC_HSI_IsReady+0x24>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d101      	bne.n	8004746 <LL_RCC_HSI_IsReady+0x16>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <LL_RCC_HSI_IsReady+0x18>
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000

08004758 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <LL_RCC_LSE_IsReady+0x24>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d101      	bne.n	800476e <LL_RCC_LSE_IsReady+0x16>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <LL_RCC_LSE_IsReady+0x18>
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000

08004780 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d101      	bne.n	8004794 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40021000 	.word	0x40021000

080047a4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <LL_RCC_MSI_GetRange+0x18>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000

080047c0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40021000 	.word	0x40021000

080047dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <LL_RCC_GetSysClkSource+0x18>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000

080047f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <LL_RCC_GetAHBPrescaler+0x18>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000

08004814 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <LL_RCC_GetAPB1Prescaler+0x18>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000

08004830 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000

0800484c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <LL_RCC_GetUSARTClockSource+0x24>)
 8004856:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	401a      	ands	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	4313      	orrs	r3, r2
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40021000 	.word	0x40021000

08004874 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <LL_RCC_GetUARTClockSource+0x24>)
 800487e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	401a      	ands	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	4313      	orrs	r3, r2
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40021000 	.word	0x40021000

0800489c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048a0:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <LL_RCC_PLL_GetMainSource+0x18>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0303 	and.w	r3, r3, #3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000

080048b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <LL_RCC_PLL_GetN+0x18>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40021000 	.word	0x40021000

080048d4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <LL_RCC_PLL_GetR+0x18>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000

080048f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <LL_RCC_PLL_GetDivider+0x18>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000

0800490c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d137      	bne.n	800498e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ff94 	bl	800484c <LL_RCC_GetUSARTClockSource>
 8004924:	4603      	mov	r3, r0
 8004926:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800492a:	2b03      	cmp	r3, #3
 800492c:	f200 80b3 	bhi.w	8004a96 <LL_RCC_GetUSARTClockFreq+0x18a>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	08004977 	.word	0x08004977
 800493c:	08004949 	.word	0x08004949
 8004940:	08004951 	.word	0x08004951
 8004944:	08004963 	.word	0x08004963
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004948:	f000 f95c 	bl	8004c04 <RCC_GetSystemClockFreq>
 800494c:	60f8      	str	r0, [r7, #12]
        break;
 800494e:	e0b5      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004950:	f7ff feee 	bl	8004730 <LL_RCC_HSI_IsReady>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 809f 	beq.w	8004a9a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800495c:	4b5a      	ldr	r3, [pc, #360]	; (8004ac8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800495e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004960:	e09b      	b.n	8004a9a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004962:	f7ff fef9 	bl	8004758 <LL_RCC_LSE_IsReady>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8098 	beq.w	8004a9e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004974:	e093      	b.n	8004a9e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004976:	f000 f945 	bl	8004c04 <RCC_GetSystemClockFreq>
 800497a:	4603      	mov	r3, r0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f9d1 	bl	8004d24 <RCC_GetHCLKClockFreq>
 8004982:	4603      	mov	r3, r0
 8004984:	4618      	mov	r0, r3
 8004986:	f000 f9f7 	bl	8004d78 <RCC_GetPCLK2ClockFreq>
 800498a:	60f8      	str	r0, [r7, #12]
        break;
 800498c:	e096      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d146      	bne.n	8004a22 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff ff59 	bl	800484c <LL_RCC_GetUSARTClockSource>
 800499a:	4603      	mov	r3, r0
 800499c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	d87e      	bhi.n	8004aa2 <LL_RCC_GetUSARTClockFreq+0x196>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <LL_RCC_GetUSARTClockFreq+0xa0>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	08004a0b 	.word	0x08004a0b
 80049b0:	08004aa3 	.word	0x08004aa3
 80049b4:	08004aa3 	.word	0x08004aa3
 80049b8:	08004aa3 	.word	0x08004aa3
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	08004aa3 	.word	0x08004aa3
 80049c4:	08004aa3 	.word	0x08004aa3
 80049c8:	08004aa3 	.word	0x08004aa3
 80049cc:	080049e9 	.word	0x080049e9
 80049d0:	08004aa3 	.word	0x08004aa3
 80049d4:	08004aa3 	.word	0x08004aa3
 80049d8:	08004aa3 	.word	0x08004aa3
 80049dc:	080049f9 	.word	0x080049f9
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80049e0:	f000 f910 	bl	8004c04 <RCC_GetSystemClockFreq>
 80049e4:	60f8      	str	r0, [r7, #12]
        break;
 80049e6:	e069      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80049e8:	f7ff fea2 	bl	8004730 <LL_RCC_HSI_IsReady>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d059      	beq.n	8004aa6 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80049f2:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80049f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80049f6:	e056      	b.n	8004aa6 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80049f8:	f7ff feae 	bl	8004758 <LL_RCC_LSE_IsReady>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d053      	beq.n	8004aaa <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8004a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a06:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004a08:	e04f      	b.n	8004aaa <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004a0a:	f000 f8fb 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 f987 	bl	8004d24 <RCC_GetHCLKClockFreq>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f999 	bl	8004d50 <RCC_GetPCLK1ClockFreq>
 8004a1e:	60f8      	str	r0, [r7, #12]
        break;
 8004a20:	e04c      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d142      	bne.n	8004aae <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff0f 	bl	800484c <LL_RCC_GetUSARTClockSource>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004a34:	d01a      	beq.n	8004a6c <LL_RCC_GetUSARTClockFreq+0x160>
 8004a36:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004a3a:	d83a      	bhi.n	8004ab2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00c      	beq.n	8004a5c <LL_RCC_GetUSARTClockFreq+0x150>
 8004a42:	4a22      	ldr	r2, [pc, #136]	; (8004acc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d834      	bhi.n	8004ab2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a4c:	d017      	beq.n	8004a7e <LL_RCC_GetUSARTClockFreq+0x172>
 8004a4e:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d12e      	bne.n	8004ab2 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8004a54:	f000 f8d6 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004a58:	60f8      	str	r0, [r7, #12]
          break;
 8004a5a:	e02f      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8004a5c:	f7ff fe68 	bl	8004730 <LL_RCC_HSI_IsReady>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d027      	beq.n	8004ab6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004a68:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004a6a:	e024      	b.n	8004ab6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8004a6c:	f7ff fe74 	bl	8004758 <LL_RCC_LSE_IsReady>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d021      	beq.n	8004aba <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8004a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7a:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004a7c:	e01d      	b.n	8004aba <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004a7e:	f000 f8c1 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f94d 	bl	8004d24 <RCC_GetHCLKClockFreq>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 f95f 	bl	8004d50 <RCC_GetPCLK1ClockFreq>
 8004a92:	60f8      	str	r0, [r7, #12]
          break;
 8004a94:	e012      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004a96:	bf00      	nop
 8004a98:	e010      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e00e      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e00c      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e00a      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e008      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e006      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004aba:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	00300020 	.word	0x00300020
 8004ad0:	00300010 	.word	0x00300010

08004ad4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae4:	d136      	bne.n	8004b54 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fec4 	bl	8004874 <LL_RCC_GetUARTClockSource>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004af2:	d01a      	beq.n	8004b2a <LL_RCC_GetUARTClockFreq+0x56>
 8004af4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004af8:	d82e      	bhi.n	8004b58 <LL_RCC_GetUARTClockFreq+0x84>
 8004afa:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00c      	beq.n	8004b1a <LL_RCC_GetUARTClockFreq+0x46>
 8004b00:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d828      	bhi.n	8004b58 <LL_RCC_GetUARTClockFreq+0x84>
 8004b06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b0a:	d017      	beq.n	8004b3c <LL_RCC_GetUARTClockFreq+0x68>
 8004b0c:	4a39      	ldr	r2, [pc, #228]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x120>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d122      	bne.n	8004b58 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004b12:	f000 f877 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004b16:	60f8      	str	r0, [r7, #12]
        break;
 8004b18:	e023      	b.n	8004b62 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004b1a:	f7ff fe09 	bl	8004730 <LL_RCC_HSI_IsReady>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <LL_RCC_GetUARTClockFreq+0x124>)
 8004b26:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b28:	e018      	b.n	8004b5c <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004b2a:	f7ff fe15 	bl	8004758 <LL_RCC_LSE_IsReady>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8004b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b38:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b3a:	e011      	b.n	8004b60 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004b3c:	f000 f862 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f8ee 	bl	8004d24 <RCC_GetHCLKClockFreq>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f900 	bl	8004d50 <RCC_GetPCLK1ClockFreq>
 8004b50:	60f8      	str	r0, [r7, #12]
        break;
 8004b52:	e006      	b.n	8004b62 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8004b54:	bf00      	nop
 8004b56:	e004      	b.n	8004b62 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004b60:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b68:	d136      	bne.n	8004bd8 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fe82 	bl	8004874 <LL_RCC_GetUARTClockSource>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004b76:	d01a      	beq.n	8004bae <LL_RCC_GetUARTClockFreq+0xda>
 8004b78:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004b7c:	d82e      	bhi.n	8004bdc <LL_RCC_GetUARTClockFreq+0x108>
 8004b7e:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <LL_RCC_GetUARTClockFreq+0x128>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00c      	beq.n	8004b9e <LL_RCC_GetUARTClockFreq+0xca>
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <LL_RCC_GetUARTClockFreq+0x128>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d828      	bhi.n	8004bdc <LL_RCC_GetUARTClockFreq+0x108>
 8004b8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b8e:	d017      	beq.n	8004bc0 <LL_RCC_GetUARTClockFreq+0xec>
 8004b90:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <LL_RCC_GetUARTClockFreq+0x12c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d122      	bne.n	8004bdc <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004b96:	f000 f835 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004b9a:	60f8      	str	r0, [r7, #12]
        break;
 8004b9c:	e023      	b.n	8004be6 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004b9e:	f7ff fdc7 	bl	8004730 <LL_RCC_HSI_IsReady>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8004ba8:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <LL_RCC_GetUARTClockFreq+0x124>)
 8004baa:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004bac:	e018      	b.n	8004be0 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004bae:	f7ff fdd3 	bl	8004758 <LL_RCC_LSE_IsReady>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8004bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004bbe:	e011      	b.n	8004be4 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004bc0:	f000 f820 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f8ac 	bl	8004d24 <RCC_GetHCLKClockFreq>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f8be 	bl	8004d50 <RCC_GetPCLK1ClockFreq>
 8004bd4:	60f8      	str	r0, [r7, #12]
        break;
 8004bd6:	e006      	b.n	8004be6 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8004bd8:	bf00      	nop
 8004bda:	e004      	b.n	8004be6 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004be4:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	00c00080 	.word	0x00c00080
 8004bf4:	00c00040 	.word	0x00c00040
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	03000200 	.word	0x03000200
 8004c00:	03000100 	.word	0x03000100

08004c04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004c0a:	f7ff fde7 	bl	80047dc <LL_RCC_GetSysClkSource>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d851      	bhi.n	8004cb8 <RCC_GetSystemClockFreq+0xb4>
 8004c14:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <RCC_GetSystemClockFreq+0x18>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004cb9 	.word	0x08004cb9
 8004c24:	08004cb9 	.word	0x08004cb9
 8004c28:	08004cb9 	.word	0x08004cb9
 8004c2c:	08004ca5 	.word	0x08004ca5
 8004c30:	08004cb9 	.word	0x08004cb9
 8004c34:	08004cb9 	.word	0x08004cb9
 8004c38:	08004cb9 	.word	0x08004cb9
 8004c3c:	08004cab 	.word	0x08004cab
 8004c40:	08004cb9 	.word	0x08004cb9
 8004c44:	08004cb9 	.word	0x08004cb9
 8004c48:	08004cb9 	.word	0x08004cb9
 8004c4c:	08004cb1 	.word	0x08004cb1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004c50:	f7ff fd96 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d111      	bne.n	8004c7e <RCC_GetSystemClockFreq+0x7a>
 8004c5a:	f7ff fd91 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <RCC_GetSystemClockFreq+0x6a>
 8004c64:	f7ff fd9e 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	e003      	b.n	8004c76 <RCC_GetSystemClockFreq+0x72>
 8004c6e:	f7ff fda7 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004c72:	4603      	mov	r3, r0
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <RCC_GetSystemClockFreq+0x114>)
 8004c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7c:	e010      	b.n	8004ca0 <RCC_GetSystemClockFreq+0x9c>
 8004c7e:	f7ff fd7f 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <RCC_GetSystemClockFreq+0x8e>
 8004c88:	f7ff fd8c 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	e003      	b.n	8004c9a <RCC_GetSystemClockFreq+0x96>
 8004c92:	f7ff fd95 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004c96:	4603      	mov	r3, r0
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <RCC_GetSystemClockFreq+0x114>)
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004ca2:	e033      	b.n	8004d0c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <RCC_GetSystemClockFreq+0x118>)
 8004ca6:	607b      	str	r3, [r7, #4]
      break;
 8004ca8:	e030      	b.n	8004d0c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <RCC_GetSystemClockFreq+0x11c>)
 8004cac:	607b      	str	r3, [r7, #4]
      break;
 8004cae:	e02d      	b.n	8004d0c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004cb0:	f000 f876 	bl	8004da0 <RCC_PLL_GetFreqDomain_SYS>
 8004cb4:	6078      	str	r0, [r7, #4]
      break;
 8004cb6:	e029      	b.n	8004d0c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004cb8:	f7ff fd62 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d111      	bne.n	8004ce6 <RCC_GetSystemClockFreq+0xe2>
 8004cc2:	f7ff fd5d 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <RCC_GetSystemClockFreq+0xd2>
 8004ccc:	f7ff fd6a 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	e003      	b.n	8004cde <RCC_GetSystemClockFreq+0xda>
 8004cd6:	f7ff fd73 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <RCC_GetSystemClockFreq+0x114>)
 8004ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce4:	e010      	b.n	8004d08 <RCC_GetSystemClockFreq+0x104>
 8004ce6:	f7ff fd4b 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <RCC_GetSystemClockFreq+0xf6>
 8004cf0:	f7ff fd58 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	e003      	b.n	8004d02 <RCC_GetSystemClockFreq+0xfe>
 8004cfa:	f7ff fd61 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <RCC_GetSystemClockFreq+0x114>)
 8004d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d08:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004d0a:	bf00      	nop
  }

  return frequency;
 8004d0c:	687b      	ldr	r3, [r7, #4]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	080064ac 	.word	0x080064ac
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004d2c:	f7ff fd64 	bl	80047f8 <LL_RCC_GetAHBPrescaler>
 8004d30:	4603      	mov	r3, r0
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <RCC_GetHCLKClockFreq+0x28>)
 8004d3a:	5cd3      	ldrb	r3, [r2, r3]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	40d3      	lsrs	r3, r2
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	08006494 	.word	0x08006494

08004d50 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004d58:	f7ff fd5c 	bl	8004814 <LL_RCC_GetAPB1Prescaler>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <RCC_GetPCLK1ClockFreq+0x24>)
 8004d62:	5cd3      	ldrb	r3, [r2, r3]
 8004d64:	461a      	mov	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	40d3      	lsrs	r3, r2
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	080064a4 	.word	0x080064a4

08004d78 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004d80:	f7ff fd56 	bl	8004830 <LL_RCC_GetAPB2Prescaler>
 8004d84:	4603      	mov	r3, r0
 8004d86:	0adb      	lsrs	r3, r3, #11
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <RCC_GetPCLK2ClockFreq+0x24>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	40d3      	lsrs	r3, r2
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	080064a4 	.word	0x080064a4

08004da0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004da6:	f7ff fd79 	bl	800489c <LL_RCC_PLL_GetMainSource>
 8004daa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d036      	beq.n	8004e20 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d836      	bhi.n	8004e26 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d003      	beq.n	8004dc6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d02a      	beq.n	8004e1a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8004dc4:	e02f      	b.n	8004e26 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004dc6:	f7ff fcdb 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d111      	bne.n	8004df4 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8004dd0:	f7ff fcd6 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8004dda:	f7ff fce3 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004dde:	4603      	mov	r3, r0
 8004de0:	0a1b      	lsrs	r3, r3, #8
 8004de2:	e003      	b.n	8004dec <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8004de4:	f7ff fcec 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004de8:	4603      	mov	r3, r0
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	4a2f      	ldr	r2, [pc, #188]	; (8004eac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df2:	e010      	b.n	8004e16 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8004df4:	f7ff fcc4 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8004dfe:	f7ff fcd1 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004e02:	4603      	mov	r3, r0
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	e003      	b.n	8004e10 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8004e08:	f7ff fcda 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	4a26      	ldr	r2, [pc, #152]	; (8004eac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e16:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004e18:	e02f      	b.n	8004e7a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8004e1c:	607b      	str	r3, [r7, #4]
      break;
 8004e1e:	e02c      	b.n	8004e7a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004e20:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8004e22:	607b      	str	r3, [r7, #4]
      break;
 8004e24:	e029      	b.n	8004e7a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004e26:	f7ff fcab 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d111      	bne.n	8004e54 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8004e30:	f7ff fca6 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8004e3a:	f7ff fcb3 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	e003      	b.n	8004e4c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8004e44:	f7ff fcbc 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	4a17      	ldr	r2, [pc, #92]	; (8004eac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e52:	e010      	b.n	8004e76 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8004e54:	f7ff fc94 	bl	8004780 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8004e5e:	f7ff fca1 	bl	80047a4 <LL_RCC_MSI_GetRange>
 8004e62:	4603      	mov	r3, r0
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	e003      	b.n	8004e70 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8004e68:	f7ff fcaa 	bl	80047c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	4a0e      	ldr	r2, [pc, #56]	; (8004eac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e76:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004e78:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004e7a:	f7ff fd39 	bl	80048f0 <LL_RCC_PLL_GetDivider>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	3301      	adds	r3, #1
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	fbb2 f4f3 	udiv	r4, r2, r3
 8004e8a:	f7ff fd15 	bl	80048b8 <LL_RCC_PLL_GetN>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	fb03 f404 	mul.w	r4, r3, r4
 8004e94:	f7ff fd1e 	bl	80048d4 <LL_RCC_PLL_GetR>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	0e5b      	lsrs	r3, r3, #25
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}
 8004eac:	080064ac 	.word	0x080064ac
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	007a1200 	.word	0x007a1200

08004eb8 <LL_USART_IsEnabled>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <LL_USART_IsEnabled+0x18>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <LL_USART_IsEnabled+0x1a>
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_USART_SetStopBitsLength>:
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	605a      	str	r2, [r3, #4]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_USART_SetHWFlowCtrl>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <LL_USART_SetBaudRate>:
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b087      	sub	sp, #28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3e:	d11a      	bne.n	8004f76 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	005a      	lsls	r2, r3, #1
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	441a      	add	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	60da      	str	r2, [r3, #12]
}
 8004f74:	e00a      	b.n	8004f8c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	085a      	lsrs	r2, r3, #1
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	441a      	add	r2, r3
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ff84 	bl	8004eb8 <LL_USART_IsEnabled>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d15b      	bne.n	800506e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <LL_USART_Init+0xe0>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	6851      	ldr	r1, [r2, #4]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	68d2      	ldr	r2, [r2, #12]
 8004fc6:	4311      	orrs	r1, r2
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	6912      	ldr	r2, [r2, #16]
 8004fcc:	4311      	orrs	r1, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	6992      	ldr	r2, [r2, #24]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ff7c 	bl	8004ede <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ff89 	bl	8004f04 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a21      	ldr	r2, [pc, #132]	; (800507c <LL_USART_Init+0xe4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d104      	bne.n	8005004 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004ffa:	2003      	movs	r0, #3
 8004ffc:	f7ff fc86 	bl	800490c <LL_RCC_GetUSARTClockFreq>
 8005000:	60b8      	str	r0, [r7, #8]
 8005002:	e023      	b.n	800504c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <LL_USART_Init+0xe8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d104      	bne.n	8005016 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800500c:	200c      	movs	r0, #12
 800500e:	f7ff fc7d 	bl	800490c <LL_RCC_GetUSARTClockFreq>
 8005012:	60b8      	str	r0, [r7, #8]
 8005014:	e01a      	b.n	800504c <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <LL_USART_Init+0xec>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d104      	bne.n	8005028 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800501e:	2030      	movs	r0, #48	; 0x30
 8005020:	f7ff fc74 	bl	800490c <LL_RCC_GetUSARTClockFreq>
 8005024:	60b8      	str	r0, [r7, #8]
 8005026:	e011      	b.n	800504c <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <LL_USART_Init+0xf0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d104      	bne.n	800503a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005030:	20c0      	movs	r0, #192	; 0xc0
 8005032:	f7ff fd4f 	bl	8004ad4 <LL_RCC_GetUARTClockFreq>
 8005036:	60b8      	str	r0, [r7, #8]
 8005038:	e008      	b.n	800504c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <LL_USART_Init+0xf4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d104      	bne.n	800504c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8005042:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005046:	f7ff fd45 	bl	8004ad4 <LL_RCC_GetUARTClockFreq>
 800504a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00d      	beq.n	800506e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff ff5e 	bl	8004f2a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	efff69f3 	.word	0xefff69f3
 800507c:	40013800 	.word	0x40013800
 8005080:	40004400 	.word	0x40004400
 8005084:	40004800 	.word	0x40004800
 8005088:	40004c00 	.word	0x40004c00
 800508c:	40005000 	.word	0x40005000

08005090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005090:	b084      	sub	sp, #16
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	f107 001c 	add.w	r0, r7, #28
 800509e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa24 	bl	80054fc <USB_CoreReset>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80050b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
 80050ca:	e005      	b.n	80050d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050e4:	b004      	add	sp, #16
 80050e6:	4770      	bx	lr

080050e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f023 0201 	bic.w	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	e00b      	b.n	800514e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e001      	b.n	800514e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e003      	b.n	8005156 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800514e:	2032      	movs	r0, #50	; 0x32
 8005150:	f7fc fc7c 	bl	8001a4c <HAL_Delay>

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005160:	b084      	sub	sp, #16
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800516e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e009      	b.n	8005194 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	3340      	adds	r3, #64	; 0x40
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	2200      	movs	r2, #0
 800518c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	3301      	adds	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b0e      	cmp	r3, #14
 8005198:	d9f2      	bls.n	8005180 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800519a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11c      	bne.n	80051da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ae:	f043 0302 	orr.w	r3, r3, #2
 80051b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e005      	b.n	80051e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ec:	461a      	mov	r2, r3
 80051ee:	2300      	movs	r3, #0
 80051f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	4619      	mov	r1, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	461a      	mov	r2, r3
 8005202:	680b      	ldr	r3, [r1, #0]
 8005204:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005206:	2103      	movs	r1, #3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f93d 	bl	8005488 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800520e:	2110      	movs	r1, #16
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f8f1 	bl	80053f8 <USB_FlushTxFifo>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f90f 	bl	8005444 <USB_FlushRxFifo>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	461a      	mov	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	461a      	mov	r2, r3
 8005244:	2300      	movs	r3, #0
 8005246:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	461a      	mov	r2, r3
 8005250:	2300      	movs	r3, #0
 8005252:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	e043      	b.n	80052e2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800526c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005270:	d118      	bne.n	80052a4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	461a      	mov	r2, r3
 8005286:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e013      	b.n	80052b6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	461a      	mov	r2, r3
 800529c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e008      	b.n	80052b6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	461a      	mov	r2, r3
 80052c4:	2300      	movs	r3, #0
 80052c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	461a      	mov	r2, r3
 80052d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3301      	adds	r3, #1
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3b7      	bcc.n	800525a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	e043      	b.n	8005378 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005306:	d118      	bne.n	800533a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e013      	b.n	800534c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005330:	461a      	mov	r2, r3
 8005332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e008      	b.n	800534c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	461a      	mov	r2, r3
 8005348:	2300      	movs	r3, #0
 800534a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	461a      	mov	r2, r3
 800535a:	2300      	movs	r3, #0
 800535c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536a:	461a      	mov	r2, r3
 800536c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3301      	adds	r3, #1
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3b7      	bcc.n	80052f0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005392:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f043 0210 	orr.w	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <USB_DevInit+0x294>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f043 0208 	orr.w	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d107      	bne.n	80053e2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053da:	f043 0304 	orr.w	r3, r3, #4
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ee:	b004      	add	sp, #16
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	803c3800 	.word	0x803c3800

080053f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3301      	adds	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a09      	ldr	r2, [pc, #36]	; (8005440 <USB_FlushTxFifo+0x48>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e006      	b.n	8005432 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d0f0      	beq.n	8005412 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	00030d40 	.word	0x00030d40

08005444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2210      	movs	r2, #16
 8005454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a09      	ldr	r2, [pc, #36]	; (8005484 <USB_FlushRxFifo+0x40>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d901      	bls.n	8005468 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e006      	b.n	8005476 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b10      	cmp	r3, #16
 8005472:	d0f0      	beq.n	8005456 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	00030d40 	.word	0x00030d40

08005488 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054d4:	f023 0303 	bic.w	r3, r3, #3
 80054d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3301      	adds	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <USB_CoreReset+0x64>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e01b      	b.n	8005552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	daf2      	bge.n	8005508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f043 0201 	orr.w	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3301      	adds	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a09      	ldr	r2, [pc, #36]	; (8005560 <USB_CoreReset+0x64>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e006      	b.n	8005552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d0f0      	beq.n	8005532 <USB_CoreReset+0x36>

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	00030d40 	.word	0x00030d40

08005564 <__errno>:
 8005564:	4b01      	ldr	r3, [pc, #4]	; (800556c <__errno+0x8>)
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	2000000c 	.word	0x2000000c

08005570 <__libc_init_array>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4d0d      	ldr	r5, [pc, #52]	; (80055a8 <__libc_init_array+0x38>)
 8005574:	4c0d      	ldr	r4, [pc, #52]	; (80055ac <__libc_init_array+0x3c>)
 8005576:	1b64      	subs	r4, r4, r5
 8005578:	10a4      	asrs	r4, r4, #2
 800557a:	2600      	movs	r6, #0
 800557c:	42a6      	cmp	r6, r4
 800557e:	d109      	bne.n	8005594 <__libc_init_array+0x24>
 8005580:	4d0b      	ldr	r5, [pc, #44]	; (80055b0 <__libc_init_array+0x40>)
 8005582:	4c0c      	ldr	r4, [pc, #48]	; (80055b4 <__libc_init_array+0x44>)
 8005584:	f000 ff76 	bl	8006474 <_init>
 8005588:	1b64      	subs	r4, r4, r5
 800558a:	10a4      	asrs	r4, r4, #2
 800558c:	2600      	movs	r6, #0
 800558e:	42a6      	cmp	r6, r4
 8005590:	d105      	bne.n	800559e <__libc_init_array+0x2e>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	f855 3b04 	ldr.w	r3, [r5], #4
 8005598:	4798      	blx	r3
 800559a:	3601      	adds	r6, #1
 800559c:	e7ee      	b.n	800557c <__libc_init_array+0xc>
 800559e:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a2:	4798      	blx	r3
 80055a4:	3601      	adds	r6, #1
 80055a6:	e7f2      	b.n	800558e <__libc_init_array+0x1e>
 80055a8:	08006574 	.word	0x08006574
 80055ac:	08006574 	.word	0x08006574
 80055b0:	08006574 	.word	0x08006574
 80055b4:	08006578 	.word	0x08006578

080055b8 <memset>:
 80055b8:	4402      	add	r2, r0
 80055ba:	4603      	mov	r3, r0
 80055bc:	4293      	cmp	r3, r2
 80055be:	d100      	bne.n	80055c2 <memset+0xa>
 80055c0:	4770      	bx	lr
 80055c2:	f803 1b01 	strb.w	r1, [r3], #1
 80055c6:	e7f9      	b.n	80055bc <memset+0x4>

080055c8 <iprintf>:
 80055c8:	b40f      	push	{r0, r1, r2, r3}
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <iprintf+0x2c>)
 80055cc:	b513      	push	{r0, r1, r4, lr}
 80055ce:	681c      	ldr	r4, [r3, #0]
 80055d0:	b124      	cbz	r4, 80055dc <iprintf+0x14>
 80055d2:	69a3      	ldr	r3, [r4, #24]
 80055d4:	b913      	cbnz	r3, 80055dc <iprintf+0x14>
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 f866 	bl	80056a8 <__sinit>
 80055dc:	ab05      	add	r3, sp, #20
 80055de:	9a04      	ldr	r2, [sp, #16]
 80055e0:	68a1      	ldr	r1, [r4, #8]
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 f983 	bl	80058f0 <_vfiprintf_r>
 80055ea:	b002      	add	sp, #8
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f0:	b004      	add	sp, #16
 80055f2:	4770      	bx	lr
 80055f4:	2000000c 	.word	0x2000000c

080055f8 <std>:
 80055f8:	2300      	movs	r3, #0
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005606:	6083      	str	r3, [r0, #8]
 8005608:	8181      	strh	r1, [r0, #12]
 800560a:	6643      	str	r3, [r0, #100]	; 0x64
 800560c:	81c2      	strh	r2, [r0, #14]
 800560e:	6183      	str	r3, [r0, #24]
 8005610:	4619      	mov	r1, r3
 8005612:	2208      	movs	r2, #8
 8005614:	305c      	adds	r0, #92	; 0x5c
 8005616:	f7ff ffcf 	bl	80055b8 <memset>
 800561a:	4b05      	ldr	r3, [pc, #20]	; (8005630 <std+0x38>)
 800561c:	6263      	str	r3, [r4, #36]	; 0x24
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <std+0x3c>)
 8005620:	62a3      	str	r3, [r4, #40]	; 0x28
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <std+0x40>)
 8005624:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <std+0x44>)
 8005628:	6224      	str	r4, [r4, #32]
 800562a:	6323      	str	r3, [r4, #48]	; 0x30
 800562c:	bd10      	pop	{r4, pc}
 800562e:	bf00      	nop
 8005630:	08005e99 	.word	0x08005e99
 8005634:	08005ebb 	.word	0x08005ebb
 8005638:	08005ef3 	.word	0x08005ef3
 800563c:	08005f17 	.word	0x08005f17

08005640 <_cleanup_r>:
 8005640:	4901      	ldr	r1, [pc, #4]	; (8005648 <_cleanup_r+0x8>)
 8005642:	f000 b8af 	b.w	80057a4 <_fwalk_reent>
 8005646:	bf00      	nop
 8005648:	080061f1 	.word	0x080061f1

0800564c <__sfmoreglue>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	1e4a      	subs	r2, r1, #1
 8005650:	2568      	movs	r5, #104	; 0x68
 8005652:	4355      	muls	r5, r2
 8005654:	460e      	mov	r6, r1
 8005656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800565a:	f000 f8c5 	bl	80057e8 <_malloc_r>
 800565e:	4604      	mov	r4, r0
 8005660:	b140      	cbz	r0, 8005674 <__sfmoreglue+0x28>
 8005662:	2100      	movs	r1, #0
 8005664:	e9c0 1600 	strd	r1, r6, [r0]
 8005668:	300c      	adds	r0, #12
 800566a:	60a0      	str	r0, [r4, #8]
 800566c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005670:	f7ff ffa2 	bl	80055b8 <memset>
 8005674:	4620      	mov	r0, r4
 8005676:	bd70      	pop	{r4, r5, r6, pc}

08005678 <__sfp_lock_acquire>:
 8005678:	4801      	ldr	r0, [pc, #4]	; (8005680 <__sfp_lock_acquire+0x8>)
 800567a:	f000 b8b3 	b.w	80057e4 <__retarget_lock_acquire_recursive>
 800567e:	bf00      	nop
 8005680:	20000600 	.word	0x20000600

08005684 <__sfp_lock_release>:
 8005684:	4801      	ldr	r0, [pc, #4]	; (800568c <__sfp_lock_release+0x8>)
 8005686:	f000 b8ae 	b.w	80057e6 <__retarget_lock_release_recursive>
 800568a:	bf00      	nop
 800568c:	20000600 	.word	0x20000600

08005690 <__sinit_lock_acquire>:
 8005690:	4801      	ldr	r0, [pc, #4]	; (8005698 <__sinit_lock_acquire+0x8>)
 8005692:	f000 b8a7 	b.w	80057e4 <__retarget_lock_acquire_recursive>
 8005696:	bf00      	nop
 8005698:	200005fb 	.word	0x200005fb

0800569c <__sinit_lock_release>:
 800569c:	4801      	ldr	r0, [pc, #4]	; (80056a4 <__sinit_lock_release+0x8>)
 800569e:	f000 b8a2 	b.w	80057e6 <__retarget_lock_release_recursive>
 80056a2:	bf00      	nop
 80056a4:	200005fb 	.word	0x200005fb

080056a8 <__sinit>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4604      	mov	r4, r0
 80056ac:	f7ff fff0 	bl	8005690 <__sinit_lock_acquire>
 80056b0:	69a3      	ldr	r3, [r4, #24]
 80056b2:	b11b      	cbz	r3, 80056bc <__sinit+0x14>
 80056b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b8:	f7ff bff0 	b.w	800569c <__sinit_lock_release>
 80056bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056c0:	6523      	str	r3, [r4, #80]	; 0x50
 80056c2:	4b13      	ldr	r3, [pc, #76]	; (8005710 <__sinit+0x68>)
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <__sinit+0x6c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	bf04      	itt	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	61a3      	streq	r3, [r4, #24]
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 f820 	bl	8005718 <__sfp>
 80056d8:	6060      	str	r0, [r4, #4]
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 f81c 	bl	8005718 <__sfp>
 80056e0:	60a0      	str	r0, [r4, #8]
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f818 	bl	8005718 <__sfp>
 80056e8:	2200      	movs	r2, #0
 80056ea:	60e0      	str	r0, [r4, #12]
 80056ec:	2104      	movs	r1, #4
 80056ee:	6860      	ldr	r0, [r4, #4]
 80056f0:	f7ff ff82 	bl	80055f8 <std>
 80056f4:	68a0      	ldr	r0, [r4, #8]
 80056f6:	2201      	movs	r2, #1
 80056f8:	2109      	movs	r1, #9
 80056fa:	f7ff ff7d 	bl	80055f8 <std>
 80056fe:	68e0      	ldr	r0, [r4, #12]
 8005700:	2202      	movs	r2, #2
 8005702:	2112      	movs	r1, #18
 8005704:	f7ff ff78 	bl	80055f8 <std>
 8005708:	2301      	movs	r3, #1
 800570a:	61a3      	str	r3, [r4, #24]
 800570c:	e7d2      	b.n	80056b4 <__sinit+0xc>
 800570e:	bf00      	nop
 8005710:	080064dc 	.word	0x080064dc
 8005714:	08005641 	.word	0x08005641

08005718 <__sfp>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	4607      	mov	r7, r0
 800571c:	f7ff ffac 	bl	8005678 <__sfp_lock_acquire>
 8005720:	4b1e      	ldr	r3, [pc, #120]	; (800579c <__sfp+0x84>)
 8005722:	681e      	ldr	r6, [r3, #0]
 8005724:	69b3      	ldr	r3, [r6, #24]
 8005726:	b913      	cbnz	r3, 800572e <__sfp+0x16>
 8005728:	4630      	mov	r0, r6
 800572a:	f7ff ffbd 	bl	80056a8 <__sinit>
 800572e:	3648      	adds	r6, #72	; 0x48
 8005730:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005734:	3b01      	subs	r3, #1
 8005736:	d503      	bpl.n	8005740 <__sfp+0x28>
 8005738:	6833      	ldr	r3, [r6, #0]
 800573a:	b30b      	cbz	r3, 8005780 <__sfp+0x68>
 800573c:	6836      	ldr	r6, [r6, #0]
 800573e:	e7f7      	b.n	8005730 <__sfp+0x18>
 8005740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005744:	b9d5      	cbnz	r5, 800577c <__sfp+0x64>
 8005746:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <__sfp+0x88>)
 8005748:	60e3      	str	r3, [r4, #12]
 800574a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800574e:	6665      	str	r5, [r4, #100]	; 0x64
 8005750:	f000 f847 	bl	80057e2 <__retarget_lock_init_recursive>
 8005754:	f7ff ff96 	bl	8005684 <__sfp_lock_release>
 8005758:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800575c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005760:	6025      	str	r5, [r4, #0]
 8005762:	61a5      	str	r5, [r4, #24]
 8005764:	2208      	movs	r2, #8
 8005766:	4629      	mov	r1, r5
 8005768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800576c:	f7ff ff24 	bl	80055b8 <memset>
 8005770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005778:	4620      	mov	r0, r4
 800577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800577c:	3468      	adds	r4, #104	; 0x68
 800577e:	e7d9      	b.n	8005734 <__sfp+0x1c>
 8005780:	2104      	movs	r1, #4
 8005782:	4638      	mov	r0, r7
 8005784:	f7ff ff62 	bl	800564c <__sfmoreglue>
 8005788:	4604      	mov	r4, r0
 800578a:	6030      	str	r0, [r6, #0]
 800578c:	2800      	cmp	r0, #0
 800578e:	d1d5      	bne.n	800573c <__sfp+0x24>
 8005790:	f7ff ff78 	bl	8005684 <__sfp_lock_release>
 8005794:	230c      	movs	r3, #12
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	e7ee      	b.n	8005778 <__sfp+0x60>
 800579a:	bf00      	nop
 800579c:	080064dc 	.word	0x080064dc
 80057a0:	ffff0001 	.word	0xffff0001

080057a4 <_fwalk_reent>:
 80057a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a8:	4606      	mov	r6, r0
 80057aa:	4688      	mov	r8, r1
 80057ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057b0:	2700      	movs	r7, #0
 80057b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057b6:	f1b9 0901 	subs.w	r9, r9, #1
 80057ba:	d505      	bpl.n	80057c8 <_fwalk_reent+0x24>
 80057bc:	6824      	ldr	r4, [r4, #0]
 80057be:	2c00      	cmp	r4, #0
 80057c0:	d1f7      	bne.n	80057b2 <_fwalk_reent+0xe>
 80057c2:	4638      	mov	r0, r7
 80057c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c8:	89ab      	ldrh	r3, [r5, #12]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d907      	bls.n	80057de <_fwalk_reent+0x3a>
 80057ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057d2:	3301      	adds	r3, #1
 80057d4:	d003      	beq.n	80057de <_fwalk_reent+0x3a>
 80057d6:	4629      	mov	r1, r5
 80057d8:	4630      	mov	r0, r6
 80057da:	47c0      	blx	r8
 80057dc:	4307      	orrs	r7, r0
 80057de:	3568      	adds	r5, #104	; 0x68
 80057e0:	e7e9      	b.n	80057b6 <_fwalk_reent+0x12>

080057e2 <__retarget_lock_init_recursive>:
 80057e2:	4770      	bx	lr

080057e4 <__retarget_lock_acquire_recursive>:
 80057e4:	4770      	bx	lr

080057e6 <__retarget_lock_release_recursive>:
 80057e6:	4770      	bx	lr

080057e8 <_malloc_r>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	1ccd      	adds	r5, r1, #3
 80057ec:	f025 0503 	bic.w	r5, r5, #3
 80057f0:	3508      	adds	r5, #8
 80057f2:	2d0c      	cmp	r5, #12
 80057f4:	bf38      	it	cc
 80057f6:	250c      	movcc	r5, #12
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	4606      	mov	r6, r0
 80057fc:	db01      	blt.n	8005802 <_malloc_r+0x1a>
 80057fe:	42a9      	cmp	r1, r5
 8005800:	d903      	bls.n	800580a <_malloc_r+0x22>
 8005802:	230c      	movs	r3, #12
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	2000      	movs	r0, #0
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580a:	f000 fda3 	bl	8006354 <__malloc_lock>
 800580e:	4921      	ldr	r1, [pc, #132]	; (8005894 <_malloc_r+0xac>)
 8005810:	680a      	ldr	r2, [r1, #0]
 8005812:	4614      	mov	r4, r2
 8005814:	b99c      	cbnz	r4, 800583e <_malloc_r+0x56>
 8005816:	4f20      	ldr	r7, [pc, #128]	; (8005898 <_malloc_r+0xb0>)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	b923      	cbnz	r3, 8005826 <_malloc_r+0x3e>
 800581c:	4621      	mov	r1, r4
 800581e:	4630      	mov	r0, r6
 8005820:	f000 fb2a 	bl	8005e78 <_sbrk_r>
 8005824:	6038      	str	r0, [r7, #0]
 8005826:	4629      	mov	r1, r5
 8005828:	4630      	mov	r0, r6
 800582a:	f000 fb25 	bl	8005e78 <_sbrk_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d123      	bne.n	800587a <_malloc_r+0x92>
 8005832:	230c      	movs	r3, #12
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	4630      	mov	r0, r6
 8005838:	f000 fd92 	bl	8006360 <__malloc_unlock>
 800583c:	e7e3      	b.n	8005806 <_malloc_r+0x1e>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	1b5b      	subs	r3, r3, r5
 8005842:	d417      	bmi.n	8005874 <_malloc_r+0x8c>
 8005844:	2b0b      	cmp	r3, #11
 8005846:	d903      	bls.n	8005850 <_malloc_r+0x68>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	441c      	add	r4, r3
 800584c:	6025      	str	r5, [r4, #0]
 800584e:	e004      	b.n	800585a <_malloc_r+0x72>
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	42a2      	cmp	r2, r4
 8005854:	bf0c      	ite	eq
 8005856:	600b      	streq	r3, [r1, #0]
 8005858:	6053      	strne	r3, [r2, #4]
 800585a:	4630      	mov	r0, r6
 800585c:	f000 fd80 	bl	8006360 <__malloc_unlock>
 8005860:	f104 000b 	add.w	r0, r4, #11
 8005864:	1d23      	adds	r3, r4, #4
 8005866:	f020 0007 	bic.w	r0, r0, #7
 800586a:	1ac2      	subs	r2, r0, r3
 800586c:	d0cc      	beq.n	8005808 <_malloc_r+0x20>
 800586e:	1a1b      	subs	r3, r3, r0
 8005870:	50a3      	str	r3, [r4, r2]
 8005872:	e7c9      	b.n	8005808 <_malloc_r+0x20>
 8005874:	4622      	mov	r2, r4
 8005876:	6864      	ldr	r4, [r4, #4]
 8005878:	e7cc      	b.n	8005814 <_malloc_r+0x2c>
 800587a:	1cc4      	adds	r4, r0, #3
 800587c:	f024 0403 	bic.w	r4, r4, #3
 8005880:	42a0      	cmp	r0, r4
 8005882:	d0e3      	beq.n	800584c <_malloc_r+0x64>
 8005884:	1a21      	subs	r1, r4, r0
 8005886:	4630      	mov	r0, r6
 8005888:	f000 faf6 	bl	8005e78 <_sbrk_r>
 800588c:	3001      	adds	r0, #1
 800588e:	d1dd      	bne.n	800584c <_malloc_r+0x64>
 8005890:	e7cf      	b.n	8005832 <_malloc_r+0x4a>
 8005892:	bf00      	nop
 8005894:	200000b8 	.word	0x200000b8
 8005898:	200000bc 	.word	0x200000bc

0800589c <__sfputc_r>:
 800589c:	6893      	ldr	r3, [r2, #8]
 800589e:	3b01      	subs	r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	b410      	push	{r4}
 80058a4:	6093      	str	r3, [r2, #8]
 80058a6:	da08      	bge.n	80058ba <__sfputc_r+0x1e>
 80058a8:	6994      	ldr	r4, [r2, #24]
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	db01      	blt.n	80058b2 <__sfputc_r+0x16>
 80058ae:	290a      	cmp	r1, #10
 80058b0:	d103      	bne.n	80058ba <__sfputc_r+0x1e>
 80058b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b6:	f000 bb33 	b.w	8005f20 <__swbuf_r>
 80058ba:	6813      	ldr	r3, [r2, #0]
 80058bc:	1c58      	adds	r0, r3, #1
 80058be:	6010      	str	r0, [r2, #0]
 80058c0:	7019      	strb	r1, [r3, #0]
 80058c2:	4608      	mov	r0, r1
 80058c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <__sfputs_r>:
 80058ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058cc:	4606      	mov	r6, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	4614      	mov	r4, r2
 80058d2:	18d5      	adds	r5, r2, r3
 80058d4:	42ac      	cmp	r4, r5
 80058d6:	d101      	bne.n	80058dc <__sfputs_r+0x12>
 80058d8:	2000      	movs	r0, #0
 80058da:	e007      	b.n	80058ec <__sfputs_r+0x22>
 80058dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e0:	463a      	mov	r2, r7
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff ffda 	bl	800589c <__sfputc_r>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d1f3      	bne.n	80058d4 <__sfputs_r+0xa>
 80058ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058f0 <_vfiprintf_r>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	460d      	mov	r5, r1
 80058f6:	b09d      	sub	sp, #116	; 0x74
 80058f8:	4614      	mov	r4, r2
 80058fa:	4698      	mov	r8, r3
 80058fc:	4606      	mov	r6, r0
 80058fe:	b118      	cbz	r0, 8005908 <_vfiprintf_r+0x18>
 8005900:	6983      	ldr	r3, [r0, #24]
 8005902:	b90b      	cbnz	r3, 8005908 <_vfiprintf_r+0x18>
 8005904:	f7ff fed0 	bl	80056a8 <__sinit>
 8005908:	4b89      	ldr	r3, [pc, #548]	; (8005b30 <_vfiprintf_r+0x240>)
 800590a:	429d      	cmp	r5, r3
 800590c:	d11b      	bne.n	8005946 <_vfiprintf_r+0x56>
 800590e:	6875      	ldr	r5, [r6, #4]
 8005910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005912:	07d9      	lsls	r1, r3, #31
 8005914:	d405      	bmi.n	8005922 <_vfiprintf_r+0x32>
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	059a      	lsls	r2, r3, #22
 800591a:	d402      	bmi.n	8005922 <_vfiprintf_r+0x32>
 800591c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800591e:	f7ff ff61 	bl	80057e4 <__retarget_lock_acquire_recursive>
 8005922:	89ab      	ldrh	r3, [r5, #12]
 8005924:	071b      	lsls	r3, r3, #28
 8005926:	d501      	bpl.n	800592c <_vfiprintf_r+0x3c>
 8005928:	692b      	ldr	r3, [r5, #16]
 800592a:	b9eb      	cbnz	r3, 8005968 <_vfiprintf_r+0x78>
 800592c:	4629      	mov	r1, r5
 800592e:	4630      	mov	r0, r6
 8005930:	f000 fb5a 	bl	8005fe8 <__swsetup_r>
 8005934:	b1c0      	cbz	r0, 8005968 <_vfiprintf_r+0x78>
 8005936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005938:	07dc      	lsls	r4, r3, #31
 800593a:	d50e      	bpl.n	800595a <_vfiprintf_r+0x6a>
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	b01d      	add	sp, #116	; 0x74
 8005942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005946:	4b7b      	ldr	r3, [pc, #492]	; (8005b34 <_vfiprintf_r+0x244>)
 8005948:	429d      	cmp	r5, r3
 800594a:	d101      	bne.n	8005950 <_vfiprintf_r+0x60>
 800594c:	68b5      	ldr	r5, [r6, #8]
 800594e:	e7df      	b.n	8005910 <_vfiprintf_r+0x20>
 8005950:	4b79      	ldr	r3, [pc, #484]	; (8005b38 <_vfiprintf_r+0x248>)
 8005952:	429d      	cmp	r5, r3
 8005954:	bf08      	it	eq
 8005956:	68f5      	ldreq	r5, [r6, #12]
 8005958:	e7da      	b.n	8005910 <_vfiprintf_r+0x20>
 800595a:	89ab      	ldrh	r3, [r5, #12]
 800595c:	0598      	lsls	r0, r3, #22
 800595e:	d4ed      	bmi.n	800593c <_vfiprintf_r+0x4c>
 8005960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005962:	f7ff ff40 	bl	80057e6 <__retarget_lock_release_recursive>
 8005966:	e7e9      	b.n	800593c <_vfiprintf_r+0x4c>
 8005968:	2300      	movs	r3, #0
 800596a:	9309      	str	r3, [sp, #36]	; 0x24
 800596c:	2320      	movs	r3, #32
 800596e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005972:	f8cd 800c 	str.w	r8, [sp, #12]
 8005976:	2330      	movs	r3, #48	; 0x30
 8005978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b3c <_vfiprintf_r+0x24c>
 800597c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005980:	f04f 0901 	mov.w	r9, #1
 8005984:	4623      	mov	r3, r4
 8005986:	469a      	mov	sl, r3
 8005988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800598c:	b10a      	cbz	r2, 8005992 <_vfiprintf_r+0xa2>
 800598e:	2a25      	cmp	r2, #37	; 0x25
 8005990:	d1f9      	bne.n	8005986 <_vfiprintf_r+0x96>
 8005992:	ebba 0b04 	subs.w	fp, sl, r4
 8005996:	d00b      	beq.n	80059b0 <_vfiprintf_r+0xc0>
 8005998:	465b      	mov	r3, fp
 800599a:	4622      	mov	r2, r4
 800599c:	4629      	mov	r1, r5
 800599e:	4630      	mov	r0, r6
 80059a0:	f7ff ff93 	bl	80058ca <__sfputs_r>
 80059a4:	3001      	adds	r0, #1
 80059a6:	f000 80aa 	beq.w	8005afe <_vfiprintf_r+0x20e>
 80059aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ac:	445a      	add	r2, fp
 80059ae:	9209      	str	r2, [sp, #36]	; 0x24
 80059b0:	f89a 3000 	ldrb.w	r3, [sl]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a2 	beq.w	8005afe <_vfiprintf_r+0x20e>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c4:	f10a 0a01 	add.w	sl, sl, #1
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	9307      	str	r3, [sp, #28]
 80059cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059d0:	931a      	str	r3, [sp, #104]	; 0x68
 80059d2:	4654      	mov	r4, sl
 80059d4:	2205      	movs	r2, #5
 80059d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059da:	4858      	ldr	r0, [pc, #352]	; (8005b3c <_vfiprintf_r+0x24c>)
 80059dc:	f7fa fbf8 	bl	80001d0 <memchr>
 80059e0:	9a04      	ldr	r2, [sp, #16]
 80059e2:	b9d8      	cbnz	r0, 8005a1c <_vfiprintf_r+0x12c>
 80059e4:	06d1      	lsls	r1, r2, #27
 80059e6:	bf44      	itt	mi
 80059e8:	2320      	movmi	r3, #32
 80059ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ee:	0713      	lsls	r3, r2, #28
 80059f0:	bf44      	itt	mi
 80059f2:	232b      	movmi	r3, #43	; 0x2b
 80059f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f8:	f89a 3000 	ldrb.w	r3, [sl]
 80059fc:	2b2a      	cmp	r3, #42	; 0x2a
 80059fe:	d015      	beq.n	8005a2c <_vfiprintf_r+0x13c>
 8005a00:	9a07      	ldr	r2, [sp, #28]
 8005a02:	4654      	mov	r4, sl
 8005a04:	2000      	movs	r0, #0
 8005a06:	f04f 0c0a 	mov.w	ip, #10
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a10:	3b30      	subs	r3, #48	; 0x30
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d94e      	bls.n	8005ab4 <_vfiprintf_r+0x1c4>
 8005a16:	b1b0      	cbz	r0, 8005a46 <_vfiprintf_r+0x156>
 8005a18:	9207      	str	r2, [sp, #28]
 8005a1a:	e014      	b.n	8005a46 <_vfiprintf_r+0x156>
 8005a1c:	eba0 0308 	sub.w	r3, r0, r8
 8005a20:	fa09 f303 	lsl.w	r3, r9, r3
 8005a24:	4313      	orrs	r3, r2
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	46a2      	mov	sl, r4
 8005a2a:	e7d2      	b.n	80059d2 <_vfiprintf_r+0xe2>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	1d19      	adds	r1, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	9103      	str	r1, [sp, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bfbb      	ittet	lt
 8005a38:	425b      	neglt	r3, r3
 8005a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a3e:	9307      	strge	r3, [sp, #28]
 8005a40:	9307      	strlt	r3, [sp, #28]
 8005a42:	bfb8      	it	lt
 8005a44:	9204      	strlt	r2, [sp, #16]
 8005a46:	7823      	ldrb	r3, [r4, #0]
 8005a48:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4a:	d10c      	bne.n	8005a66 <_vfiprintf_r+0x176>
 8005a4c:	7863      	ldrb	r3, [r4, #1]
 8005a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a50:	d135      	bne.n	8005abe <_vfiprintf_r+0x1ce>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	1d1a      	adds	r2, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bfb8      	it	lt
 8005a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a62:	3402      	adds	r4, #2
 8005a64:	9305      	str	r3, [sp, #20]
 8005a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b4c <_vfiprintf_r+0x25c>
 8005a6a:	7821      	ldrb	r1, [r4, #0]
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	4650      	mov	r0, sl
 8005a70:	f7fa fbae 	bl	80001d0 <memchr>
 8005a74:	b140      	cbz	r0, 8005a88 <_vfiprintf_r+0x198>
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	eba0 000a 	sub.w	r0, r0, sl
 8005a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	4303      	orrs	r3, r0
 8005a84:	3401      	adds	r4, #1
 8005a86:	9304      	str	r3, [sp, #16]
 8005a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8c:	482c      	ldr	r0, [pc, #176]	; (8005b40 <_vfiprintf_r+0x250>)
 8005a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a92:	2206      	movs	r2, #6
 8005a94:	f7fa fb9c 	bl	80001d0 <memchr>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d03f      	beq.n	8005b1c <_vfiprintf_r+0x22c>
 8005a9c:	4b29      	ldr	r3, [pc, #164]	; (8005b44 <_vfiprintf_r+0x254>)
 8005a9e:	bb1b      	cbnz	r3, 8005ae8 <_vfiprintf_r+0x1f8>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	3307      	adds	r3, #7
 8005aa4:	f023 0307 	bic.w	r3, r3, #7
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aae:	443b      	add	r3, r7
 8005ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab2:	e767      	b.n	8005984 <_vfiprintf_r+0x94>
 8005ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab8:	460c      	mov	r4, r1
 8005aba:	2001      	movs	r0, #1
 8005abc:	e7a5      	b.n	8005a0a <_vfiprintf_r+0x11a>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	3401      	adds	r4, #1
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f04f 0c0a 	mov.w	ip, #10
 8005aca:	4620      	mov	r0, r4
 8005acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad0:	3a30      	subs	r2, #48	; 0x30
 8005ad2:	2a09      	cmp	r2, #9
 8005ad4:	d903      	bls.n	8005ade <_vfiprintf_r+0x1ee>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0c5      	beq.n	8005a66 <_vfiprintf_r+0x176>
 8005ada:	9105      	str	r1, [sp, #20]
 8005adc:	e7c3      	b.n	8005a66 <_vfiprintf_r+0x176>
 8005ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e7f0      	b.n	8005aca <_vfiprintf_r+0x1da>
 8005ae8:	ab03      	add	r3, sp, #12
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	462a      	mov	r2, r5
 8005aee:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <_vfiprintf_r+0x258>)
 8005af0:	a904      	add	r1, sp, #16
 8005af2:	4630      	mov	r0, r6
 8005af4:	f3af 8000 	nop.w
 8005af8:	4607      	mov	r7, r0
 8005afa:	1c78      	adds	r0, r7, #1
 8005afc:	d1d6      	bne.n	8005aac <_vfiprintf_r+0x1bc>
 8005afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b00:	07d9      	lsls	r1, r3, #31
 8005b02:	d405      	bmi.n	8005b10 <_vfiprintf_r+0x220>
 8005b04:	89ab      	ldrh	r3, [r5, #12]
 8005b06:	059a      	lsls	r2, r3, #22
 8005b08:	d402      	bmi.n	8005b10 <_vfiprintf_r+0x220>
 8005b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b0c:	f7ff fe6b 	bl	80057e6 <__retarget_lock_release_recursive>
 8005b10:	89ab      	ldrh	r3, [r5, #12]
 8005b12:	065b      	lsls	r3, r3, #25
 8005b14:	f53f af12 	bmi.w	800593c <_vfiprintf_r+0x4c>
 8005b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b1a:	e711      	b.n	8005940 <_vfiprintf_r+0x50>
 8005b1c:	ab03      	add	r3, sp, #12
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	462a      	mov	r2, r5
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <_vfiprintf_r+0x258>)
 8005b24:	a904      	add	r1, sp, #16
 8005b26:	4630      	mov	r0, r6
 8005b28:	f000 f880 	bl	8005c2c <_printf_i>
 8005b2c:	e7e4      	b.n	8005af8 <_vfiprintf_r+0x208>
 8005b2e:	bf00      	nop
 8005b30:	08006500 	.word	0x08006500
 8005b34:	08006520 	.word	0x08006520
 8005b38:	080064e0 	.word	0x080064e0
 8005b3c:	08006540 	.word	0x08006540
 8005b40:	0800654a 	.word	0x0800654a
 8005b44:	00000000 	.word	0x00000000
 8005b48:	080058cb 	.word	0x080058cb
 8005b4c:	08006546 	.word	0x08006546

08005b50 <_printf_common>:
 8005b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	4616      	mov	r6, r2
 8005b56:	4699      	mov	r9, r3
 8005b58:	688a      	ldr	r2, [r1, #8]
 8005b5a:	690b      	ldr	r3, [r1, #16]
 8005b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	bfb8      	it	lt
 8005b64:	4613      	movlt	r3, r2
 8005b66:	6033      	str	r3, [r6, #0]
 8005b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	b10a      	cbz	r2, 8005b76 <_printf_common+0x26>
 8005b72:	3301      	adds	r3, #1
 8005b74:	6033      	str	r3, [r6, #0]
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	0699      	lsls	r1, r3, #26
 8005b7a:	bf42      	ittt	mi
 8005b7c:	6833      	ldrmi	r3, [r6, #0]
 8005b7e:	3302      	addmi	r3, #2
 8005b80:	6033      	strmi	r3, [r6, #0]
 8005b82:	6825      	ldr	r5, [r4, #0]
 8005b84:	f015 0506 	ands.w	r5, r5, #6
 8005b88:	d106      	bne.n	8005b98 <_printf_common+0x48>
 8005b8a:	f104 0a19 	add.w	sl, r4, #25
 8005b8e:	68e3      	ldr	r3, [r4, #12]
 8005b90:	6832      	ldr	r2, [r6, #0]
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc26      	bgt.n	8005be6 <_printf_common+0x96>
 8005b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b9c:	1e13      	subs	r3, r2, #0
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	bf18      	it	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	0692      	lsls	r2, r2, #26
 8005ba6:	d42b      	bmi.n	8005c00 <_printf_common+0xb0>
 8005ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bac:	4649      	mov	r1, r9
 8005bae:	4638      	mov	r0, r7
 8005bb0:	47c0      	blx	r8
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d01e      	beq.n	8005bf4 <_printf_common+0xa4>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	68e5      	ldr	r5, [r4, #12]
 8005bba:	6832      	ldr	r2, [r6, #0]
 8005bbc:	f003 0306 	and.w	r3, r3, #6
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	bf08      	it	eq
 8005bc4:	1aad      	subeq	r5, r5, r2
 8005bc6:	68a3      	ldr	r3, [r4, #8]
 8005bc8:	6922      	ldr	r2, [r4, #16]
 8005bca:	bf0c      	ite	eq
 8005bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd0:	2500      	movne	r5, #0
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	bfc4      	itt	gt
 8005bd6:	1a9b      	subgt	r3, r3, r2
 8005bd8:	18ed      	addgt	r5, r5, r3
 8005bda:	2600      	movs	r6, #0
 8005bdc:	341a      	adds	r4, #26
 8005bde:	42b5      	cmp	r5, r6
 8005be0:	d11a      	bne.n	8005c18 <_printf_common+0xc8>
 8005be2:	2000      	movs	r0, #0
 8005be4:	e008      	b.n	8005bf8 <_printf_common+0xa8>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4652      	mov	r2, sl
 8005bea:	4649      	mov	r1, r9
 8005bec:	4638      	mov	r0, r7
 8005bee:	47c0      	blx	r8
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d103      	bne.n	8005bfc <_printf_common+0xac>
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	e7c6      	b.n	8005b8e <_printf_common+0x3e>
 8005c00:	18e1      	adds	r1, r4, r3
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	2030      	movs	r0, #48	; 0x30
 8005c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c0a:	4422      	add	r2, r4
 8005c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c14:	3302      	adds	r3, #2
 8005c16:	e7c7      	b.n	8005ba8 <_printf_common+0x58>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	4638      	mov	r0, r7
 8005c20:	47c0      	blx	r8
 8005c22:	3001      	adds	r0, #1
 8005c24:	d0e6      	beq.n	8005bf4 <_printf_common+0xa4>
 8005c26:	3601      	adds	r6, #1
 8005c28:	e7d9      	b.n	8005bde <_printf_common+0x8e>
	...

08005c2c <_printf_i>:
 8005c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	460c      	mov	r4, r1
 8005c32:	4691      	mov	r9, r2
 8005c34:	7e27      	ldrb	r7, [r4, #24]
 8005c36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c38:	2f78      	cmp	r7, #120	; 0x78
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	469a      	mov	sl, r3
 8005c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c42:	d807      	bhi.n	8005c54 <_printf_i+0x28>
 8005c44:	2f62      	cmp	r7, #98	; 0x62
 8005c46:	d80a      	bhi.n	8005c5e <_printf_i+0x32>
 8005c48:	2f00      	cmp	r7, #0
 8005c4a:	f000 80d8 	beq.w	8005dfe <_printf_i+0x1d2>
 8005c4e:	2f58      	cmp	r7, #88	; 0x58
 8005c50:	f000 80a3 	beq.w	8005d9a <_printf_i+0x16e>
 8005c54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c5c:	e03a      	b.n	8005cd4 <_printf_i+0xa8>
 8005c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c62:	2b15      	cmp	r3, #21
 8005c64:	d8f6      	bhi.n	8005c54 <_printf_i+0x28>
 8005c66:	a001      	add	r0, pc, #4	; (adr r0, 8005c6c <_printf_i+0x40>)
 8005c68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c6c:	08005cc5 	.word	0x08005cc5
 8005c70:	08005cd9 	.word	0x08005cd9
 8005c74:	08005c55 	.word	0x08005c55
 8005c78:	08005c55 	.word	0x08005c55
 8005c7c:	08005c55 	.word	0x08005c55
 8005c80:	08005c55 	.word	0x08005c55
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005c55 	.word	0x08005c55
 8005c8c:	08005c55 	.word	0x08005c55
 8005c90:	08005c55 	.word	0x08005c55
 8005c94:	08005c55 	.word	0x08005c55
 8005c98:	08005de5 	.word	0x08005de5
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005dc7 	.word	0x08005dc7
 8005ca4:	08005c55 	.word	0x08005c55
 8005ca8:	08005c55 	.word	0x08005c55
 8005cac:	08005e07 	.word	0x08005e07
 8005cb0:	08005c55 	.word	0x08005c55
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005c55 	.word	0x08005c55
 8005cbc:	08005c55 	.word	0x08005c55
 8005cc0:	08005dcf 	.word	0x08005dcf
 8005cc4:	680b      	ldr	r3, [r1, #0]
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	600a      	str	r2, [r1, #0]
 8005ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0a3      	b.n	8005e20 <_printf_i+0x1f4>
 8005cd8:	6825      	ldr	r5, [r4, #0]
 8005cda:	6808      	ldr	r0, [r1, #0]
 8005cdc:	062e      	lsls	r6, r5, #24
 8005cde:	f100 0304 	add.w	r3, r0, #4
 8005ce2:	d50a      	bpl.n	8005cfa <_printf_i+0xce>
 8005ce4:	6805      	ldr	r5, [r0, #0]
 8005ce6:	600b      	str	r3, [r1, #0]
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	da03      	bge.n	8005cf4 <_printf_i+0xc8>
 8005cec:	232d      	movs	r3, #45	; 0x2d
 8005cee:	426d      	negs	r5, r5
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	485e      	ldr	r0, [pc, #376]	; (8005e70 <_printf_i+0x244>)
 8005cf6:	230a      	movs	r3, #10
 8005cf8:	e019      	b.n	8005d2e <_printf_i+0x102>
 8005cfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cfe:	6805      	ldr	r5, [r0, #0]
 8005d00:	600b      	str	r3, [r1, #0]
 8005d02:	bf18      	it	ne
 8005d04:	b22d      	sxthne	r5, r5
 8005d06:	e7ef      	b.n	8005ce8 <_printf_i+0xbc>
 8005d08:	680b      	ldr	r3, [r1, #0]
 8005d0a:	6825      	ldr	r5, [r4, #0]
 8005d0c:	1d18      	adds	r0, r3, #4
 8005d0e:	6008      	str	r0, [r1, #0]
 8005d10:	0628      	lsls	r0, r5, #24
 8005d12:	d501      	bpl.n	8005d18 <_printf_i+0xec>
 8005d14:	681d      	ldr	r5, [r3, #0]
 8005d16:	e002      	b.n	8005d1e <_printf_i+0xf2>
 8005d18:	0669      	lsls	r1, r5, #25
 8005d1a:	d5fb      	bpl.n	8005d14 <_printf_i+0xe8>
 8005d1c:	881d      	ldrh	r5, [r3, #0]
 8005d1e:	4854      	ldr	r0, [pc, #336]	; (8005e70 <_printf_i+0x244>)
 8005d20:	2f6f      	cmp	r7, #111	; 0x6f
 8005d22:	bf0c      	ite	eq
 8005d24:	2308      	moveq	r3, #8
 8005d26:	230a      	movne	r3, #10
 8005d28:	2100      	movs	r1, #0
 8005d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d2e:	6866      	ldr	r6, [r4, #4]
 8005d30:	60a6      	str	r6, [r4, #8]
 8005d32:	2e00      	cmp	r6, #0
 8005d34:	bfa2      	ittt	ge
 8005d36:	6821      	ldrge	r1, [r4, #0]
 8005d38:	f021 0104 	bicge.w	r1, r1, #4
 8005d3c:	6021      	strge	r1, [r4, #0]
 8005d3e:	b90d      	cbnz	r5, 8005d44 <_printf_i+0x118>
 8005d40:	2e00      	cmp	r6, #0
 8005d42:	d04d      	beq.n	8005de0 <_printf_i+0x1b4>
 8005d44:	4616      	mov	r6, r2
 8005d46:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d4a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d4e:	5dc7      	ldrb	r7, [r0, r7]
 8005d50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d54:	462f      	mov	r7, r5
 8005d56:	42bb      	cmp	r3, r7
 8005d58:	460d      	mov	r5, r1
 8005d5a:	d9f4      	bls.n	8005d46 <_printf_i+0x11a>
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d10b      	bne.n	8005d78 <_printf_i+0x14c>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07df      	lsls	r7, r3, #31
 8005d64:	d508      	bpl.n	8005d78 <_printf_i+0x14c>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	6861      	ldr	r1, [r4, #4]
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	bfde      	ittt	le
 8005d6e:	2330      	movle	r3, #48	; 0x30
 8005d70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d78:	1b92      	subs	r2, r2, r6
 8005d7a:	6122      	str	r2, [r4, #16]
 8005d7c:	f8cd a000 	str.w	sl, [sp]
 8005d80:	464b      	mov	r3, r9
 8005d82:	aa03      	add	r2, sp, #12
 8005d84:	4621      	mov	r1, r4
 8005d86:	4640      	mov	r0, r8
 8005d88:	f7ff fee2 	bl	8005b50 <_printf_common>
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d14c      	bne.n	8005e2a <_printf_i+0x1fe>
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	b004      	add	sp, #16
 8005d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9a:	4835      	ldr	r0, [pc, #212]	; (8005e70 <_printf_i+0x244>)
 8005d9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	680e      	ldr	r6, [r1, #0]
 8005da4:	061f      	lsls	r7, r3, #24
 8005da6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005daa:	600e      	str	r6, [r1, #0]
 8005dac:	d514      	bpl.n	8005dd8 <_printf_i+0x1ac>
 8005dae:	07d9      	lsls	r1, r3, #31
 8005db0:	bf44      	itt	mi
 8005db2:	f043 0320 	orrmi.w	r3, r3, #32
 8005db6:	6023      	strmi	r3, [r4, #0]
 8005db8:	b91d      	cbnz	r5, 8005dc2 <_printf_i+0x196>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	f023 0320 	bic.w	r3, r3, #32
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	2310      	movs	r3, #16
 8005dc4:	e7b0      	b.n	8005d28 <_printf_i+0xfc>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	f043 0320 	orr.w	r3, r3, #32
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	2378      	movs	r3, #120	; 0x78
 8005dd0:	4828      	ldr	r0, [pc, #160]	; (8005e74 <_printf_i+0x248>)
 8005dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dd6:	e7e3      	b.n	8005da0 <_printf_i+0x174>
 8005dd8:	065e      	lsls	r6, r3, #25
 8005dda:	bf48      	it	mi
 8005ddc:	b2ad      	uxthmi	r5, r5
 8005dde:	e7e6      	b.n	8005dae <_printf_i+0x182>
 8005de0:	4616      	mov	r6, r2
 8005de2:	e7bb      	b.n	8005d5c <_printf_i+0x130>
 8005de4:	680b      	ldr	r3, [r1, #0]
 8005de6:	6826      	ldr	r6, [r4, #0]
 8005de8:	6960      	ldr	r0, [r4, #20]
 8005dea:	1d1d      	adds	r5, r3, #4
 8005dec:	600d      	str	r5, [r1, #0]
 8005dee:	0635      	lsls	r5, r6, #24
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	d501      	bpl.n	8005df8 <_printf_i+0x1cc>
 8005df4:	6018      	str	r0, [r3, #0]
 8005df6:	e002      	b.n	8005dfe <_printf_i+0x1d2>
 8005df8:	0671      	lsls	r1, r6, #25
 8005dfa:	d5fb      	bpl.n	8005df4 <_printf_i+0x1c8>
 8005dfc:	8018      	strh	r0, [r3, #0]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	4616      	mov	r6, r2
 8005e04:	e7ba      	b.n	8005d7c <_printf_i+0x150>
 8005e06:	680b      	ldr	r3, [r1, #0]
 8005e08:	1d1a      	adds	r2, r3, #4
 8005e0a:	600a      	str	r2, [r1, #0]
 8005e0c:	681e      	ldr	r6, [r3, #0]
 8005e0e:	6862      	ldr	r2, [r4, #4]
 8005e10:	2100      	movs	r1, #0
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7fa f9dc 	bl	80001d0 <memchr>
 8005e18:	b108      	cbz	r0, 8005e1e <_printf_i+0x1f2>
 8005e1a:	1b80      	subs	r0, r0, r6
 8005e1c:	6060      	str	r0, [r4, #4]
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	2300      	movs	r3, #0
 8005e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e28:	e7a8      	b.n	8005d7c <_printf_i+0x150>
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	4632      	mov	r2, r6
 8005e2e:	4649      	mov	r1, r9
 8005e30:	4640      	mov	r0, r8
 8005e32:	47d0      	blx	sl
 8005e34:	3001      	adds	r0, #1
 8005e36:	d0ab      	beq.n	8005d90 <_printf_i+0x164>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	079b      	lsls	r3, r3, #30
 8005e3c:	d413      	bmi.n	8005e66 <_printf_i+0x23a>
 8005e3e:	68e0      	ldr	r0, [r4, #12]
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	4298      	cmp	r0, r3
 8005e44:	bfb8      	it	lt
 8005e46:	4618      	movlt	r0, r3
 8005e48:	e7a4      	b.n	8005d94 <_printf_i+0x168>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4640      	mov	r0, r8
 8005e52:	47d0      	blx	sl
 8005e54:	3001      	adds	r0, #1
 8005e56:	d09b      	beq.n	8005d90 <_printf_i+0x164>
 8005e58:	3501      	adds	r5, #1
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	9903      	ldr	r1, [sp, #12]
 8005e5e:	1a5b      	subs	r3, r3, r1
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dcf2      	bgt.n	8005e4a <_printf_i+0x21e>
 8005e64:	e7eb      	b.n	8005e3e <_printf_i+0x212>
 8005e66:	2500      	movs	r5, #0
 8005e68:	f104 0619 	add.w	r6, r4, #25
 8005e6c:	e7f5      	b.n	8005e5a <_printf_i+0x22e>
 8005e6e:	bf00      	nop
 8005e70:	08006551 	.word	0x08006551
 8005e74:	08006562 	.word	0x08006562

08005e78 <_sbrk_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d06      	ldr	r5, [pc, #24]	; (8005e94 <_sbrk_r+0x1c>)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	602b      	str	r3, [r5, #0]
 8005e84:	f7fb fcdc 	bl	8001840 <_sbrk>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_sbrk_r+0x1a>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_sbrk_r+0x1a>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20000604 	.word	0x20000604

08005e98 <__sread>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	f000 fab4 	bl	800640c <_read_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	bfab      	itete	ge
 8005ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8005eac:	181b      	addge	r3, r3, r0
 8005eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eb2:	bfac      	ite	ge
 8005eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eb6:	81a3      	strhlt	r3, [r4, #12]
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <__swrite>:
 8005eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebe:	461f      	mov	r7, r3
 8005ec0:	898b      	ldrh	r3, [r1, #12]
 8005ec2:	05db      	lsls	r3, r3, #23
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	4616      	mov	r6, r2
 8005eca:	d505      	bpl.n	8005ed8 <__swrite+0x1e>
 8005ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f000 f9c8 	bl	8006268 <_lseek_r>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee2:	81a3      	strh	r3, [r4, #12]
 8005ee4:	4632      	mov	r2, r6
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	4628      	mov	r0, r5
 8005eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eee:	f000 b869 	b.w	8005fc4 <_write_r>

08005ef2 <__sseek>:
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efa:	f000 f9b5 	bl	8006268 <_lseek_r>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	bf15      	itete	ne
 8005f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f0e:	81a3      	strheq	r3, [r4, #12]
 8005f10:	bf18      	it	ne
 8005f12:	81a3      	strhne	r3, [r4, #12]
 8005f14:	bd10      	pop	{r4, pc}

08005f16 <__sclose>:
 8005f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1a:	f000 b8d3 	b.w	80060c4 <_close_r>
	...

08005f20 <__swbuf_r>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	460e      	mov	r6, r1
 8005f24:	4614      	mov	r4, r2
 8005f26:	4605      	mov	r5, r0
 8005f28:	b118      	cbz	r0, 8005f32 <__swbuf_r+0x12>
 8005f2a:	6983      	ldr	r3, [r0, #24]
 8005f2c:	b90b      	cbnz	r3, 8005f32 <__swbuf_r+0x12>
 8005f2e:	f7ff fbbb 	bl	80056a8 <__sinit>
 8005f32:	4b21      	ldr	r3, [pc, #132]	; (8005fb8 <__swbuf_r+0x98>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	d12b      	bne.n	8005f90 <__swbuf_r+0x70>
 8005f38:	686c      	ldr	r4, [r5, #4]
 8005f3a:	69a3      	ldr	r3, [r4, #24]
 8005f3c:	60a3      	str	r3, [r4, #8]
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	071a      	lsls	r2, r3, #28
 8005f42:	d52f      	bpl.n	8005fa4 <__swbuf_r+0x84>
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	b36b      	cbz	r3, 8005fa4 <__swbuf_r+0x84>
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	1ac0      	subs	r0, r0, r3
 8005f4e:	6963      	ldr	r3, [r4, #20]
 8005f50:	b2f6      	uxtb	r6, r6
 8005f52:	4283      	cmp	r3, r0
 8005f54:	4637      	mov	r7, r6
 8005f56:	dc04      	bgt.n	8005f62 <__swbuf_r+0x42>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 f948 	bl	80061f0 <_fflush_r>
 8005f60:	bb30      	cbnz	r0, 8005fb0 <__swbuf_r+0x90>
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	60a3      	str	r3, [r4, #8]
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	701e      	strb	r6, [r3, #0]
 8005f70:	6963      	ldr	r3, [r4, #20]
 8005f72:	3001      	adds	r0, #1
 8005f74:	4283      	cmp	r3, r0
 8005f76:	d004      	beq.n	8005f82 <__swbuf_r+0x62>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	07db      	lsls	r3, r3, #31
 8005f7c:	d506      	bpl.n	8005f8c <__swbuf_r+0x6c>
 8005f7e:	2e0a      	cmp	r6, #10
 8005f80:	d104      	bne.n	8005f8c <__swbuf_r+0x6c>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 f933 	bl	80061f0 <_fflush_r>
 8005f8a:	b988      	cbnz	r0, 8005fb0 <__swbuf_r+0x90>
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f90:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <__swbuf_r+0x9c>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d101      	bne.n	8005f9a <__swbuf_r+0x7a>
 8005f96:	68ac      	ldr	r4, [r5, #8]
 8005f98:	e7cf      	b.n	8005f3a <__swbuf_r+0x1a>
 8005f9a:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <__swbuf_r+0xa0>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	bf08      	it	eq
 8005fa0:	68ec      	ldreq	r4, [r5, #12]
 8005fa2:	e7ca      	b.n	8005f3a <__swbuf_r+0x1a>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f000 f81e 	bl	8005fe8 <__swsetup_r>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d0cb      	beq.n	8005f48 <__swbuf_r+0x28>
 8005fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8005fb4:	e7ea      	b.n	8005f8c <__swbuf_r+0x6c>
 8005fb6:	bf00      	nop
 8005fb8:	08006500 	.word	0x08006500
 8005fbc:	08006520 	.word	0x08006520
 8005fc0:	080064e0 	.word	0x080064e0

08005fc4 <_write_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	; (8005fe4 <_write_r+0x20>)
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fb f95e 	bl	8001294 <_write>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_write_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_write_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20000604 	.word	0x20000604

08005fe8 <__swsetup_r>:
 8005fe8:	4b32      	ldr	r3, [pc, #200]	; (80060b4 <__swsetup_r+0xcc>)
 8005fea:	b570      	push	{r4, r5, r6, lr}
 8005fec:	681d      	ldr	r5, [r3, #0]
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	b125      	cbz	r5, 8005ffe <__swsetup_r+0x16>
 8005ff4:	69ab      	ldr	r3, [r5, #24]
 8005ff6:	b913      	cbnz	r3, 8005ffe <__swsetup_r+0x16>
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f7ff fb55 	bl	80056a8 <__sinit>
 8005ffe:	4b2e      	ldr	r3, [pc, #184]	; (80060b8 <__swsetup_r+0xd0>)
 8006000:	429c      	cmp	r4, r3
 8006002:	d10f      	bne.n	8006024 <__swsetup_r+0x3c>
 8006004:	686c      	ldr	r4, [r5, #4]
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800600c:	0719      	lsls	r1, r3, #28
 800600e:	d42c      	bmi.n	800606a <__swsetup_r+0x82>
 8006010:	06dd      	lsls	r5, r3, #27
 8006012:	d411      	bmi.n	8006038 <__swsetup_r+0x50>
 8006014:	2309      	movs	r3, #9
 8006016:	6033      	str	r3, [r6, #0]
 8006018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	e03e      	b.n	80060a2 <__swsetup_r+0xba>
 8006024:	4b25      	ldr	r3, [pc, #148]	; (80060bc <__swsetup_r+0xd4>)
 8006026:	429c      	cmp	r4, r3
 8006028:	d101      	bne.n	800602e <__swsetup_r+0x46>
 800602a:	68ac      	ldr	r4, [r5, #8]
 800602c:	e7eb      	b.n	8006006 <__swsetup_r+0x1e>
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <__swsetup_r+0xd8>)
 8006030:	429c      	cmp	r4, r3
 8006032:	bf08      	it	eq
 8006034:	68ec      	ldreq	r4, [r5, #12]
 8006036:	e7e6      	b.n	8006006 <__swsetup_r+0x1e>
 8006038:	0758      	lsls	r0, r3, #29
 800603a:	d512      	bpl.n	8006062 <__swsetup_r+0x7a>
 800603c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603e:	b141      	cbz	r1, 8006052 <__swsetup_r+0x6a>
 8006040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006044:	4299      	cmp	r1, r3
 8006046:	d002      	beq.n	800604e <__swsetup_r+0x66>
 8006048:	4630      	mov	r0, r6
 800604a:	f000 f98f 	bl	800636c <_free_r>
 800604e:	2300      	movs	r3, #0
 8006050:	6363      	str	r3, [r4, #52]	; 0x34
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	2300      	movs	r3, #0
 800605c:	6063      	str	r3, [r4, #4]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f043 0308 	orr.w	r3, r3, #8
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	b94b      	cbnz	r3, 8006082 <__swsetup_r+0x9a>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006078:	d003      	beq.n	8006082 <__swsetup_r+0x9a>
 800607a:	4621      	mov	r1, r4
 800607c:	4630      	mov	r0, r6
 800607e:	f000 f929 	bl	80062d4 <__smakebuf_r>
 8006082:	89a0      	ldrh	r0, [r4, #12]
 8006084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006088:	f010 0301 	ands.w	r3, r0, #1
 800608c:	d00a      	beq.n	80060a4 <__swsetup_r+0xbc>
 800608e:	2300      	movs	r3, #0
 8006090:	60a3      	str	r3, [r4, #8]
 8006092:	6963      	ldr	r3, [r4, #20]
 8006094:	425b      	negs	r3, r3
 8006096:	61a3      	str	r3, [r4, #24]
 8006098:	6923      	ldr	r3, [r4, #16]
 800609a:	b943      	cbnz	r3, 80060ae <__swsetup_r+0xc6>
 800609c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060a0:	d1ba      	bne.n	8006018 <__swsetup_r+0x30>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	0781      	lsls	r1, r0, #30
 80060a6:	bf58      	it	pl
 80060a8:	6963      	ldrpl	r3, [r4, #20]
 80060aa:	60a3      	str	r3, [r4, #8]
 80060ac:	e7f4      	b.n	8006098 <__swsetup_r+0xb0>
 80060ae:	2000      	movs	r0, #0
 80060b0:	e7f7      	b.n	80060a2 <__swsetup_r+0xba>
 80060b2:	bf00      	nop
 80060b4:	2000000c 	.word	0x2000000c
 80060b8:	08006500 	.word	0x08006500
 80060bc:	08006520 	.word	0x08006520
 80060c0:	080064e0 	.word	0x080064e0

080060c4 <_close_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d06      	ldr	r5, [pc, #24]	; (80060e0 <_close_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fb fb82 	bl	80017d8 <_close>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_close_r+0x1a>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_close_r+0x1a>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20000604 	.word	0x20000604

080060e4 <__sflush_r>:
 80060e4:	898a      	ldrh	r2, [r1, #12]
 80060e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ea:	4605      	mov	r5, r0
 80060ec:	0710      	lsls	r0, r2, #28
 80060ee:	460c      	mov	r4, r1
 80060f0:	d458      	bmi.n	80061a4 <__sflush_r+0xc0>
 80060f2:	684b      	ldr	r3, [r1, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	dc05      	bgt.n	8006104 <__sflush_r+0x20>
 80060f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	dc02      	bgt.n	8006104 <__sflush_r+0x20>
 80060fe:	2000      	movs	r0, #0
 8006100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006106:	2e00      	cmp	r6, #0
 8006108:	d0f9      	beq.n	80060fe <__sflush_r+0x1a>
 800610a:	2300      	movs	r3, #0
 800610c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006110:	682f      	ldr	r7, [r5, #0]
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	d032      	beq.n	800617c <__sflush_r+0x98>
 8006116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	075a      	lsls	r2, r3, #29
 800611c:	d505      	bpl.n	800612a <__sflush_r+0x46>
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	1ac0      	subs	r0, r0, r3
 8006122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006124:	b10b      	cbz	r3, 800612a <__sflush_r+0x46>
 8006126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006128:	1ac0      	subs	r0, r0, r3
 800612a:	2300      	movs	r3, #0
 800612c:	4602      	mov	r2, r0
 800612e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006130:	6a21      	ldr	r1, [r4, #32]
 8006132:	4628      	mov	r0, r5
 8006134:	47b0      	blx	r6
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	d106      	bne.n	800614a <__sflush_r+0x66>
 800613c:	6829      	ldr	r1, [r5, #0]
 800613e:	291d      	cmp	r1, #29
 8006140:	d82c      	bhi.n	800619c <__sflush_r+0xb8>
 8006142:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <__sflush_r+0x108>)
 8006144:	40ca      	lsrs	r2, r1
 8006146:	07d6      	lsls	r6, r2, #31
 8006148:	d528      	bpl.n	800619c <__sflush_r+0xb8>
 800614a:	2200      	movs	r2, #0
 800614c:	6062      	str	r2, [r4, #4]
 800614e:	04d9      	lsls	r1, r3, #19
 8006150:	6922      	ldr	r2, [r4, #16]
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	d504      	bpl.n	8006160 <__sflush_r+0x7c>
 8006156:	1c42      	adds	r2, r0, #1
 8006158:	d101      	bne.n	800615e <__sflush_r+0x7a>
 800615a:	682b      	ldr	r3, [r5, #0]
 800615c:	b903      	cbnz	r3, 8006160 <__sflush_r+0x7c>
 800615e:	6560      	str	r0, [r4, #84]	; 0x54
 8006160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006162:	602f      	str	r7, [r5, #0]
 8006164:	2900      	cmp	r1, #0
 8006166:	d0ca      	beq.n	80060fe <__sflush_r+0x1a>
 8006168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800616c:	4299      	cmp	r1, r3
 800616e:	d002      	beq.n	8006176 <__sflush_r+0x92>
 8006170:	4628      	mov	r0, r5
 8006172:	f000 f8fb 	bl	800636c <_free_r>
 8006176:	2000      	movs	r0, #0
 8006178:	6360      	str	r0, [r4, #52]	; 0x34
 800617a:	e7c1      	b.n	8006100 <__sflush_r+0x1c>
 800617c:	6a21      	ldr	r1, [r4, #32]
 800617e:	2301      	movs	r3, #1
 8006180:	4628      	mov	r0, r5
 8006182:	47b0      	blx	r6
 8006184:	1c41      	adds	r1, r0, #1
 8006186:	d1c7      	bne.n	8006118 <__sflush_r+0x34>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0c4      	beq.n	8006118 <__sflush_r+0x34>
 800618e:	2b1d      	cmp	r3, #29
 8006190:	d001      	beq.n	8006196 <__sflush_r+0xb2>
 8006192:	2b16      	cmp	r3, #22
 8006194:	d101      	bne.n	800619a <__sflush_r+0xb6>
 8006196:	602f      	str	r7, [r5, #0]
 8006198:	e7b1      	b.n	80060fe <__sflush_r+0x1a>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	e7ad      	b.n	8006100 <__sflush_r+0x1c>
 80061a4:	690f      	ldr	r7, [r1, #16]
 80061a6:	2f00      	cmp	r7, #0
 80061a8:	d0a9      	beq.n	80060fe <__sflush_r+0x1a>
 80061aa:	0793      	lsls	r3, r2, #30
 80061ac:	680e      	ldr	r6, [r1, #0]
 80061ae:	bf08      	it	eq
 80061b0:	694b      	ldreq	r3, [r1, #20]
 80061b2:	600f      	str	r7, [r1, #0]
 80061b4:	bf18      	it	ne
 80061b6:	2300      	movne	r3, #0
 80061b8:	eba6 0807 	sub.w	r8, r6, r7
 80061bc:	608b      	str	r3, [r1, #8]
 80061be:	f1b8 0f00 	cmp.w	r8, #0
 80061c2:	dd9c      	ble.n	80060fe <__sflush_r+0x1a>
 80061c4:	6a21      	ldr	r1, [r4, #32]
 80061c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061c8:	4643      	mov	r3, r8
 80061ca:	463a      	mov	r2, r7
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b0      	blx	r6
 80061d0:	2800      	cmp	r0, #0
 80061d2:	dc06      	bgt.n	80061e2 <__sflush_r+0xfe>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	e78e      	b.n	8006100 <__sflush_r+0x1c>
 80061e2:	4407      	add	r7, r0
 80061e4:	eba8 0800 	sub.w	r8, r8, r0
 80061e8:	e7e9      	b.n	80061be <__sflush_r+0xda>
 80061ea:	bf00      	nop
 80061ec:	20400001 	.word	0x20400001

080061f0 <_fflush_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	690b      	ldr	r3, [r1, #16]
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b913      	cbnz	r3, 8006200 <_fflush_r+0x10>
 80061fa:	2500      	movs	r5, #0
 80061fc:	4628      	mov	r0, r5
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	b118      	cbz	r0, 800620a <_fflush_r+0x1a>
 8006202:	6983      	ldr	r3, [r0, #24]
 8006204:	b90b      	cbnz	r3, 800620a <_fflush_r+0x1a>
 8006206:	f7ff fa4f 	bl	80056a8 <__sinit>
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <_fflush_r+0x6c>)
 800620c:	429c      	cmp	r4, r3
 800620e:	d11b      	bne.n	8006248 <_fflush_r+0x58>
 8006210:	686c      	ldr	r4, [r5, #4]
 8006212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ef      	beq.n	80061fa <_fflush_r+0xa>
 800621a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800621c:	07d0      	lsls	r0, r2, #31
 800621e:	d404      	bmi.n	800622a <_fflush_r+0x3a>
 8006220:	0599      	lsls	r1, r3, #22
 8006222:	d402      	bmi.n	800622a <_fflush_r+0x3a>
 8006224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006226:	f7ff fadd 	bl	80057e4 <__retarget_lock_acquire_recursive>
 800622a:	4628      	mov	r0, r5
 800622c:	4621      	mov	r1, r4
 800622e:	f7ff ff59 	bl	80060e4 <__sflush_r>
 8006232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006234:	07da      	lsls	r2, r3, #31
 8006236:	4605      	mov	r5, r0
 8006238:	d4e0      	bmi.n	80061fc <_fflush_r+0xc>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	059b      	lsls	r3, r3, #22
 800623e:	d4dd      	bmi.n	80061fc <_fflush_r+0xc>
 8006240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006242:	f7ff fad0 	bl	80057e6 <__retarget_lock_release_recursive>
 8006246:	e7d9      	b.n	80061fc <_fflush_r+0xc>
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <_fflush_r+0x70>)
 800624a:	429c      	cmp	r4, r3
 800624c:	d101      	bne.n	8006252 <_fflush_r+0x62>
 800624e:	68ac      	ldr	r4, [r5, #8]
 8006250:	e7df      	b.n	8006212 <_fflush_r+0x22>
 8006252:	4b04      	ldr	r3, [pc, #16]	; (8006264 <_fflush_r+0x74>)
 8006254:	429c      	cmp	r4, r3
 8006256:	bf08      	it	eq
 8006258:	68ec      	ldreq	r4, [r5, #12]
 800625a:	e7da      	b.n	8006212 <_fflush_r+0x22>
 800625c:	08006500 	.word	0x08006500
 8006260:	08006520 	.word	0x08006520
 8006264:	080064e0 	.word	0x080064e0

08006268 <_lseek_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d07      	ldr	r5, [pc, #28]	; (8006288 <_lseek_r+0x20>)
 800626c:	4604      	mov	r4, r0
 800626e:	4608      	mov	r0, r1
 8006270:	4611      	mov	r1, r2
 8006272:	2200      	movs	r2, #0
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f7fb fad5 	bl	8001826 <_lseek>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_lseek_r+0x1e>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_lseek_r+0x1e>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20000604 	.word	0x20000604

0800628c <__swhatbuf_r>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006294:	2900      	cmp	r1, #0
 8006296:	b096      	sub	sp, #88	; 0x58
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	da07      	bge.n	80062ae <__swhatbuf_r+0x22>
 800629e:	2300      	movs	r3, #0
 80062a0:	602b      	str	r3, [r5, #0]
 80062a2:	89b3      	ldrh	r3, [r6, #12]
 80062a4:	061a      	lsls	r2, r3, #24
 80062a6:	d410      	bmi.n	80062ca <__swhatbuf_r+0x3e>
 80062a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ac:	e00e      	b.n	80062cc <__swhatbuf_r+0x40>
 80062ae:	466a      	mov	r2, sp
 80062b0:	f000 f8be 	bl	8006430 <_fstat_r>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	dbf2      	blt.n	800629e <__swhatbuf_r+0x12>
 80062b8:	9a01      	ldr	r2, [sp, #4]
 80062ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062c2:	425a      	negs	r2, r3
 80062c4:	415a      	adcs	r2, r3
 80062c6:	602a      	str	r2, [r5, #0]
 80062c8:	e7ee      	b.n	80062a8 <__swhatbuf_r+0x1c>
 80062ca:	2340      	movs	r3, #64	; 0x40
 80062cc:	2000      	movs	r0, #0
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	b016      	add	sp, #88	; 0x58
 80062d2:	bd70      	pop	{r4, r5, r6, pc}

080062d4 <__smakebuf_r>:
 80062d4:	898b      	ldrh	r3, [r1, #12]
 80062d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062d8:	079d      	lsls	r5, r3, #30
 80062da:	4606      	mov	r6, r0
 80062dc:	460c      	mov	r4, r1
 80062de:	d507      	bpl.n	80062f0 <__smakebuf_r+0x1c>
 80062e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	2301      	movs	r3, #1
 80062ea:	6163      	str	r3, [r4, #20]
 80062ec:	b002      	add	sp, #8
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	ab01      	add	r3, sp, #4
 80062f2:	466a      	mov	r2, sp
 80062f4:	f7ff ffca 	bl	800628c <__swhatbuf_r>
 80062f8:	9900      	ldr	r1, [sp, #0]
 80062fa:	4605      	mov	r5, r0
 80062fc:	4630      	mov	r0, r6
 80062fe:	f7ff fa73 	bl	80057e8 <_malloc_r>
 8006302:	b948      	cbnz	r0, 8006318 <__smakebuf_r+0x44>
 8006304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006308:	059a      	lsls	r2, r3, #22
 800630a:	d4ef      	bmi.n	80062ec <__smakebuf_r+0x18>
 800630c:	f023 0303 	bic.w	r3, r3, #3
 8006310:	f043 0302 	orr.w	r3, r3, #2
 8006314:	81a3      	strh	r3, [r4, #12]
 8006316:	e7e3      	b.n	80062e0 <__smakebuf_r+0xc>
 8006318:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <__smakebuf_r+0x7c>)
 800631a:	62b3      	str	r3, [r6, #40]	; 0x28
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	6020      	str	r0, [r4, #0]
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	9b00      	ldr	r3, [sp, #0]
 8006328:	6163      	str	r3, [r4, #20]
 800632a:	9b01      	ldr	r3, [sp, #4]
 800632c:	6120      	str	r0, [r4, #16]
 800632e:	b15b      	cbz	r3, 8006348 <__smakebuf_r+0x74>
 8006330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006334:	4630      	mov	r0, r6
 8006336:	f000 f88d 	bl	8006454 <_isatty_r>
 800633a:	b128      	cbz	r0, 8006348 <__smakebuf_r+0x74>
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	89a0      	ldrh	r0, [r4, #12]
 800634a:	4305      	orrs	r5, r0
 800634c:	81a5      	strh	r5, [r4, #12]
 800634e:	e7cd      	b.n	80062ec <__smakebuf_r+0x18>
 8006350:	08005641 	.word	0x08005641

08006354 <__malloc_lock>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__malloc_lock+0x8>)
 8006356:	f7ff ba45 	b.w	80057e4 <__retarget_lock_acquire_recursive>
 800635a:	bf00      	nop
 800635c:	200005fc 	.word	0x200005fc

08006360 <__malloc_unlock>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__malloc_unlock+0x8>)
 8006362:	f7ff ba40 	b.w	80057e6 <__retarget_lock_release_recursive>
 8006366:	bf00      	nop
 8006368:	200005fc 	.word	0x200005fc

0800636c <_free_r>:
 800636c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800636e:	2900      	cmp	r1, #0
 8006370:	d048      	beq.n	8006404 <_free_r+0x98>
 8006372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006376:	9001      	str	r0, [sp, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f1a1 0404 	sub.w	r4, r1, #4
 800637e:	bfb8      	it	lt
 8006380:	18e4      	addlt	r4, r4, r3
 8006382:	f7ff ffe7 	bl	8006354 <__malloc_lock>
 8006386:	4a20      	ldr	r2, [pc, #128]	; (8006408 <_free_r+0x9c>)
 8006388:	9801      	ldr	r0, [sp, #4]
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	4615      	mov	r5, r2
 800638e:	b933      	cbnz	r3, 800639e <_free_r+0x32>
 8006390:	6063      	str	r3, [r4, #4]
 8006392:	6014      	str	r4, [r2, #0]
 8006394:	b003      	add	sp, #12
 8006396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800639a:	f7ff bfe1 	b.w	8006360 <__malloc_unlock>
 800639e:	42a3      	cmp	r3, r4
 80063a0:	d90b      	bls.n	80063ba <_free_r+0x4e>
 80063a2:	6821      	ldr	r1, [r4, #0]
 80063a4:	1862      	adds	r2, r4, r1
 80063a6:	4293      	cmp	r3, r2
 80063a8:	bf04      	itt	eq
 80063aa:	681a      	ldreq	r2, [r3, #0]
 80063ac:	685b      	ldreq	r3, [r3, #4]
 80063ae:	6063      	str	r3, [r4, #4]
 80063b0:	bf04      	itt	eq
 80063b2:	1852      	addeq	r2, r2, r1
 80063b4:	6022      	streq	r2, [r4, #0]
 80063b6:	602c      	str	r4, [r5, #0]
 80063b8:	e7ec      	b.n	8006394 <_free_r+0x28>
 80063ba:	461a      	mov	r2, r3
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	b10b      	cbz	r3, 80063c4 <_free_r+0x58>
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d9fa      	bls.n	80063ba <_free_r+0x4e>
 80063c4:	6811      	ldr	r1, [r2, #0]
 80063c6:	1855      	adds	r5, r2, r1
 80063c8:	42a5      	cmp	r5, r4
 80063ca:	d10b      	bne.n	80063e4 <_free_r+0x78>
 80063cc:	6824      	ldr	r4, [r4, #0]
 80063ce:	4421      	add	r1, r4
 80063d0:	1854      	adds	r4, r2, r1
 80063d2:	42a3      	cmp	r3, r4
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	d1dd      	bne.n	8006394 <_free_r+0x28>
 80063d8:	681c      	ldr	r4, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	6053      	str	r3, [r2, #4]
 80063de:	4421      	add	r1, r4
 80063e0:	6011      	str	r1, [r2, #0]
 80063e2:	e7d7      	b.n	8006394 <_free_r+0x28>
 80063e4:	d902      	bls.n	80063ec <_free_r+0x80>
 80063e6:	230c      	movs	r3, #12
 80063e8:	6003      	str	r3, [r0, #0]
 80063ea:	e7d3      	b.n	8006394 <_free_r+0x28>
 80063ec:	6825      	ldr	r5, [r4, #0]
 80063ee:	1961      	adds	r1, r4, r5
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf04      	itt	eq
 80063f4:	6819      	ldreq	r1, [r3, #0]
 80063f6:	685b      	ldreq	r3, [r3, #4]
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	bf04      	itt	eq
 80063fc:	1949      	addeq	r1, r1, r5
 80063fe:	6021      	streq	r1, [r4, #0]
 8006400:	6054      	str	r4, [r2, #4]
 8006402:	e7c7      	b.n	8006394 <_free_r+0x28>
 8006404:	b003      	add	sp, #12
 8006406:	bd30      	pop	{r4, r5, pc}
 8006408:	200000b8 	.word	0x200000b8

0800640c <_read_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d07      	ldr	r5, [pc, #28]	; (800642c <_read_r+0x20>)
 8006410:	4604      	mov	r4, r0
 8006412:	4608      	mov	r0, r1
 8006414:	4611      	mov	r1, r2
 8006416:	2200      	movs	r2, #0
 8006418:	602a      	str	r2, [r5, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f7fb f9bf 	bl	800179e <_read>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_read_r+0x1e>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_read_r+0x1e>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	20000604 	.word	0x20000604

08006430 <_fstat_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	; (8006450 <_fstat_r+0x20>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f7fb f9d7 	bl	80017f0 <_fstat>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d102      	bne.n	800644c <_fstat_r+0x1c>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b103      	cbz	r3, 800644c <_fstat_r+0x1c>
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	20000604 	.word	0x20000604

08006454 <_isatty_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	; (8006470 <_isatty_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fb f9d6 	bl	8001810 <_isatty>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_isatty_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_isatty_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	20000604 	.word	0x20000604

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr
