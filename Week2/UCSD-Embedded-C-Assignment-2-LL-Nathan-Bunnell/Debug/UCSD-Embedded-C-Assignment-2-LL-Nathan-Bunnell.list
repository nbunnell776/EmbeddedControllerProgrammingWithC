
UCSD-Embedded-C-Assignment-2-LL-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005418  08005418  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005418  08005418  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005418  08005418  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  2000000c  0800542c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800542c  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001995a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ee  00000000  00000000  00039996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0003cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  0003e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2e4  00000000  00000000  0003fb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185a0  00000000  00000000  00069e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa4ef  00000000  00000000  000823e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017c8d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a4  00000000  00000000  0017c928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053b8 	.word	0x080053b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080053b8 	.word	0x080053b8

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80002da:	b480      	push	{r7}
 80002dc:	b083      	sub	sp, #12
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f043 0201 	orr.w	r2, r3, #1
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b083      	sub	sp, #12
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	609a      	str	r2, [r3, #8]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	460b      	mov	r3, r1
 8000330:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	b29a      	uxth	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
	...

08000348 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000348:	b480      	push	{r7}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000352:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <LL_SYSCFG_SetEXTISource+0x68>)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	3302      	adds	r3, #2
 800035a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	0c1b      	lsrs	r3, r3, #16
 8000362:	43db      	mvns	r3, r3
 8000364:	ea02 0103 	and.w	r1, r2, r3
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	0c1b      	lsrs	r3, r3, #16
 800036c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	fa93 f3a3 	rbit	r3, r3
 8000374:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d101      	bne.n	8000384 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000380:	2320      	movs	r3, #32
 8000382:	e003      	b.n	800038c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	fa03 f202 	lsl.w	r2, r3, r2
 8000394:	4806      	ldr	r0, [pc, #24]	; (80003b0 <LL_SYSCFG_SetEXTISource+0x68>)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	430a      	orrs	r2, r1
 800039c:	3302      	adds	r3, #2
 800039e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80003a2:	bf00      	nop
 80003a4:	371c      	adds	r7, #28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40010000 	.word	0x40010000

080003b4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b08b      	sub	sp, #44	; 0x2c
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	fa93 f3a3 	rbit	r3, r3
 80003ce:	613b      	str	r3, [r7, #16]
  return result;
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d101      	bne.n	80003de <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80003da:	2320      	movs	r3, #32
 80003dc:	e003      	b.n	80003e6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	2103      	movs	r1, #3
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	43db      	mvns	r3, r3
 80003f0:	401a      	ands	r2, r3
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f6:	6a3b      	ldr	r3, [r7, #32]
 80003f8:	fa93 f3a3 	rbit	r3, r3
 80003fc:	61fb      	str	r3, [r7, #28]
  return result;
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000404:	2b00      	cmp	r3, #0
 8000406:	d101      	bne.n	800040c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000408:	2320      	movs	r3, #32
 800040a:	e003      	b.n	8000414 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040e:	fab3 f383 	clz	r3, r3
 8000412:	b2db      	uxtb	r3, r3
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	431a      	orrs	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	372c      	adds	r7, #44	; 0x2c
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800042e:	b480      	push	{r7}
 8000430:	b08b      	sub	sp, #44	; 0x2c
 8000432:	af00      	add	r7, sp, #0
 8000434:	60f8      	str	r0, [r7, #12]
 8000436:	60b9      	str	r1, [r7, #8]
 8000438:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	fa93 f3a3 	rbit	r3, r3
 8000448:	613b      	str	r3, [r7, #16]
  return result;
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800044e:	69bb      	ldr	r3, [r7, #24]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d101      	bne.n	8000458 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000454:	2320      	movs	r3, #32
 8000456:	e003      	b.n	8000460 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	fab3 f383 	clz	r3, r3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	2103      	movs	r1, #3
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	401a      	ands	r2, r3
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000470:	6a3b      	ldr	r3, [r7, #32]
 8000472:	fa93 f3a3 	rbit	r3, r3
 8000476:	61fb      	str	r3, [r7, #28]
  return result;
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000482:	2320      	movs	r3, #32
 8000484:	e003      	b.n	800048e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fab3 f383 	clz	r3, r3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	6879      	ldr	r1, [r7, #4]
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	431a      	orrs	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	60da      	str	r2, [r3, #12]
}
 800049c:	bf00      	nop
 800049e:	372c      	adds	r7, #44	; 0x2c
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	431a      	orrs	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	691a      	ldr	r2, [r3, #16]
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	4013      	ands	r3, r2
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d101      	bne.n	80004e6 <LL_GPIO_IsInputPinSet+0x1c>
 80004e2:	2301      	movs	r3, #1
 80004e4:	e000      	b.n	80004e8 <LL_GPIO_IsInputPinSet+0x1e>
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	619a      	str	r2, [r3, #24]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000538:	4907      	ldr	r1, [pc, #28]	; (8000558 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4313      	orrs	r3, r2
 800053e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4013      	ands	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000

0800055c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000566:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000568:	4907      	ldr	r1, [pc, #28]	; (8000588 <LL_APB1_GRP1_EnableClock+0x2c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000572:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4013      	ands	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000598:	4907      	ldr	r1, [pc, #28]	; (80005b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]: X and Y coordinates on the wafer expressed in BCD format
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <LL_GetUID_Word0+0x14>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	1fff7590 	.word	0x1fff7590

080005d4 <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <LL_GetUID_Word1+0x14>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	1fff7594 	.word	0x1fff7594

080005ec <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <LL_GetUID_Word2+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	1fff7598 	.word	0x1fff7598

08000604 <LL_GetFlashSize>:
  * @note   This bitfield indicates the size of the device Flash memory expressed in
  *         Kbytes. As an example, 0x040 corresponds to 64 Kbytes.
  * @retval FLASH_SIZE[15:0]: Flash memory size
  */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0xFFFFU);
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <LL_GetFlashSize+0x14>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	1fff75e0 	.word	0x1fff75e0

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f001 f89c 	bl	800175e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f861 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 faaf 	bl	8000b8c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800062e:	f000 f901 	bl	8000834 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000632:	f000 f937 	bl	80008a4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000636:	f000 f975 	bl	8000924 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800063a:	f000 f999 	bl	8000970 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800063e:	f000 f9d5 	bl	80009ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000642:	f000 fa23 	bl	8000a8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000646:	f000 fa73 	bl	8000b30 <MX_USB_OTG_FS_PCD_Init>
  /*
   * Leverage LL APIs to pull the internal flash size and get the chip's UID value
   * as a 96-byte data block
   */

  uint32_t flashSize = LL_GetFlashSize();
 800064a:	f7ff ffdb 	bl	8000604 <LL_GetFlashSize>
 800064e:	4603      	mov	r3, r0
 8000650:	613b      	str	r3, [r7, #16]

  uint32_t uidWord[3];
  uidWord[0] = LL_GetUID_Word0();
 8000652:	f7ff ffb3 	bl	80005bc <LL_GetUID_Word0>
 8000656:	4603      	mov	r3, r0
 8000658:	607b      	str	r3, [r7, #4]
  uidWord[1] = LL_GetUID_Word1();
 800065a:	f7ff ffbb 	bl	80005d4 <LL_GetUID_Word1>
 800065e:	4603      	mov	r3, r0
 8000660:	60bb      	str	r3, [r7, #8]
  uidWord[2] = LL_GetUID_Word2();
 8000662:	f7ff ffc3 	bl	80005ec <LL_GetUID_Word2>
 8000666:	4603      	mov	r3, r0
 8000668:	60fb      	str	r3, [r7, #12]
   * as practice w/ LL_USART
   */

  // Use a char* to push data from the uint32_t variables into the serial buffer
  // byte-by-byte
  uint8_t* dataPtr = (uint8_t *) &flashSize;
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	61fb      	str	r3, [r7, #28]

  for (uint8_t i = 0; i < (sizeof(uint32_t)/sizeof(uint8_t)); i++)
 8000670:	2300      	movs	r3, #0
 8000672:	76fb      	strb	r3, [r7, #27]
 8000674:	e00a      	b.n	800068c <main+0x70>
  {
	  LL_USART_TransmitData8(USART1, *(dataPtr++));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	61fa      	str	r2, [r7, #28]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4619      	mov	r1, r3
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <main+0xc4>)
 8000682:	f7ff fe50 	bl	8000326 <LL_USART_TransmitData8>
  for (uint8_t i = 0; i < (sizeof(uint32_t)/sizeof(uint8_t)); i++)
 8000686:	7efb      	ldrb	r3, [r7, #27]
 8000688:	3301      	adds	r3, #1
 800068a:	76fb      	strb	r3, [r7, #27]
 800068c:	7efb      	ldrb	r3, [r7, #27]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d9f1      	bls.n	8000676 <main+0x5a>
  }

  dataPtr = (uint8_t *) &uidWord;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	61fb      	str	r3, [r7, #28]

  for (int i = 0; i < ((3 * sizeof(uint32_t))/sizeof(uint8_t)); ++i)
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e00a      	b.n	80006b2 <main+0x96>
	{
	  LL_USART_TransmitData8(USART1, *(dataPtr++));
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	61fa      	str	r2, [r7, #28]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <main+0xc4>)
 80006a8:	f7ff fe3d 	bl	8000326 <LL_USART_TransmitData8>
  for (int i = 0; i < ((3 * sizeof(uint32_t))/sizeof(uint8_t)); ++i)
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	3301      	adds	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2b0b      	cmp	r3, #11
 80006b6:	d9f1      	bls.n	800069c <main+0x80>
	  * Within loop, poll for status of Blue Button, GPIOC.13 (active low).
	  * If pin is clear, set LED2, GPIOB.14 (active high)
	  * If pin is set, clear LED2
	  */

	  if(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13))
 80006b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006bc:	4809      	ldr	r0, [pc, #36]	; (80006e4 <main+0xc8>)
 80006be:	f7ff ff04 	bl	80004ca <LL_GPIO_IsInputPinSet>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d005      	beq.n	80006d4 <main+0xb8>
	  {
	    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14);
 80006c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <main+0xcc>)
 80006ce:	f7ff ff1f 	bl	8000510 <LL_GPIO_ResetOutputPin>
 80006d2:	e7f1      	b.n	80006b8 <main+0x9c>
	  }
	  else
	  {
	    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14);
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <main+0xcc>)
 80006da:	f7ff ff0b 	bl	80004f4 <LL_GPIO_SetOutputPin>
	  if(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13))
 80006de:	e7eb      	b.n	80006b8 <main+0x9c>
 80006e0:	40013800 	.word	0x40013800
 80006e4:	48000800 	.word	0x48000800
 80006e8:	48000400 	.word	0x48000400

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b8      	sub	sp, #224	; 0xe0
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006f6:	2244      	movs	r2, #68	; 0x44
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fe54 	bl	80053a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2288      	movs	r2, #136	; 0x88
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fe46 	bl	80053a8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800071c:	f001 fec2 	bl	80024a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <SystemClock_Config+0x140>)
 8000722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000726:	4a41      	ldr	r2, [pc, #260]	; (800082c <SystemClock_Config+0x140>)
 8000728:	f023 0318 	bic.w	r3, r3, #24
 800072c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000730:	2314      	movs	r3, #20
 8000732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000748:	2360      	movs	r3, #96	; 0x60
 800074a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000754:	2301      	movs	r3, #1
 8000756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000760:	2328      	movs	r3, #40	; 0x28
 8000762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000766:	2307      	movs	r3, #7
 8000768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800077c:	4618      	mov	r0, r3
 800077e:	f001 ffd1 	bl	8002724 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000788:	f000 fd2e 	bl	80011e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2303      	movs	r3, #3
 8000794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007ae:	2104      	movs	r1, #4
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fb9d 	bl	8002ef0 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007bc:	f000 fd14 	bl	80011e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <SystemClock_Config+0x144>)
 80007c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007da:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80007e4:	2318      	movs	r3, #24
 80007e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80007f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007f8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fd45 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000808:	f000 fcee 	bl	80011e8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000810:	f001 fe66 	bl	80024e0 <HAL_PWREx_ControlVoltageScaling>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x132>
  {
    Error_Handler();
 800081a:	f000 fce5 	bl	80011e8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800081e:	f003 f81f 	bl	8003860 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000822:	bf00      	nop
 8000824:	37e0      	adds	r7, #224	; 0xe0
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	00012085 	.word	0x00012085

08000834 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_DFSDM1_Init+0x68>)
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <MX_DFSDM1_Init+0x6c>)
 800083c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000840:	2201      	movs	r2, #1
 8000842:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_DFSDM1_Init+0x68>)
 800084c:	2202      	movs	r2, #2
 800084e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_DFSDM1_Init+0x68>)
 800085e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000862:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_DFSDM1_Init+0x68>)
 800086c:	2204      	movs	r2, #4
 800086e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000878:	2201      	movs	r2, #1
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_DFSDM1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_DFSDM1_Init+0x68>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_DFSDM1_Init+0x68>)
 800088a:	f001 f8e7 	bl	8001a5c <HAL_DFSDM_ChannelInit>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000894:	f000 fca8 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000050 	.word	0x20000050
 80008a0:	40016020 	.word	0x40016020

080008a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_I2C2_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <MX_I2C2_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_I2C2_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <MX_I2C2_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_I2C2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_I2C2_Init+0x74>)
 80008bc:	2201      	movs	r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_I2C2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_I2C2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_I2C2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_I2C2_Init+0x74>)
 80008e0:	f001 fb72 	bl	8001fc8 <HAL_I2C_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ea:	f000 fc7d 	bl	80011e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_I2C2_Init+0x74>)
 80008f2:	f001 fbf8 	bl	80020e6 <HAL_I2CEx_ConfigAnalogFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 fc74 	bl	80011e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_I2C2_Init+0x74>)
 8000904:	f001 fc3a 	bl	800217c <HAL_I2CEx_ConfigDigitalFilter>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 fc6b 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000490 	.word	0x20000490
 800091c:	40005800 	.word	0x40005800
 8000920:	10909cec 	.word	0x10909cec

08000924 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <MX_QUADSPI_Init+0x48>)
 800092c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000936:	2204      	movs	r2, #4
 8000938:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800093c:	2210      	movs	r2, #16
 800093e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000942:	2217      	movs	r2, #23
 8000944:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000954:	f001 fe2a 	bl	80025ac <HAL_QSPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800095e:	f000 fc43 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000540 	.word	0x20000540
 800096c:	a0001000 	.word	0xa0001000

08000970 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_SPI3_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_SPI3_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_SPI3_Init+0x74>)
 800097c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_SPI3_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_SPI3_Init+0x74>)
 800098a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800098e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI3_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_SPI3_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI3_Init+0x74>)
 800099e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009be:	2207      	movs	r2, #7
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_SPI3_Init+0x74>)
 80009d0:	f003 f928 	bl	8003c24 <HAL_SPI_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fc05 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200004dc 	.word	0x200004dc
 80009e8:	40003c00 	.word	0x40003c00

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000a16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a1a:	f7ff fdb7 	bl	800058c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff fd84 	bl	800052c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000a24:	23c0      	movs	r3, #192	; 0xc0
 8000a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4810      	ldr	r0, [pc, #64]	; (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a42:	f003 fd05 	bl	8004450 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000a46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a4a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000a60:	2300      	movs	r3, #0
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_USART1_UART_Init+0x9c>)
 8000a6c:	f004 f992 	bl	8004d94 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART1_UART_Init+0x9c>)
 8000a72:	f7ff fc42 	bl	80002fa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USART1_UART_Init+0x9c>)
 8000a78:	f7ff fc2f 	bl	80002da <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3738      	adds	r7, #56	; 0x38
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	48000400 	.word	0x48000400
 8000a88:	40013800 	.word	0x40013800

08000a8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000ab6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000aba:	f7ff fd4f 	bl	800055c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000abe:	2008      	movs	r0, #8
 8000ac0:	f7ff fd34 	bl	800052c <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000ac4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ada:	2307      	movs	r3, #7
 8000adc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_USART3_UART_Init+0x9c>)
 8000ae4:	f003 fcb4 	bl	8004450 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ae8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000aec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000afa:	230c      	movs	r3, #12
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <MX_USART3_UART_Init+0xa0>)
 8000b0e:	f004 f941 	bl	8004d94 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <MX_USART3_UART_Init+0xa0>)
 8000b14:	f7ff fbf1 	bl	80002fa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_USART3_UART_Init+0xa0>)
 8000b1a:	f7ff fbde 	bl	80002da <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3738      	adds	r7, #56	; 0x38
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	48000c00 	.word	0x48000c00
 8000b2c:	40004800 	.word	0x40004800

08000b30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3e:	2206      	movs	r2, #6
 8000b40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b74:	f001 fb4e 	bl	8002214 <HAL_PCD_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f000 fb33 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000088 	.word	0x20000088

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8000bae:	2010      	movs	r0, #16
 8000bb0:	f7ff fcbc 	bl	800052c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff fcb9 	bl	800052c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fcb6 	bl	800052c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f7ff fcb3 	bl	800052c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000bc6:	2008      	movs	r0, #8
 8000bc8:	f7ff fcb0 	bl	800052c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8000bcc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000bd0:	48c9      	ldr	r0, [pc, #804]	; (8000ef8 <MX_GPIO_Init+0x36c>)
 8000bd2:	f7ff fc9d 	bl	8000510 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin);
 8000bd6:	f248 1104 	movw	r1, #33028	; 0x8104
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f7ff fc97 	bl	8000510 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000be2:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000be6:	48c5      	ldr	r0, [pc, #788]	; (8000efc <MX_GPIO_Init+0x370>)
 8000be8:	f7ff fc92 	bl	8000510 <LL_GPIO_ResetOutputPin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8000bec:	f241 0181 	movw	r1, #4225	; 0x1081
 8000bf0:	48c3      	ldr	r0, [pc, #780]	; (8000f00 <MX_GPIO_Init+0x374>)
 8000bf2:	f7ff fc8d 	bl	8000510 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8000bf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000bfa:	48c2      	ldr	r0, [pc, #776]	; (8000f04 <MX_GPIO_Init+0x378>)
 8000bfc:	f7ff fc88 	bl	8000510 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 8000c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c04:	48be      	ldr	r0, [pc, #760]	; (8000f00 <MX_GPIO_Init+0x374>)
 8000c06:	f7ff fc75 	bl	80004f4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	48bb      	ldr	r0, [pc, #748]	; (8000efc <MX_GPIO_Init+0x370>)
 8000c0e:	f7ff fc71 	bl	80004f4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 8000c12:	2101      	movs	r1, #1
 8000c14:	48b8      	ldr	r0, [pc, #736]	; (8000ef8 <MX_GPIO_Init+0x36c>)
 8000c16:	f7ff fc6d 	bl	80004f4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c1a:	f240 1315 	movw	r3, #277	; 0x115
 8000c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c20:	2301      	movs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	48b0      	ldr	r0, [pc, #704]	; (8000ef8 <MX_GPIO_Init+0x36c>)
 8000c36:	f003 fc0b 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c3a:	233f      	movs	r3, #63	; 0x3f
 8000c3c:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	48ae      	ldr	r0, [pc, #696]	; (8000f04 <MX_GPIO_Init+0x378>)
 8000c4c:	f003 fc00 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c50:	2303      	movs	r3, #3
 8000c52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f003 fbee 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c74:	f248 1304 	movw	r3, #33028	; 0x8104
 8000c78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f003 fbdd 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c96:	2308      	movs	r3, #8
 8000c98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f003 fbcb 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cce:	f003 fbbf 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000cd2:	23e0      	movs	r3, #224	; 0xe0
 8000cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f003 fbad 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	487d      	ldr	r0, [pc, #500]	; (8000efc <MX_GPIO_Init+0x370>)
 8000d08:	f003 fba2 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d0c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d10:	607b      	str	r3, [r7, #4]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d12:	2301      	movs	r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	4875      	ldr	r0, [pc, #468]	; (8000efc <MX_GPIO_Init+0x370>)
 8000d28:	f003 fb92 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d2c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d32:	2301      	movs	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	486e      	ldr	r0, [pc, #440]	; (8000f00 <MX_GPIO_Init+0x374>)
 8000d48:	f003 fb82 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d4c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d52:	2301      	movs	r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4867      	ldr	r0, [pc, #412]	; (8000f04 <MX_GPIO_Init+0x378>)
 8000d68:	f003 fb72 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000d80:	2305      	movs	r3, #5
 8000d82:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	485d      	ldr	r0, [pc, #372]	; (8000f00 <MX_GPIO_Init+0x374>)
 8000d8a:	f003 fb61 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d8e:	2378      	movs	r3, #120	; 0x78
 8000d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d92:	2302      	movs	r3, #2
 8000d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000da2:	2307      	movs	r3, #7
 8000da4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4855      	ldr	r0, [pc, #340]	; (8000f00 <MX_GPIO_Init+0x374>)
 8000dac:	f003 fb50 	bl	8004450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000db0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	484b      	ldr	r0, [pc, #300]	; (8000efc <MX_GPIO_Init+0x370>)
 8000dd0:	f003 fb3e 	bl	8004450 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 8000dd4:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000dd8:	2004      	movs	r0, #4
 8000dda:	f7ff fab5 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 8000dde:	494a      	ldr	r1, [pc, #296]	; (8000f08 <MX_GPIO_Init+0x37c>)
 8000de0:	2004      	movs	r0, #4
 8000de2:	f7ff fab1 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 8000de6:	4949      	ldr	r1, [pc, #292]	; (8000f0c <MX_GPIO_Init+0x380>)
 8000de8:	2004      	movs	r0, #4
 8000dea:	f7ff faad 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000dee:	4948      	ldr	r1, [pc, #288]	; (8000f10 <MX_GPIO_Init+0x384>)
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff faa9 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000df6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff faa4 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 8000e00:	4944      	ldr	r1, [pc, #272]	; (8000f14 <MX_GPIO_Init+0x388>)
 8000e02:	2003      	movs	r0, #3
 8000e04:	f7ff faa0 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8000e08:	4943      	ldr	r1, [pc, #268]	; (8000f18 <MX_GPIO_Init+0x38c>)
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f7ff fa9c 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 8000e10:	4942      	ldr	r1, [pc, #264]	; (8000f1c <MX_GPIO_Init+0x390>)
 8000e12:	2003      	movs	r0, #3
 8000e14:	f7ff fa98 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 8000e18:	4941      	ldr	r1, [pc, #260]	; (8000f20 <MX_GPIO_Init+0x394>)
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f7ff fa94 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8000e20:	4940      	ldr	r1, [pc, #256]	; (8000f24 <MX_GPIO_Init+0x398>)
 8000e22:	2002      	movs	r0, #2
 8000e24:	f7ff fa90 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8000e28:	493f      	ldr	r1, [pc, #252]	; (8000f28 <MX_GPIO_Init+0x39c>)
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff fa8c 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 8000e30:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000e34:	2003      	movs	r0, #3
 8000e36:	f7ff fa87 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8000e3a:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000e3e:	2004      	movs	r0, #4
 8000e40:	f7ff fa82 	bl	8000348 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000e44:	2308      	movs	r3, #8
 8000e46:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 f8b2 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000e68:	2320      	movs	r3, #32
 8000e6a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 f8a0 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000e8c:	2340      	movs	r3, #64	; 0x40
 8000e8e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 f88e 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 f87b 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e019      	b.n	8000f2c <MX_GPIO_Init+0x3a0>
 8000ef8:	48001000 	.word	0x48001000
 8000efc:	48000400 	.word	0x48000400
 8000f00:	48000c00 	.word	0x48000c00
 8000f04:	48000800 	.word	0x48000800
 8000f08:	00f00001 	.word	0x00f00001
 8000f0c:	0f000001 	.word	0x0f000001
 8000f10:	00f00003 	.word	0x00f00003
 8000f14:	0f000002 	.word	0x0f000002
 8000f18:	f0000002 	.word	0xf0000002
 8000f1c:	0f000003 	.word	0x0f000003
 8000f20:	f0000003 	.word	0xf0000003
 8000f24:	f0000001 	.word	0xf0000001
 8000f28:	000f0002 	.word	0x000f0002
 8000f2c:	f003 f84e 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8000f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f34:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 f83b 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8000f56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f5a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 f828 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f80:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 f815 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 f802 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fff0 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001002:	2301      	movs	r3, #1
 8001004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f002 ffdd 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001012:	2304      	movs	r3, #4
 8001014:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001026:	2301      	movs	r3, #1
 8001028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4618      	mov	r0, r3
 8001032:	f002 ffcb 	bl	8003fcc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001036:	2302      	movs	r3, #2
 8001038:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800103e:	2301      	movs	r3, #1
 8001040:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800104a:	2301      	movs	r3, #1
 800104c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4618      	mov	r0, r3
 8001056:	f002 ffb9 	bl	8003fcc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 800105a:	2200      	movs	r2, #0
 800105c:	2108      	movs	r1, #8
 800105e:	485e      	ldr	r0, [pc, #376]	; (80011d8 <MX_GPIO_Init+0x64c>)
 8001060:	f7ff f9e5 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001064:	2200      	movs	r2, #0
 8001066:	2120      	movs	r1, #32
 8001068:	485b      	ldr	r0, [pc, #364]	; (80011d8 <MX_GPIO_Init+0x64c>)
 800106a:	f7ff f9e0 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 800106e:	2200      	movs	r2, #0
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	4859      	ldr	r0, [pc, #356]	; (80011d8 <MX_GPIO_Init+0x64c>)
 8001074:	f7ff f9db 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4857      	ldr	r0, [pc, #348]	; (80011dc <MX_GPIO_Init+0x650>)
 8001080:	f7ff f9d5 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001084:	2200      	movs	r2, #0
 8001086:	2101      	movs	r1, #1
 8001088:	4855      	ldr	r0, [pc, #340]	; (80011e0 <MX_GPIO_Init+0x654>)
 800108a:	f7ff f9d0 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001094:	4853      	ldr	r0, [pc, #332]	; (80011e4 <MX_GPIO_Init+0x658>)
 8001096:	f7ff f9ca 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	4850      	ldr	r0, [pc, #320]	; (80011e4 <MX_GPIO_Init+0x658>)
 80010a2:	f7ff f9c4 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ac:	484d      	ldr	r0, [pc, #308]	; (80011e4 <MX_GPIO_Init+0x658>)
 80010ae:	f7ff f9be 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b8:	484a      	ldr	r0, [pc, #296]	; (80011e4 <MX_GPIO_Init+0x658>)
 80010ba:	f7ff f9b8 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 80010be:	2200      	movs	r2, #0
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	4846      	ldr	r0, [pc, #280]	; (80011dc <MX_GPIO_Init+0x650>)
 80010c4:	f7ff f9b3 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	4843      	ldr	r0, [pc, #268]	; (80011dc <MX_GPIO_Init+0x650>)
 80010d0:	f7ff f9ad 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2104      	movs	r1, #4
 80010d8:	4842      	ldr	r0, [pc, #264]	; (80011e4 <MX_GPIO_Init+0x658>)
 80010da:	f7ff f9a8 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 80010de:	2200      	movs	r2, #0
 80010e0:	2102      	movs	r1, #2
 80010e2:	483d      	ldr	r0, [pc, #244]	; (80011d8 <MX_GPIO_Init+0x64c>)
 80010e4:	f7ff f9a3 	bl	800042e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2108      	movs	r1, #8
 80010ec:	483a      	ldr	r0, [pc, #232]	; (80011d8 <MX_GPIO_Init+0x64c>)
 80010ee:	f7ff f961 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2120      	movs	r1, #32
 80010f6:	4838      	ldr	r0, [pc, #224]	; (80011d8 <MX_GPIO_Init+0x64c>)
 80010f8:	f7ff f95c 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	4835      	ldr	r0, [pc, #212]	; (80011d8 <MX_GPIO_Init+0x64c>)
 8001102:	f7ff f957 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110c:	4833      	ldr	r0, [pc, #204]	; (80011dc <MX_GPIO_Init+0x650>)
 800110e:	f7ff f951 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 8001112:	2200      	movs	r2, #0
 8001114:	2101      	movs	r1, #1
 8001116:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_GPIO_Init+0x654>)
 8001118:	f7ff f94c 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	4830      	ldr	r0, [pc, #192]	; (80011e4 <MX_GPIO_Init+0x658>)
 8001124:	f7ff f946 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112e:	482d      	ldr	r0, [pc, #180]	; (80011e4 <MX_GPIO_Init+0x658>)
 8001130:	f7ff f940 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113a:	482a      	ldr	r0, [pc, #168]	; (80011e4 <MX_GPIO_Init+0x658>)
 800113c:	f7ff f93a 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001146:	4827      	ldr	r0, [pc, #156]	; (80011e4 <MX_GPIO_Init+0x658>)
 8001148:	f7ff f934 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 800114c:	2200      	movs	r2, #0
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	4822      	ldr	r0, [pc, #136]	; (80011dc <MX_GPIO_Init+0x650>)
 8001152:	f7ff f92f 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <MX_GPIO_Init+0x650>)
 800115e:	f7ff f929 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 8001162:	2200      	movs	r2, #0
 8001164:	2104      	movs	r1, #4
 8001166:	481f      	ldr	r0, [pc, #124]	; (80011e4 <MX_GPIO_Init+0x658>)
 8001168:	f7ff f924 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	4819      	ldr	r0, [pc, #100]	; (80011d8 <MX_GPIO_Init+0x64c>)
 8001172:	f7ff f91f 	bl	80003b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001176:	213f      	movs	r1, #63	; 0x3f
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_GPIO_Init+0x650>)
 800117a:	f7ff f995 	bl	80004a8 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D7_GPIO_Port, ARD_D7_Pin);
 800117e:	2110      	movs	r1, #16
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f7ff f990 	bl	80004a8 <LL_GPIO_EnablePinAnalogControl>

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D6_GPIO_Port, ARD_D6_Pin);
 8001188:	2102      	movs	r1, #2
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <MX_GPIO_Init+0x654>)
 800118c:	f7ff f98c 	bl	80004a8 <LL_GPIO_EnablePinAnalogControl>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001190:	f7ff f81a 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 8001194:	4603      	mov	r3, r0
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f86a 	bl	8000274 <NVIC_EncodePriority>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	2017      	movs	r0, #23
 80011a6:	f7ff f83b 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011aa:	2017      	movs	r0, #23
 80011ac:	f7ff f81a 	bl	80001e4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011b0:	f7ff f80a 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f85a 	bl	8000274 <NVIC_EncodePriority>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	2028      	movs	r0, #40	; 0x28
 80011c6:	f7ff f82b 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ca:	2028      	movs	r0, #40	; 0x28
 80011cc:	f7ff f80a 	bl	80001e4 <__NVIC_EnableIRQ>

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	48001000 	.word	0x48001000
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000c00 	.word	0x48000c00

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	; 0x60
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x44>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d12d      	bne.n	80012b8 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800125e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001260:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001266:	6613      	str	r3, [r2, #96]	; 0x60
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800128c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800129e:	2306      	movs	r3, #6
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80012aa:	f000 fce3 	bl	8001c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a02      	ldr	r2, [pc, #8]	; (80012c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 80012b6:	6013      	str	r3, [r2, #0]
  }

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000028 	.word	0x20000028
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48001000 	.word	0x48001000

080012cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_I2C_MspInit+0x7c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d128      	bne.n	8001340 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_I2C_MspInit+0x80>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_I2C_MspInit+0x80>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_I2C_MspInit+0x80>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001306:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <HAL_I2C_MspInit+0x84>)
 8001324:	f000 fca6 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_I2C_MspInit+0x80>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_I2C_MspInit+0x80>)
 800132e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001332:	6593      	str	r3, [r2, #88]	; 0x58
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_I2C_MspInit+0x80>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40005800 	.word	0x40005800
 800134c:	40021000 	.word	0x40021000
 8001350:	48000400 	.word	0x48000400

08001354 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_QSPI_MspInit+0x7c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d128      	bne.n	80013c8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_QSPI_MspInit+0x80>)
 8001378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_QSPI_MspInit+0x80>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6513      	str	r3, [r2, #80]	; 0x50
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_QSPI_MspInit+0x80>)
 8001384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_QSPI_MspInit+0x80>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_QSPI_MspInit+0x80>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_QSPI_MspInit+0x80>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80013a6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013b8:	230a      	movs	r3, #10
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_QSPI_MspInit+0x84>)
 80013c4:	f000 fc56 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	a0001000 	.word	0xa0001000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48001000 	.word	0x48001000

080013dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_SPI_MspInit+0x7c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d128      	bne.n	8001450 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_SPI_MspInit+0x80>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_SPI_MspInit+0x80>)
 8001404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_SPI_MspInit+0x80>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_SPI_MspInit+0x80>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_SPI_MspInit+0x80>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_SPI_MspInit+0x80>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800142e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001440:	2306      	movs	r3, #6
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_SPI_MspInit+0x84>)
 800144c:	f000 fc12 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40003c00 	.word	0x40003c00
 800145c:	40021000 	.word	0x40021000
 8001460:	48000800 	.word	0x48000800

08001464 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001484:	d154      	bne.n	8001530 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b6:	f000 fbdd 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014cc:	230a      	movs	r3, #10
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f000 fbcb 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 80014e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d114      	bne.n	800152c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6593      	str	r3, [r2, #88]	; 0x58
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800151a:	f001 f837 	bl	800258c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_PCD_MspInit+0xd4>)
 8001524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800152a:	e001      	b.n	8001530 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800152c:	f001 f82e 	bl	800258c <HAL_PWREx_EnableVddUSB>
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000

0800153c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4013      	ands	r3, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d101      	bne.n	8001556 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40010400 	.word	0x40010400

08001568 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6153      	str	r3, [r2, #20]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40010400 	.word	0x40010400

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f918 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 80015e0:	2020      	movs	r0, #32
 80015e2:	f7ff ffab 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80015ec:	2020      	movs	r0, #32
 80015ee:	f7ff ffbb 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 80015f2:	2040      	movs	r0, #64	; 0x40
 80015f4:	f7ff ffa2 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80015fe:	2040      	movs	r0, #64	; 0x40
 8001600:	f7ff ffb2 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001604:	2080      	movs	r0, #128	; 0x80
 8001606:	f7ff ff99 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001610:	2080      	movs	r0, #128	; 0x80
 8001612:	f7ff ffa9 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001616:	f44f 7080 	mov.w	r0, #256	; 0x100
 800161a:	f7ff ff8f 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001624:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001628:	f7ff ff9e 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001634:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001638:	f7ff ff80 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001642:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001646:	f7ff ff8f 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 800164a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800164e:	f7ff ff75 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001658:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800165c:	f7ff ff84 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001664:	f7ff ff6a 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 800166e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001672:	f7ff ff79 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001676:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800167a:	f7ff ff5f 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001684:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001688:	f7ff ff6e 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800168c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001690:	f7ff ff54 	bl	800153c <LL_EXTI_IsActiveFlag_0_31>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800169a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800169e:	f7ff ff63 	bl	8001568 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <SystemInit+0x5c>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <SystemInit+0x5c>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <SystemInit+0x60>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <SystemInit+0x60>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <SystemInit+0x60>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <SystemInit+0x60>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <SystemInit+0x60>)
 80016d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <SystemInit+0x60>)
 80016e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <SystemInit+0x60>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a07      	ldr	r2, [pc, #28]	; (8001708 <SystemInit+0x60>)
 80016ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SystemInit+0x60>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	40021000 	.word	0x40021000

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001710:	f7ff ffca 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001716:	e003      	b.n	8001720 <LoopCopyDataInit>

08001718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800171a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800171c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800171e:	3104      	adds	r1, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001728:	d3f6      	bcc.n	8001718 <CopyDataInit>
	ldr	r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopForever+0x12>)
	b	LoopFillZerobss
 800172c:	e002      	b.n	8001734 <LoopFillZerobss>

0800172e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800172e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001730:	f842 3b04 	str.w	r3, [r2], #4

08001734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <LoopForever+0x16>)
	cmp	r2, r3
 8001736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001738:	d3f9      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f003 fe11 	bl	8005360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7fe ff6d 	bl	800061c <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001748:	08005420 	.word	0x08005420
	ldr	r0, =_sdata
 800174c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001750:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001754:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001758:	20000588 	.word	0x20000588

0800175c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_2_IRQHandler>

0800175e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f943 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f80e 	bl	8001790 <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001780:	f7ff fd38 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_InitTick+0x6c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d023      	beq.n	80017ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_InitTick+0x70>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_InitTick+0x6c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f941 	bl	8001a42 <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d809      	bhi.n	80017e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f919 	bl	8001a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_InitTick+0x74>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e007      	b.n	80017f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e004      	b.n	80017f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	e001      	b.n	80017f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008
 800182c:	20000584 	.word	0x20000584

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000584 	.word	0x20000584

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008

08001890 <__NVIC_SetPriorityGrouping>:
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_SetPriority>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff47 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff5c 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffb0 	bl	80019b0 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0ac      	b.n	8001bc8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f8b2 	bl	8001bdc <DFSDM_GetChannelFromInstance>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_DFSDM_ChannelInit+0x174>)
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e09f      	b.n	8001bc8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fbd7 	bl	800123c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a8e:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <HAL_DFSDM_ChannelInit+0x178>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	4a4f      	ldr	r2, [pc, #316]	; (8001bd4 <HAL_DFSDM_ChannelInit+0x178>)
 8001a96:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a98:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <HAL_DFSDM_ChannelInit+0x178>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d125      	bne.n	8001aec <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001aaa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4948      	ldr	r1, [pc, #288]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001aba:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a46      	ldr	r2, [pc, #280]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ac0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001ac4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001ace:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	493f      	ldr	r1, [pc, #252]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aea:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001afa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b0a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b10:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 020f 	bic.w	r2, r2, #15
 8001b28:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b50:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6899      	ldr	r1, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	3b01      	subs	r3, #1
 8001b62:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f002 0207 	and.w	r2, r2, #7
 8001b7c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f810 	bl	8001bdc <DFSDM_GetChannelFromInstance>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <HAL_DFSDM_ChannelInit+0x174>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000030 	.word	0x20000030
 8001bd4:	2000002c 	.word	0x2000002c
 8001bd8:	40016000 	.word	0x40016000

08001bdc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <DFSDM_GetChannelFromInstance+0x7c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e02b      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <DFSDM_GetChannelFromInstance+0x80>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d102      	bne.n	8001c00 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e024      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <DFSDM_GetChannelFromInstance+0x84>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e01d      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <DFSDM_GetChannelFromInstance+0x88>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d102      	bne.n	8001c1c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001c16:	2304      	movs	r3, #4
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	e016      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <DFSDM_GetChannelFromInstance+0x8c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001c24:	2305      	movs	r3, #5
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e00f      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <DFSDM_GetChannelFromInstance+0x90>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001c32:	2306      	movs	r3, #6
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e008      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <DFSDM_GetChannelFromInstance+0x94>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c40:	2307      	movs	r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e001      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c46:	2303      	movs	r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40016000 	.word	0x40016000
 8001c5c:	40016020 	.word	0x40016020
 8001c60:	40016040 	.word	0x40016040
 8001c64:	40016080 	.word	0x40016080
 8001c68:	400160a0 	.word	0x400160a0
 8001c6c:	400160c0 	.word	0x400160c0
 8001c70:	400160e0 	.word	0x400160e0

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e17f      	b.n	8001f84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8171 	beq.w	8001f7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d00b      	beq.n	8001cbc <HAL_GPIO_Init+0x48>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d007      	beq.n	8001cbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb0:	2b11      	cmp	r3, #17
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b12      	cmp	r3, #18
 8001cba:	d130      	bne.n	8001d1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 0201 	and.w	r2, r3, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d118      	bne.n	8001d5c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x128>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d123      	bne.n	8001de4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	6939      	ldr	r1, [r7, #16]
 8001de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80ac 	beq.w	8001f7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2a:	4a5e      	ldr	r2, [pc, #376]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6613      	str	r3, [r2, #96]	; 0x60
 8001e32:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e3e:	4a5a      	ldr	r2, [pc, #360]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e68:	d025      	beq.n	8001eb6 <HAL_GPIO_Init+0x242>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <HAL_GPIO_Init+0x338>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01f      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	; (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	; (8001fbc <HAL_GPIO_Init+0x348>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00c      	b.n	8001eb8 <HAL_GPIO_Init+0x244>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e00a      	b.n	8001eb8 <HAL_GPIO_Init+0x244>
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	e008      	b.n	8001eb8 <HAL_GPIO_Init+0x244>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x244>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e004      	b.n	8001eb8 <HAL_GPIO_Init+0x244>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x244>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x244>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	f002 0203 	and.w	r2, r2, #3
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec8:	4937      	ldr	r1, [pc, #220]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efa:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f47f ae78 	bne.w	8001c84 <HAL_GPIO_Init+0x10>
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	48000800 	.word	0x48000800
 8001fb4:	48000c00 	.word	0x48000c00
 8001fb8:	48001000 	.word	0x48001000
 8001fbc:	48001400 	.word	0x48001400
 8001fc0:	48001800 	.word	0x48001800
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e081      	b.n	80020de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff f96c 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	; 0x24
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d107      	bne.n	8002042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e006      	b.n	8002050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800204e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d104      	bne.n	8002062 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	ea42 0103 	orr.w	r1, r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	021a      	lsls	r2, r3, #8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69d9      	ldr	r1, [r3, #28]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d138      	bne.n	800216e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002106:	2302      	movs	r3, #2
 8002108:	e032      	b.n	8002170 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2224      	movs	r2, #36	; 0x24
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002138:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b20      	cmp	r3, #32
 8002190:	d139      	bne.n	8002206 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800219c:	2302      	movs	r3, #2
 800219e:	e033      	b.n	8002208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b08f      	sub	sp, #60	; 0x3c
 8002218:	af0a      	add	r7, sp, #40	; 0x28
 800221a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e116      	b.n	8002454 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff f90f 	bl	8001464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fe3d 	bl	8004ee4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	687e      	ldr	r6, [r7, #4]
 8002272:	466d      	mov	r5, sp
 8002274:	f106 0410 	add.w	r4, r6, #16
 8002278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002280:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002284:	e885 0003 	stmia.w	r5, {r0, r1}
 8002288:	1d33      	adds	r3, r6, #4
 800228a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f002 fdfd 	bl	8004e8c <USB_CoreInit>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0d7      	b.n	8002454 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fe2b 	bl	8004f06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e04a      	b.n	800234c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333d      	adds	r3, #61	; 0x3d
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	333c      	adds	r3, #60	; 0x3c
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	b298      	uxth	r0, r3
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	3342      	adds	r3, #66	; 0x42
 80022f2:	4602      	mov	r2, r0
 80022f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	333f      	adds	r3, #63	; 0x3f
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3344      	adds	r3, #68	; 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3348      	adds	r3, #72	; 0x48
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3350      	adds	r3, #80	; 0x50
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	3301      	adds	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3af      	bcc.n	80022b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e044      	b.n	80023e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	3301      	adds	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3b5      	bcc.n	800235c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	687e      	ldr	r6, [r7, #4]
 80023f8:	466d      	mov	r5, sp
 80023fa:	f106 0410 	add.w	r4, r6, #16
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240a:	e885 0003 	stmia.w	r5, {r0, r1}
 800240e:	1d33      	adds	r3, r6, #4
 8002410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002412:	6838      	ldr	r0, [r7, #0]
 8002414:	f002 fda2 	bl	8004f5c <USB_DevInit>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e014      	b.n	8002454 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f80a 	bl	800245c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f002 ff32 	bl	80052b6 <USB_DevDisconnect>

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800245c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	f043 0303 	orr.w	r3, r3, #3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40007000 	.word	0x40007000

080024c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <HAL_PWREx_GetVoltageRange+0x18>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40007000 	.word	0x40007000

080024e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ee:	d130      	bne.n	8002552 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024fc:	d038      	beq.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002506:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2232      	movs	r2, #50	; 0x32
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0c9b      	lsrs	r3, r3, #18
 8002520:	3301      	adds	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002524:	e002      	b.n	800252c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3b01      	subs	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002538:	d102      	bne.n	8002540 <HAL_PWREx_ControlVoltageScaling+0x60>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f2      	bne.n	8002526 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254c:	d110      	bne.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e00f      	b.n	8002572 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d007      	beq.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002568:	4a05      	ldr	r2, [pc, #20]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40007000 	.word	0x40007000
 8002584:	20000000 	.word	0x20000000
 8002588:	431bde83 	.word	0x431bde83

0800258c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259a:	6053      	str	r3, [r2, #4]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40007000 	.word	0x40007000

080025ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff f93c 	bl	8001830 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e063      	b.n	800268c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe febb 	bl	8001354 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80025de:	f241 3188 	movw	r1, #5000	; 0x1388
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f858 	bl	8002698 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	2120      	movs	r1, #32
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f850 	bl	80026b4 <QSPI_WaitFlagStateUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002618:	7afb      	ldrb	r3, [r7, #11]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d131      	bne.n	8002682 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002628:	f023 0310 	bic.w	r3, r3, #16
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6852      	ldr	r2, [r2, #4]
 8002630:	0611      	lsls	r1, r2, #24
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	4311      	orrs	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	430b      	orrs	r3, r1
 800263e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_QSPI_Init+0xe8>)
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6912      	ldr	r2, [r2, #16]
 800264e:	0411      	lsls	r1, r2, #16
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6952      	ldr	r2, [r2, #20]
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6992      	ldr	r2, [r2, #24]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800268a:	7afb      	ldrb	r3, [r7, #11]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	ffe0f8fe 	.word	0xffe0f8fe

08002698 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026c4:	e01a      	b.n	80026fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d016      	beq.n	80026fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7ff f8af 	bl	8001830 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2204      	movs	r2, #4
 80026e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e00e      	b.n	800271a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	429a      	cmp	r2, r3
 8002716:	d1d6      	bne.n	80026c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e3d4      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	4ba1      	ldr	r3, [pc, #644]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002740:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80e4 	beq.w	8002920 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_RCC_OscConfig+0x4a>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	f040 808b 	bne.w	800287c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8087 	bne.w	800287c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276e:	4b93      	ldr	r3, [pc, #588]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e3ac      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_RCC_OscConfig+0x7c>
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279e:	e005      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
 80027a0:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d223      	bcs.n	80027f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fd09 	bl	80031cc <RCC_SetFlashLatencyFromMSIRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e38d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a7c      	ldr	r2, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4977      	ldr	r1, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4972      	ldr	r1, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 80027f6:	e025      	b.n	8002844 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f8:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	496a      	ldr	r1, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002816:	4b69      	ldr	r3, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	4965      	ldr	r1, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fcc9 	bl	80031cc <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e34d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002844:	f000 fc36 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	495a      	ldr	r1, [pc, #360]	; (80029c0 <HAL_RCC_OscConfig+0x29c>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002862:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_RCC_OscConfig+0x2a4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe ff91 	bl	8001790 <HAL_InitTick>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d052      	beq.n	800291e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	e331      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d032      	beq.n	80028ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002884:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002890:	f7fe ffce 	bl	8001830 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002898:	f7fe ffca 	bl	8001830 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e31a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028aa:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a40      	ldr	r2, [pc, #256]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	493b      	ldr	r1, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d4:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e01a      	b.n	8002920 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a33      	ldr	r2, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f6:	f7fe ff9b 	bl	8001830 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fe:	f7fe ff97 	bl	8001830 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e2e7      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x1da>
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d074      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x21a>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d10e      	bne.n	8002956 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d064      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d160      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e2c4      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x24a>
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e01d      	b.n	80029aa <HAL_RCC_OscConfig+0x286>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x26e>
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800297e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e00b      	b.n	80029aa <HAL_RCC_OscConfig+0x286>
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80029a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01c      	beq.n	80029ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe ff3d 	bl	8001830 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b8:	e011      	b.n	80029de <HAL_RCC_OscConfig+0x2ba>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	080053d0 	.word	0x080053d0
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe ff30 	bl	8001830 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e280      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4baf      	ldr	r3, [pc, #700]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x2a8>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe ff20 	bl	8001830 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe ff1c 	bl	8001830 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e26c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a06:	4ba5      	ldr	r3, [pc, #660]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2d0>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d060      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x310>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d116      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x328>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e249      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b93      	ldr	r3, [pc, #588]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	4990      	ldr	r1, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	e040      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d023      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6a:	4b8c      	ldr	r3, [pc, #560]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a8b      	ldr	r2, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe fedb 	bl	8001830 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fed7 	bl	8001830 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e227      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	497c      	ldr	r1, [pc, #496]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b7a      	ldr	r3, [pc, #488]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a79      	ldr	r2, [pc, #484]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe feb7 	bl	8001830 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe feb3 	bl	8001830 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e203      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad8:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fe92 	bl	8001830 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b10:	f7fe fe8e 	bl	8001830 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1de      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b22:	4b5e      	ldr	r3, [pc, #376]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3ec>
 8002b30:	e01b      	b.n	8002b6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b32:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fe75 	bl	8001830 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fe71 	bl	8001830 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1c1      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5c:	4b4f      	ldr	r3, [pc, #316]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a6 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b7c:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a43      	ldr	r2, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d118      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fe38 	bl	8001830 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe fe34 	bl	8001830 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e184      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4d8>
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bfa:	e024      	b.n	8002c46 <HAL_RCC_OscConfig+0x522>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d110      	bne.n	8002c26 <HAL_RCC_OscConfig+0x502>
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c24:	e00f      	b.n	8002c46 <HAL_RCC_OscConfig+0x522>
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fdef 	bl	8001830 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe fdeb 	bl	8001830 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e139      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ed      	beq.n	8002c56 <HAL_RCC_OscConfig+0x532>
 8002c7a:	e01a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fdd8 	bl	8001830 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe fdd4 	bl	8001830 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d906      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e122      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca4:	4b90      	ldr	r3, [pc, #576]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e8      	bne.n	8002c84 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	4a8a      	ldr	r2, [pc, #552]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8108 	beq.w	8002ede <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	f040 80d0 	bne.w	8002e78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cd8:	4b83      	ldr	r3, [pc, #524]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d130      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d127      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11f      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d18:	2a07      	cmp	r2, #7
 8002d1a:	bf14      	ite	ne
 8002d1c:	2201      	movne	r2, #1
 8002d1e:	2200      	moveq	r2, #0
 8002d20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d113      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	3b01      	subs	r3, #1
 8002d34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	3b01      	subs	r3, #1
 8002d48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d06e      	beq.n	8002e2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d069      	beq.n	8002e28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d54:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b7      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d70:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a5c      	ldr	r2, [pc, #368]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d7c:	f7fe fd58 	bl	8001830 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fd54 	bl	8001830 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0a4      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d96:	4b54      	ldr	r3, [pc, #336]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	4b51      	ldr	r3, [pc, #324]	; (8002eec <HAL_RCC_OscConfig+0x7c8>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002db2:	3a01      	subs	r2, #1
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dbc:	0212      	lsls	r2, r2, #8
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dc4:	0852      	lsrs	r2, r2, #1
 8002dc6:	3a01      	subs	r2, #1
 8002dc8:	0552      	lsls	r2, r2, #21
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd0:	0852      	lsrs	r2, r2, #1
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	0652      	lsls	r2, r2, #25
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ddc:	0912      	lsrs	r2, r2, #4
 8002dde:	0452      	lsls	r2, r2, #17
 8002de0:	430a      	orrs	r2, r1
 8002de2:	4941      	ldr	r1, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a3e      	ldr	r2, [pc, #248]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df4:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e00:	f7fe fd16 	bl	8001830 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fd12 	bl	8001830 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e062      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e26:	e05a      	b.n	8002ede <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e059      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d152      	bne.n	8002ede <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e50:	f7fe fcee 	bl	8001830 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fcea 	bl	8001830 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e03a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x734>
 8002e76:	e032      	b.n	8002ede <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d02d      	beq.n	8002eda <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002e9c:	f023 0303 	bic.w	r3, r3, #3
 8002ea0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002ea8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fcbd 	bl	8001830 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fcb9 	bl	8001830 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e009      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x7c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x796>
 8002ed8:	e001      	b.n	8002ede <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	f99d808c 	.word	0xf99d808c

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0c8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d910      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 0207 	bic.w	r2, r3, #7
 8002f1a:	4961      	ldr	r1, [pc, #388]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b0      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d04c      	beq.n	8002fda <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f48:	4b56      	ldr	r3, [pc, #344]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d121      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e09e      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d115      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e092      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f78:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e086      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e07e      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f98:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 0203 	bic.w	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	493f      	ldr	r1, [pc, #252]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002faa:	f7fe fc41 	bl	8001830 <HAL_GetTick>
 8002fae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb2:	f7fe fc3d 	bl	8001830 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e066      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 020c 	and.w	r2, r3, #12
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d1eb      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	492c      	ldr	r1, [pc, #176]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d210      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	4924      	ldr	r1, [pc, #144]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e036      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4918      	ldr	r1, [pc, #96]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4910      	ldr	r1, [pc, #64]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003066:	f000 f825 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_RCC_ClockConfig+0x1b4>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490c      	ldr	r1, [pc, #48]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fb80 	bl	8001790 <HAL_InitTick>
 8003090:	4603      	mov	r3, r0
 8003092:	72fb      	strb	r3, [r7, #11]

  return status;
 8003094:	7afb      	ldrb	r3, [r7, #11]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	080053d0 	.word	0x080053d0
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x34>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d121      	bne.n	8003126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d11e      	bne.n	8003126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e005      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003124:	e00a      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d102      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	e004      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d101      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800313a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d134      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0xa6>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d003      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0xac>
 8003158:	e005      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800315c:	617b      	str	r3, [r7, #20]
      break;
 800315e:	e005      	b.n	800316c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003162:	617b      	str	r3, [r7, #20]
      break;
 8003164:	e002      	b.n	800316c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	617b      	str	r3, [r7, #20]
      break;
 800316a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	fb02 f203 	mul.w	r2, r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	0e5b      	lsrs	r3, r3, #25
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	3301      	adds	r3, #1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031ac:	69bb      	ldr	r3, [r7, #24]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	080053e8 	.word	0x080053e8
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031e4:	f7ff f96e 	bl	80024c4 <HAL_PWREx_GetVoltageRange>
 80031e8:	6178      	str	r0, [r7, #20]
 80031ea:	e014      	b.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	4a24      	ldr	r2, [pc, #144]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6593      	str	r3, [r2, #88]	; 0x58
 80031f8:	4b22      	ldr	r3, [pc, #136]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003204:	f7ff f95e 	bl	80024c4 <HAL_PWREx_GetVoltageRange>
 8003208:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003214:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321c:	d10b      	bne.n	8003236 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d919      	bls.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2ba0      	cmp	r3, #160	; 0xa0
 8003228:	d902      	bls.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800322a:	2302      	movs	r3, #2
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e013      	b.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003230:	2301      	movs	r3, #1
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e010      	b.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d902      	bls.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800323c:	2303      	movs	r3, #3
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e00a      	b.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d102      	bne.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003248:	2302      	movs	r3, #2
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e004      	b.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b70      	cmp	r3, #112	; 0x70
 8003252:	d101      	bne.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003254:	2301      	movs	r3, #1
 8003256:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 0207 	bic.w	r2, r3, #7
 8003260:	4909      	ldr	r1, [pc, #36]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	40022000 	.word	0x40022000

0800328c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003294:	2300      	movs	r3, #0
 8003296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003298:	2300      	movs	r3, #0
 800329a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d041      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032b0:	d02a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032b6:	d824      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032c2:	d81e      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d010      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ce:	e018      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d0:	4b86      	ldr	r3, [pc, #536]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a85      	ldr	r2, [pc, #532]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032dc:	e015      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 facb 	bl	8003880 <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3320      	adds	r3, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fbb6 	bl	8003a68 <RCCEx_PLLSAI2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	74fb      	strb	r3, [r7, #19]
      break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003310:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331e:	4973      	ldr	r1, [pc, #460]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d041      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800333c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003340:	d02a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003342:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003346:	d824      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800334e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003352:	d81e      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800335c:	d010      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800335e:	e018      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003360:	4b62      	ldr	r3, [pc, #392]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a61      	ldr	r2, [pc, #388]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800336c:	e015      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa83 	bl	8003880 <RCCEx_PLLSAI1_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800337e:	e00c      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3320      	adds	r3, #32
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fb6e 	bl	8003a68 <RCCEx_PLLSAI2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003390:	e003      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	74fb      	strb	r3, [r7, #19]
      break;
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339a:	7cfb      	ldrb	r3, [r7, #19]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033a0:	4b52      	ldr	r3, [pc, #328]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ae:	494f      	ldr	r1, [pc, #316]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033b6:	e001      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a0 	beq.w	800350a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e4:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	4a40      	ldr	r2, [pc, #256]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ee:	6593      	str	r3, [r2, #88]	; 0x58
 80033f0:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fc:	2301      	movs	r3, #1
 80033fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3a      	ldr	r2, [pc, #232]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800340c:	f7fe fa10 	bl	8001830 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003412:	e009      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fe fa0c 	bl	8001830 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d902      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	74fb      	strb	r3, [r7, #19]
        break;
 8003426:	e005      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ef      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d15c      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003444:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01f      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d019      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003462:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	4a20      	ldr	r2, [pc, #128]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe f9cb 	bl	8001830 <HAL_GetTick>
 800349a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349c:	e00b      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fe f9c7 	bl	8001830 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d902      	bls.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	74fb      	strb	r3, [r7, #19]
            break;
 80034b4:	e006      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ec      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	4904      	ldr	r1, [pc, #16]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e2:	e009      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	74bb      	strb	r3, [r7, #18]
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f8:	7c7b      	ldrb	r3, [r7, #17]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4b9e      	ldr	r3, [pc, #632]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	4a9d      	ldr	r2, [pc, #628]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003516:	4b98      	ldr	r3, [pc, #608]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 0203 	bic.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	4994      	ldr	r1, [pc, #592]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003538:	4b8f      	ldr	r3, [pc, #572]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 020c 	bic.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	498c      	ldr	r1, [pc, #560]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355a:	4b87      	ldr	r3, [pc, #540]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	4983      	ldr	r1, [pc, #524]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800357c:	4b7e      	ldr	r3, [pc, #504]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	497b      	ldr	r1, [pc, #492]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	4972      	ldr	r1, [pc, #456]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c0:	4b6d      	ldr	r3, [pc, #436]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	496a      	ldr	r1, [pc, #424]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035e2:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	4961      	ldr	r1, [pc, #388]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003604:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003612:	4959      	ldr	r1, [pc, #356]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003626:	4b54      	ldr	r3, [pc, #336]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	4950      	ldr	r1, [pc, #320]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	4948      	ldr	r1, [pc, #288]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800366a:	4b43      	ldr	r3, [pc, #268]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	493f      	ldr	r1, [pc, #252]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d028      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368c:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	4937      	ldr	r1, [pc, #220]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036aa:	d106      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a31      	ldr	r2, [pc, #196]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b6:	60d3      	str	r3, [r2, #12]
 80036b8:	e011      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c2:	d10c      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	2101      	movs	r1, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f8d8 	bl	8003880 <RCCEx_PLLSAI1_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036da:	7cfb      	ldrb	r3, [r7, #19]
 80036dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d028      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	491f      	ldr	r1, [pc, #124]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003708:	d106      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003714:	60d3      	str	r3, [r2, #12]
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003720:	d10c      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f8a9 	bl	8003880 <RCCEx_PLLSAI1_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003756:	4908      	ldr	r1, [pc, #32]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003766:	d109      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a02      	ldr	r2, [pc, #8]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003772:	60d3      	str	r3, [r2, #12]
 8003774:	e014      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	2101      	movs	r1, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f877 	bl	8003880 <RCCEx_PLLSAI1_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02f      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ba:	4928      	ldr	r1, [pc, #160]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ca:	d10d      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	2102      	movs	r1, #2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f854 	bl	8003880 <RCCEx_PLLSAI1_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d014      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	74bb      	strb	r3, [r7, #18]
 80037e6:	e011      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3320      	adds	r3, #32
 80037f6:	2102      	movs	r1, #2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f935 	bl	8003a68 <RCCEx_PLLSAI2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	490d      	ldr	r1, [pc, #52]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384a:	4904      	ldr	r1, [pc, #16]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003852:	7cbb      	ldrb	r3, [r7, #18]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000

08003880 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800388e:	4b75      	ldr	r3, [pc, #468]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d018      	beq.n	80038cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800389a:	4b72      	ldr	r3, [pc, #456]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0203 	and.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d10d      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
       ||
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038b2:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
       ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d047      	beq.n	8003956 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e044      	b.n	8003956 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d018      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0x86>
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d825      	bhi.n	8003924 <RCCEx_PLLSAI1_Config+0xa4>
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d002      	beq.n	80038e2 <RCCEx_PLLSAI1_Config+0x62>
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d009      	beq.n	80038f4 <RCCEx_PLLSAI1_Config+0x74>
 80038e0:	e020      	b.n	8003924 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e2:	4b60      	ldr	r3, [pc, #384]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11d      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f2:	e01a      	b.n	800392a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f4:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d116      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003904:	e013      	b.n	800392e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003906:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003912:	4b54      	ldr	r3, [pc, #336]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003922:	e006      	b.n	8003932 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      break;
 8003928:	e004      	b.n	8003934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003932:	bf00      	nop
    }

    if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10d      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800393a:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6819      	ldr	r1, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	430b      	orrs	r3, r1
 8003950:	4944      	ldr	r1, [pc, #272]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d17d      	bne.n	8003a58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800395c:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003968:	f7fd ff62 	bl	8001830 <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800396e:	e009      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003970:	f7fd ff5e 	bl	8001830 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	73fb      	strb	r3, [r7, #15]
        break;
 8003982:	e005      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003984:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ef      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d160      	bne.n	8003a58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d111      	bne.n	80039c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68d2      	ldr	r2, [r2, #12]
 80039b2:	0912      	lsrs	r2, r2, #4
 80039b4:	0452      	lsls	r2, r2, #17
 80039b6:	430a      	orrs	r2, r1
 80039b8:	492a      	ldr	r1, [pc, #168]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	610b      	str	r3, [r1, #16]
 80039be:	e027      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d112      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	0211      	lsls	r1, r2, #8
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6912      	ldr	r2, [r2, #16]
 80039dc:	0852      	lsrs	r2, r2, #1
 80039de:	3a01      	subs	r2, #1
 80039e0:	0552      	lsls	r2, r2, #21
 80039e2:	430a      	orrs	r2, r1
 80039e4:	491f      	ldr	r1, [pc, #124]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]
 80039ea:	e011      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6892      	ldr	r2, [r2, #8]
 80039fc:	0211      	lsls	r1, r2, #8
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6952      	ldr	r2, [r2, #20]
 8003a02:	0852      	lsrs	r2, r2, #1
 8003a04:	3a01      	subs	r2, #1
 8003a06:	0652      	lsls	r2, r2, #25
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	4916      	ldr	r1, [pc, #88]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fd ff08 	bl	8001830 <HAL_GetTick>
 8003a20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a22:	e009      	b.n	8003a38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a24:	f7fd ff04 	bl	8001830 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d902      	bls.n	8003a38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	73fb      	strb	r3, [r7, #15]
          break;
 8003a36:	e005      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ef      	beq.n	8003a24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	4904      	ldr	r1, [pc, #16]	; (8003a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000

08003a68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a76:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d018      	beq.n	8003ab4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a82:	4b67      	ldr	r3, [pc, #412]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0203 	and.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d10d      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
       ||
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a9a:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
       ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d047      	beq.n	8003b3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	e044      	b.n	8003b3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d018      	beq.n	8003aee <RCCEx_PLLSAI2_Config+0x86>
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d825      	bhi.n	8003b0c <RCCEx_PLLSAI2_Config+0xa4>
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d002      	beq.n	8003aca <RCCEx_PLLSAI2_Config+0x62>
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d009      	beq.n	8003adc <RCCEx_PLLSAI2_Config+0x74>
 8003ac8:	e020      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aca:	4b55      	ldr	r3, [pc, #340]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11d      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ada:	e01a      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003adc:	4b50      	ldr	r3, [pc, #320]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d116      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aec:	e013      	b.n	8003b16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aee:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003afa:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b0a:	e006      	b.n	8003b1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	e004      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b22:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	430b      	orrs	r3, r1
 8003b38:	4939      	ldr	r1, [pc, #228]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d167      	bne.n	8003c14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a35      	ldr	r2, [pc, #212]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd fe6e 	bl	8001830 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b56:	e009      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b58:	f7fd fe6a 	bl	8001830 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d902      	bls.n	8003b6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6a:	e005      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ef      	bne.n	8003b58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d14a      	bne.n	8003c14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d111      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	0211      	lsls	r1, r2, #8
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	0912      	lsrs	r2, r2, #4
 8003b9c:	0452      	lsls	r2, r2, #17
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	491f      	ldr	r1, [pc, #124]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	614b      	str	r3, [r1, #20]
 8003ba6:	e011      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	0211      	lsls	r1, r2, #8
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6912      	ldr	r2, [r2, #16]
 8003bbe:	0852      	lsrs	r2, r2, #1
 8003bc0:	3a01      	subs	r2, #1
 8003bc2:	0652      	lsls	r2, r2, #25
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	4916      	ldr	r1, [pc, #88]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fe2a 	bl	8001830 <HAL_GetTick>
 8003bdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bde:	e009      	b.n	8003bf4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003be0:	f7fd fe26 	bl	8001830 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d902      	bls.n	8003bf4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	73fb      	strb	r3, [r7, #15]
          break;
 8003bf2:	e005      	b.n	8003c00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ef      	beq.n	8003be0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000

08003c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e095      	b.n	8003d62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c46:	d009      	beq.n	8003c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61da      	str	r2, [r3, #28]
 8003c4e:	e005      	b.n	8003c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fbb0 	bl	80013dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c9c:	d902      	bls.n	8003ca4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e002      	b.n	8003caa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cb2:	d007      	beq.n	8003cc4 <HAL_SPI_Init+0xa0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	ea42 0103 	orr.w	r1, r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	f003 0204 	and.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d40:	ea42 0103 	orr.w	r1, r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <LL_EXTI_EnableIT_0_31>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <LL_EXTI_EnableIT_0_31+0x20>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4904      	ldr	r1, [pc, #16]	; (8003d8c <LL_EXTI_EnableIT_0_31+0x20>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	40010400 	.word	0x40010400

08003d90 <LL_EXTI_EnableIT_32_63>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <LL_EXTI_EnableIT_32_63+0x20>)
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	4904      	ldr	r1, [pc, #16]	; (8003db0 <LL_EXTI_EnableIT_32_63+0x20>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	620b      	str	r3, [r1, #32]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40010400 	.word	0x40010400

08003db4 <LL_EXTI_DisableIT_0_31>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010400 	.word	0x40010400

08003ddc <LL_EXTI_DisableIT_32_63>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <LL_EXTI_DisableIT_32_63+0x24>)
 8003de6:	6a1a      	ldr	r2, [r3, #32]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	4904      	ldr	r1, [pc, #16]	; (8003e00 <LL_EXTI_DisableIT_32_63+0x24>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	620b      	str	r3, [r1, #32]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010400 	.word	0x40010400

08003e04 <LL_EXTI_EnableEvent_0_31>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	4904      	ldr	r1, [pc, #16]	; (8003e24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40010400 	.word	0x40010400

08003e28 <LL_EXTI_EnableEvent_32_63>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e34:	4904      	ldr	r1, [pc, #16]	; (8003e48 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40010400 	.word	0x40010400

08003e4c <LL_EXTI_DisableEvent_0_31>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	4904      	ldr	r1, [pc, #16]	; (8003e70 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010400 	.word	0x40010400

08003e74 <LL_EXTI_DisableEvent_32_63>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	4904      	ldr	r1, [pc, #16]	; (8003e98 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010400 	.word	0x40010400

08003e9c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4904      	ldr	r1, [pc, #16]	; (8003ebc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ecc:	4904      	ldr	r1, [pc, #16]	; (8003ee0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	4904      	ldr	r1, [pc, #16]	; (8003f08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010400 	.word	0x40010400

08003f0c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010400 	.word	0x40010400

08003f34 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	4904      	ldr	r1, [pc, #16]	; (8003f54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40010400 	.word	0x40010400

08003f58 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	4904      	ldr	r1, [pc, #16]	; (8003f78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40010400 	.word	0x40010400

08003f7c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	4904      	ldr	r1, [pc, #16]	; (8003fa0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60cb      	str	r3, [r1, #12]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010400 	.word	0x40010400

08003fa4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010400 	.word	0x40010400

08003fcc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7a1b      	ldrb	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80d1 	beq.w	8004184 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d063      	beq.n	80040b2 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7a5b      	ldrb	r3, [r3, #9]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d01c      	beq.n	800402c <LL_EXTI_Init+0x60>
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	dc25      	bgt.n	8004042 <LL_EXTI_Init+0x76>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <LL_EXTI_Init+0x34>
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d00b      	beq.n	8004016 <LL_EXTI_Init+0x4a>
 8003ffe:	e020      	b.n	8004042 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff21 	bl	8003e4c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff feac 	bl	8003d6c <LL_EXTI_EnableIT_0_31>
          break;
 8004014:	e018      	b.n	8004048 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff feca 	bl	8003db4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff feed 	bl	8003e04 <LL_EXTI_EnableEvent_0_31>
          break;
 800402a:	e00d      	b.n	8004048 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fe9b 	bl	8003d6c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fee2 	bl	8003e04 <LL_EXTI_EnableEvent_0_31>
          break;
 8004040:	e002      	b.n	8004048 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8004042:	2301      	movs	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
          break;
 8004046:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7a9b      	ldrb	r3, [r3, #10]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d030      	beq.n	80040b2 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	7a9b      	ldrb	r3, [r3, #10]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d01c      	beq.n	8004092 <LL_EXTI_Init+0xc6>
 8004058:	2b03      	cmp	r3, #3
 800405a:	dc25      	bgt.n	80040a8 <LL_EXTI_Init+0xdc>
 800405c:	2b01      	cmp	r3, #1
 800405e:	d002      	beq.n	8004066 <LL_EXTI_Init+0x9a>
 8004060:	2b02      	cmp	r3, #2
 8004062:	d00b      	beq.n	800407c <LL_EXTI_Init+0xb0>
 8004064:	e020      	b.n	80040a8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ff86 	bl	8003f7c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff11 	bl	8003e9c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800407a:	e01b      	b.n	80040b4 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff2f 	bl	8003ee4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ff52 	bl	8003f34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004090:	e010      	b.n	80040b4 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff00 	bl	8003e9c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff47 	bl	8003f34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80040a6:	e005      	b.n	80040b4 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	60fb      	str	r3, [r7, #12]
            break;
 80040b0:	e000      	b.n	80040b4 <LL_EXTI_Init+0xe8>
        }
      }
 80040b2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d078      	beq.n	80041ae <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7a5b      	ldrb	r3, [r3, #9]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d01c      	beq.n	80040fe <LL_EXTI_Init+0x132>
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	dc25      	bgt.n	8004114 <LL_EXTI_Init+0x148>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <LL_EXTI_Init+0x106>
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d00b      	beq.n	80040e8 <LL_EXTI_Init+0x11c>
 80040d0:	e020      	b.n	8004114 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fecc 	bl	8003e74 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fe55 	bl	8003d90 <LL_EXTI_EnableIT_32_63>
          break;
 80040e6:	e01a      	b.n	800411e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fe75 	bl	8003ddc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fe96 	bl	8003e28 <LL_EXTI_EnableEvent_32_63>
          break;
 80040fc:	e00f      	b.n	800411e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fe44 	bl	8003d90 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fe8b 	bl	8003e28 <LL_EXTI_EnableEvent_32_63>
          break;
 8004112:	e004      	b.n	800411e <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
          break;
 800411c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7a9b      	ldrb	r3, [r3, #10]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d043      	beq.n	80041ae <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7a9b      	ldrb	r3, [r3, #10]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d01c      	beq.n	8004168 <LL_EXTI_Init+0x19c>
 800412e:	2b03      	cmp	r3, #3
 8004130:	dc25      	bgt.n	800417e <LL_EXTI_Init+0x1b2>
 8004132:	2b01      	cmp	r3, #1
 8004134:	d002      	beq.n	800413c <LL_EXTI_Init+0x170>
 8004136:	2b02      	cmp	r3, #2
 8004138:	d00b      	beq.n	8004152 <LL_EXTI_Init+0x186>
 800413a:	e020      	b.n	800417e <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff ff2f 	bl	8003fa4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff feb8 	bl	8003ec0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004150:	e02e      	b.n	80041b0 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fed8 	bl	8003f0c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fef9 	bl	8003f58 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004166:	e023      	b.n	80041b0 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fea7 	bl	8003ec0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff feee 	bl	8003f58 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800417c:	e018      	b.n	80041b0 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
            break;
 8004182:	e015      	b.n	80041b0 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fe13 	bl	8003db4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fe5a 	bl	8003e4c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fe1d 	bl	8003ddc <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fe64 	bl	8003e74 <LL_EXTI_DisableEvent_32_63>
 80041ac:	e000      	b.n	80041b0 <LL_EXTI_Init+0x1e4>
      }
 80041ae:	bf00      	nop
  }

  return status;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <LL_GPIO_SetPinMode>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b08b      	sub	sp, #44	; 0x2c
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	613b      	str	r3, [r7, #16]
  return result;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	2103      	movs	r1, #3
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	401a      	ands	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	61fb      	str	r3, [r7, #28]
  return result;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800420e:	2320      	movs	r3, #32
 8004210:	e003      	b.n	800421a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	431a      	orrs	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]
}
 8004228:	bf00      	nop
 800422a:	372c      	adds	r7, #44	; 0x2c
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_GPIO_SetPinOutputType>:
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	43db      	mvns	r3, r3
 8004248:	401a      	ands	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	605a      	str	r2, [r3, #4]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_GPIO_SetPinSpeed>:
{
 8004264:	b480      	push	{r7}
 8004266:	b08b      	sub	sp, #44	; 0x2c
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	613b      	str	r3, [r7, #16]
  return result;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800428a:	2320      	movs	r3, #32
 800428c:	e003      	b.n	8004296 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	fab3 f383 	clz	r3, r3
 8004294:	b2db      	uxtb	r3, r3
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	2103      	movs	r1, #3
 800429a:	fa01 f303 	lsl.w	r3, r1, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	401a      	ands	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	61fb      	str	r3, [r7, #28]
  return result;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80042b8:	2320      	movs	r3, #32
 80042ba:	e003      	b.n	80042c4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	609a      	str	r2, [r3, #8]
}
 80042d2:	bf00      	nop
 80042d4:	372c      	adds	r7, #44	; 0x2c
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_GPIO_SetPinPull>:
{
 80042de:	b480      	push	{r7}
 80042e0:	b08b      	sub	sp, #44	; 0x2c
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	613b      	str	r3, [r7, #16]
  return result;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004304:	2320      	movs	r3, #32
 8004306:	e003      	b.n	8004310 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2103      	movs	r1, #3
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	61fb      	str	r3, [r7, #28]
  return result;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004332:	2320      	movs	r3, #32
 8004334:	e003      	b.n	800433e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	431a      	orrs	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	60da      	str	r2, [r3, #12]
}
 800434c:	bf00      	nop
 800434e:	372c      	adds	r7, #44	; 0x2c
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_GPIO_SetAFPin_0_7>:
{
 8004358:	b480      	push	{r7}
 800435a:	b08b      	sub	sp, #44	; 0x2c
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1a      	ldr	r2, [r3, #32]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	613b      	str	r3, [r7, #16]
  return result;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800437e:	2320      	movs	r3, #32
 8004380:	e003      	b.n	800438a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	210f      	movs	r1, #15
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	401a      	ands	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	61fb      	str	r3, [r7, #28]
  return result;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80043ac:	2320      	movs	r3, #32
 80043ae:	e003      	b.n	80043b8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	372c      	adds	r7, #44	; 0x2c
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LL_GPIO_SetAFPin_8_15>:
{
 80043d2:	b480      	push	{r7}
 80043d4:	b08b      	sub	sp, #44	; 0x2c
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	613b      	str	r3, [r7, #16]
  return result;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80043fa:	2320      	movs	r3, #32
 80043fc:	e003      	b.n	8004406 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	210f      	movs	r1, #15
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	401a      	ands	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	61fb      	str	r3, [r7, #28]
  return result;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800442a:	2320      	movs	r3, #32
 800442c:	e003      	b.n	8004436 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	fab3 f383 	clz	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	431a      	orrs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004444:	bf00      	nop
 8004446:	372c      	adds	r7, #44	; 0x2c
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	60fb      	str	r3, [r7, #12]
  return result;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <LL_GPIO_Init+0x26>
    return 32U;
 8004472:	2320      	movs	r3, #32
 8004474:	e003      	b.n	800447e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004480:	e048      	b.n	8004514 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	2101      	movs	r1, #1
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d03a      	beq.n	800450e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d003      	beq.n	80044a8 <LL_GPIO_Init+0x58>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d10e      	bne.n	80044c6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	461a      	mov	r2, r3
 80044ae:	69b9      	ldr	r1, [r7, #24]
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fed7 	bl	8004264 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	461a      	mov	r2, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff feb7 	bl	8004234 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	461a      	mov	r2, r3
 80044cc:	69b9      	ldr	r1, [r7, #24]
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff05 	bl	80042de <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d111      	bne.n	8004500 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2bff      	cmp	r3, #255	; 0xff
 80044e0:	d807      	bhi.n	80044f2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	461a      	mov	r2, r3
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff ff34 	bl	8004358 <LL_GPIO_SetAFPin_0_7>
 80044f0:	e006      	b.n	8004500 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	461a      	mov	r2, r3
 80044f8:	69b9      	ldr	r1, [r7, #24]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ff69 	bl	80043d2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	461a      	mov	r2, r3
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fe56 	bl	80041ba <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1af      	bne.n	8004482 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <LL_RCC_HSI_IsReady+0x24>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453c:	d101      	bne.n	8004542 <LL_RCC_HSI_IsReady+0x16>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <LL_RCC_HSI_IsReady+0x18>
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000

08004554 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <LL_RCC_LSE_IsReady+0x24>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d101      	bne.n	800456a <LL_RCC_LSE_IsReady+0x16>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <LL_RCC_LSE_IsReady+0x18>
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000

0800457c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b08      	cmp	r3, #8
 800458a:	d101      	bne.n	8004590 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40021000 	.word	0x40021000

080045a0 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <LL_RCC_MSI_GetRange+0x18>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000

080045bc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80045c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40021000 	.word	0x40021000

080045d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <LL_RCC_GetSysClkSource+0x18>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000

080045f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <LL_RCC_GetAHBPrescaler+0x18>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000

08004610 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000

0800462c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000

08004648 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <LL_RCC_GetUSARTClockSource+0x24>)
 8004652:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	401a      	ands	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	4313      	orrs	r3, r2
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40021000 	.word	0x40021000

08004670 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <LL_RCC_GetUARTClockSource+0x24>)
 800467a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	401a      	ands	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	4313      	orrs	r3, r2
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40021000 	.word	0x40021000

08004698 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0303 	and.w	r3, r3, #3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000

080046b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <LL_RCC_PLL_GetN+0x18>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40021000 	.word	0x40021000

080046d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <LL_RCC_PLL_GetR+0x18>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000

080046ec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <LL_RCC_PLL_GetDivider+0x18>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000

08004708 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d137      	bne.n	800478a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ff94 	bl	8004648 <LL_RCC_GetUSARTClockSource>
 8004720:	4603      	mov	r3, r0
 8004722:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004726:	2b03      	cmp	r3, #3
 8004728:	f200 80b3 	bhi.w	8004892 <LL_RCC_GetUSARTClockFreq+0x18a>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004773 	.word	0x08004773
 8004738:	08004745 	.word	0x08004745
 800473c:	0800474d 	.word	0x0800474d
 8004740:	0800475f 	.word	0x0800475f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004744:	f000 f95c 	bl	8004a00 <RCC_GetSystemClockFreq>
 8004748:	60f8      	str	r0, [r7, #12]
        break;
 800474a:	e0b5      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800474c:	f7ff feee 	bl	800452c <LL_RCC_HSI_IsReady>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 809f 	beq.w	8004896 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8004758:	4b5a      	ldr	r3, [pc, #360]	; (80048c4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800475a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800475c:	e09b      	b.n	8004896 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800475e:	f7ff fef9 	bl	8004554 <LL_RCC_LSE_IsReady>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8098 	beq.w	800489a <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800476a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004770:	e093      	b.n	800489a <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004772:	f000 f945 	bl	8004a00 <RCC_GetSystemClockFreq>
 8004776:	4603      	mov	r3, r0
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f9d1 	bl	8004b20 <RCC_GetHCLKClockFreq>
 800477e:	4603      	mov	r3, r0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 f9f7 	bl	8004b74 <RCC_GetPCLK2ClockFreq>
 8004786:	60f8      	str	r0, [r7, #12]
        break;
 8004788:	e096      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	d146      	bne.n	800481e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff59 	bl	8004648 <LL_RCC_GetUSARTClockSource>
 8004796:	4603      	mov	r3, r0
 8004798:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d87e      	bhi.n	800489e <LL_RCC_GetUSARTClockFreq+0x196>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	08004807 	.word	0x08004807
 80047ac:	0800489f 	.word	0x0800489f
 80047b0:	0800489f 	.word	0x0800489f
 80047b4:	0800489f 	.word	0x0800489f
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	0800489f 	.word	0x0800489f
 80047c0:	0800489f 	.word	0x0800489f
 80047c4:	0800489f 	.word	0x0800489f
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	0800489f 	.word	0x0800489f
 80047d0:	0800489f 	.word	0x0800489f
 80047d4:	0800489f 	.word	0x0800489f
 80047d8:	080047f5 	.word	0x080047f5
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80047dc:	f000 f910 	bl	8004a00 <RCC_GetSystemClockFreq>
 80047e0:	60f8      	str	r0, [r7, #12]
        break;
 80047e2:	e069      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80047e4:	f7ff fea2 	bl	800452c <LL_RCC_HSI_IsReady>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d059      	beq.n	80048a2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80047ee:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80047f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80047f2:	e056      	b.n	80048a2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80047f4:	f7ff feae 	bl	8004554 <LL_RCC_LSE_IsReady>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d053      	beq.n	80048a6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004802:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004804:	e04f      	b.n	80048a6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004806:	f000 f8fb 	bl	8004a00 <RCC_GetSystemClockFreq>
 800480a:	4603      	mov	r3, r0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f987 	bl	8004b20 <RCC_GetHCLKClockFreq>
 8004812:	4603      	mov	r3, r0
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f999 	bl	8004b4c <RCC_GetPCLK1ClockFreq>
 800481a:	60f8      	str	r0, [r7, #12]
        break;
 800481c:	e04c      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d142      	bne.n	80048aa <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff0f 	bl	8004648 <LL_RCC_GetUSARTClockSource>
 800482a:	4603      	mov	r3, r0
 800482c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004830:	d01a      	beq.n	8004868 <LL_RCC_GetUSARTClockFreq+0x160>
 8004832:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004836:	d83a      	bhi.n	80048ae <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004838:	4a23      	ldr	r2, [pc, #140]	; (80048c8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00c      	beq.n	8004858 <LL_RCC_GetUSARTClockFreq+0x150>
 800483e:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d834      	bhi.n	80048ae <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004848:	d017      	beq.n	800487a <LL_RCC_GetUSARTClockFreq+0x172>
 800484a:	4a20      	ldr	r2, [pc, #128]	; (80048cc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d12e      	bne.n	80048ae <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8004850:	f000 f8d6 	bl	8004a00 <RCC_GetSystemClockFreq>
 8004854:	60f8      	str	r0, [r7, #12]
          break;
 8004856:	e02f      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8004858:	f7ff fe68 	bl	800452c <LL_RCC_HSI_IsReady>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d027      	beq.n	80048b2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8004862:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004864:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004866:	e024      	b.n	80048b2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8004868:	f7ff fe74 	bl	8004554 <LL_RCC_LSE_IsReady>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d021      	beq.n	80048b6 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004878:	e01d      	b.n	80048b6 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800487a:	f000 f8c1 	bl	8004a00 <RCC_GetSystemClockFreq>
 800487e:	4603      	mov	r3, r0
 8004880:	4618      	mov	r0, r3
 8004882:	f000 f94d 	bl	8004b20 <RCC_GetHCLKClockFreq>
 8004886:	4603      	mov	r3, r0
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f95f 	bl	8004b4c <RCC_GetPCLK1ClockFreq>
 800488e:	60f8      	str	r0, [r7, #12]
          break;
 8004890:	e012      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004892:	bf00      	nop
 8004894:	e010      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004896:	bf00      	nop
 8004898:	e00e      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800489a:	bf00      	nop
 800489c:	e00c      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800489e:	bf00      	nop
 80048a0:	e00a      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80048a2:	bf00      	nop
 80048a4:	e008      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80048a6:	bf00      	nop
 80048a8:	e006      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80048aa:	bf00      	nop
 80048ac:	e004      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80048b6:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80048b8:	68fb      	ldr	r3, [r7, #12]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	00f42400 	.word	0x00f42400
 80048c8:	00300020 	.word	0x00300020
 80048cc:	00300010 	.word	0x00300010

080048d0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2bc0      	cmp	r3, #192	; 0xc0
 80048e0:	d136      	bne.n	8004950 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff fec4 	bl	8004670 <LL_RCC_GetUARTClockSource>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80048ee:	d01a      	beq.n	8004926 <LL_RCC_GetUARTClockFreq+0x56>
 80048f0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80048f4:	d82e      	bhi.n	8004954 <LL_RCC_GetUARTClockFreq+0x84>
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <LL_RCC_GetUARTClockFreq+0x11c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00c      	beq.n	8004916 <LL_RCC_GetUARTClockFreq+0x46>
 80048fc:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <LL_RCC_GetUARTClockFreq+0x11c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d828      	bhi.n	8004954 <LL_RCC_GetUARTClockFreq+0x84>
 8004902:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004906:	d017      	beq.n	8004938 <LL_RCC_GetUARTClockFreq+0x68>
 8004908:	4a39      	ldr	r2, [pc, #228]	; (80049f0 <LL_RCC_GetUARTClockFreq+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d122      	bne.n	8004954 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800490e:	f000 f877 	bl	8004a00 <RCC_GetSystemClockFreq>
 8004912:	60f8      	str	r0, [r7, #12]
        break;
 8004914:	e023      	b.n	800495e <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004916:	f7ff fe09 	bl	800452c <LL_RCC_HSI_IsReady>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8004920:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <LL_RCC_GetUARTClockFreq+0x124>)
 8004922:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004924:	e018      	b.n	8004958 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004926:	f7ff fe15 	bl	8004554 <LL_RCC_LSE_IsReady>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8004930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004934:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004936:	e011      	b.n	800495c <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004938:	f000 f862 	bl	8004a00 <RCC_GetSystemClockFreq>
 800493c:	4603      	mov	r3, r0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f8ee 	bl	8004b20 <RCC_GetHCLKClockFreq>
 8004944:	4603      	mov	r3, r0
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f900 	bl	8004b4c <RCC_GetPCLK1ClockFreq>
 800494c:	60f8      	str	r0, [r7, #12]
        break;
 800494e:	e006      	b.n	800495e <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8004950:	bf00      	nop
 8004952:	e004      	b.n	800495e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004954:	bf00      	nop
 8004956:	e002      	b.n	800495e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800495c:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004964:	d136      	bne.n	80049d4 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fe82 	bl	8004670 <LL_RCC_GetUARTClockSource>
 800496c:	4603      	mov	r3, r0
 800496e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004972:	d01a      	beq.n	80049aa <LL_RCC_GetUARTClockFreq+0xda>
 8004974:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004978:	d82e      	bhi.n	80049d8 <LL_RCC_GetUARTClockFreq+0x108>
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <LL_RCC_GetUARTClockFreq+0x128>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00c      	beq.n	800499a <LL_RCC_GetUARTClockFreq+0xca>
 8004980:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <LL_RCC_GetUARTClockFreq+0x128>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d828      	bhi.n	80049d8 <LL_RCC_GetUARTClockFreq+0x108>
 8004986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800498a:	d017      	beq.n	80049bc <LL_RCC_GetUARTClockFreq+0xec>
 800498c:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <LL_RCC_GetUARTClockFreq+0x12c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d122      	bne.n	80049d8 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004992:	f000 f835 	bl	8004a00 <RCC_GetSystemClockFreq>
 8004996:	60f8      	str	r0, [r7, #12]
        break;
 8004998:	e023      	b.n	80049e2 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800499a:	f7ff fdc7 	bl	800452c <LL_RCC_HSI_IsReady>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80049a4:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <LL_RCC_GetUARTClockFreq+0x124>)
 80049a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80049a8:	e018      	b.n	80049dc <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80049aa:	f7ff fdd3 	bl	8004554 <LL_RCC_LSE_IsReady>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d015      	beq.n	80049e0 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80049b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80049ba:	e011      	b.n	80049e0 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80049bc:	f000 f820 	bl	8004a00 <RCC_GetSystemClockFreq>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f8ac 	bl	8004b20 <RCC_GetHCLKClockFreq>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f8be 	bl	8004b4c <RCC_GetPCLK1ClockFreq>
 80049d0:	60f8      	str	r0, [r7, #12]
        break;
 80049d2:	e006      	b.n	80049e2 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80049d4:	bf00      	nop
 80049d6:	e004      	b.n	80049e2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80049e0:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	00c00080 	.word	0x00c00080
 80049f0:	00c00040 	.word	0x00c00040
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	03000200 	.word	0x03000200
 80049fc:	03000100 	.word	0x03000100

08004a00 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004a06:	f7ff fde7 	bl	80045d8 <LL_RCC_GetSysClkSource>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	d851      	bhi.n	8004ab4 <RCC_GetSystemClockFreq+0xb4>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <RCC_GetSystemClockFreq+0x18>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004ab5 	.word	0x08004ab5
 8004a20:	08004ab5 	.word	0x08004ab5
 8004a24:	08004ab5 	.word	0x08004ab5
 8004a28:	08004aa1 	.word	0x08004aa1
 8004a2c:	08004ab5 	.word	0x08004ab5
 8004a30:	08004ab5 	.word	0x08004ab5
 8004a34:	08004ab5 	.word	0x08004ab5
 8004a38:	08004aa7 	.word	0x08004aa7
 8004a3c:	08004ab5 	.word	0x08004ab5
 8004a40:	08004ab5 	.word	0x08004ab5
 8004a44:	08004ab5 	.word	0x08004ab5
 8004a48:	08004aad 	.word	0x08004aad
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a4c:	f7ff fd96 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d111      	bne.n	8004a7a <RCC_GetSystemClockFreq+0x7a>
 8004a56:	f7ff fd91 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <RCC_GetSystemClockFreq+0x6a>
 8004a60:	f7ff fd9e 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004a64:	4603      	mov	r3, r0
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	e003      	b.n	8004a72 <RCC_GetSystemClockFreq+0x72>
 8004a6a:	f7ff fda7 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	0a1b      	lsrs	r3, r3, #8
 8004a72:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <RCC_GetSystemClockFreq+0x114>)
 8004a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a78:	e010      	b.n	8004a9c <RCC_GetSystemClockFreq+0x9c>
 8004a7a:	f7ff fd7f 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <RCC_GetSystemClockFreq+0x8e>
 8004a84:	f7ff fd8c 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	e003      	b.n	8004a96 <RCC_GetSystemClockFreq+0x96>
 8004a8e:	f7ff fd95 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004a92:	4603      	mov	r3, r0
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <RCC_GetSystemClockFreq+0x114>)
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004a9e:	e033      	b.n	8004b08 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <RCC_GetSystemClockFreq+0x118>)
 8004aa2:	607b      	str	r3, [r7, #4]
      break;
 8004aa4:	e030      	b.n	8004b08 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <RCC_GetSystemClockFreq+0x11c>)
 8004aa8:	607b      	str	r3, [r7, #4]
      break;
 8004aaa:	e02d      	b.n	8004b08 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004aac:	f000 f876 	bl	8004b9c <RCC_PLL_GetFreqDomain_SYS>
 8004ab0:	6078      	str	r0, [r7, #4]
      break;
 8004ab2:	e029      	b.n	8004b08 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004ab4:	f7ff fd62 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d111      	bne.n	8004ae2 <RCC_GetSystemClockFreq+0xe2>
 8004abe:	f7ff fd5d 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <RCC_GetSystemClockFreq+0xd2>
 8004ac8:	f7ff fd6a 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004acc:	4603      	mov	r3, r0
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	e003      	b.n	8004ada <RCC_GetSystemClockFreq+0xda>
 8004ad2:	f7ff fd73 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	0a1b      	lsrs	r3, r3, #8
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <RCC_GetSystemClockFreq+0x114>)
 8004adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae0:	e010      	b.n	8004b04 <RCC_GetSystemClockFreq+0x104>
 8004ae2:	f7ff fd4b 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <RCC_GetSystemClockFreq+0xf6>
 8004aec:	f7ff fd58 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004af0:	4603      	mov	r3, r0
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	e003      	b.n	8004afe <RCC_GetSystemClockFreq+0xfe>
 8004af6:	f7ff fd61 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004afa:	4603      	mov	r3, r0
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <RCC_GetSystemClockFreq+0x114>)
 8004b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b04:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004b06:	bf00      	nop
  }

  return frequency;
 8004b08:	687b      	ldr	r3, [r7, #4]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	080053e8 	.word	0x080053e8
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004b28:	f7ff fd64 	bl	80045f4 <LL_RCC_GetAHBPrescaler>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <RCC_GetHCLKClockFreq+0x28>)
 8004b36:	5cd3      	ldrb	r3, [r2, r3]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	40d3      	lsrs	r3, r2
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	080053d0 	.word	0x080053d0

08004b4c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004b54:	f7ff fd5c 	bl	8004610 <LL_RCC_GetAPB1Prescaler>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <RCC_GetPCLK1ClockFreq+0x24>)
 8004b5e:	5cd3      	ldrb	r3, [r2, r3]
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	40d3      	lsrs	r3, r2
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	080053e0 	.word	0x080053e0

08004b74 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004b7c:	f7ff fd56 	bl	800462c <LL_RCC_GetAPB2Prescaler>
 8004b80:	4603      	mov	r3, r0
 8004b82:	0adb      	lsrs	r3, r3, #11
 8004b84:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <RCC_GetPCLK2ClockFreq+0x24>)
 8004b86:	5cd3      	ldrb	r3, [r2, r3]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	40d3      	lsrs	r3, r2
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	080053e0 	.word	0x080053e0

08004b9c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ba2:	f7ff fd79 	bl	8004698 <LL_RCC_PLL_GetMainSource>
 8004ba6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d036      	beq.n	8004c1c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d836      	bhi.n	8004c22 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d003      	beq.n	8004bc2 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d02a      	beq.n	8004c16 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8004bc0:	e02f      	b.n	8004c22 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004bc2:	f7ff fcdb 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d111      	bne.n	8004bf0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8004bcc:	f7ff fcd6 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d004      	beq.n	8004be0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8004bd6:	f7ff fce3 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	e003      	b.n	8004be8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8004be0:	f7ff fcec 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004be4:	4603      	mov	r3, r0
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	4a2f      	ldr	r2, [pc, #188]	; (8004ca8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bee:	e010      	b.n	8004c12 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8004bf0:	f7ff fcc4 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8004bfa:	f7ff fcd1 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	e003      	b.n	8004c0c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8004c04:	f7ff fcda 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004c14:	e02f      	b.n	8004c76 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004c16:	4b25      	ldr	r3, [pc, #148]	; (8004cac <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8004c18:	607b      	str	r3, [r7, #4]
      break;
 8004c1a:	e02c      	b.n	8004c76 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8004c1e:	607b      	str	r3, [r7, #4]
      break;
 8004c20:	e029      	b.n	8004c76 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004c22:	f7ff fcab 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d111      	bne.n	8004c50 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8004c2c:	f7ff fca6 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8004c36:	f7ff fcb3 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	0a1b      	lsrs	r3, r3, #8
 8004c3e:	e003      	b.n	8004c48 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8004c40:	f7ff fcbc 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004c44:	4603      	mov	r3, r0
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4e:	e010      	b.n	8004c72 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8004c50:	f7ff fc94 	bl	800457c <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8004c5a:	f7ff fca1 	bl	80045a0 <LL_RCC_MSI_GetRange>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	e003      	b.n	8004c6c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8004c64:	f7ff fcaa 	bl	80045bc <LL_RCC_MSI_GetRangeAfterStandby>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c72:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004c74:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c76:	f7ff fd39 	bl	80046ec <LL_RCC_PLL_GetDivider>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	3301      	adds	r3, #1
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	fbb2 f4f3 	udiv	r4, r2, r3
 8004c86:	f7ff fd15 	bl	80046b4 <LL_RCC_PLL_GetN>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	fb03 f404 	mul.w	r4, r3, r4
 8004c90:	f7ff fd1e 	bl	80046d0 <LL_RCC_PLL_GetR>
 8004c94:	4603      	mov	r3, r0
 8004c96:	0e5b      	lsrs	r3, r3, #25
 8004c98:	3301      	adds	r3, #1
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	080053e8 	.word	0x080053e8
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	007a1200 	.word	0x007a1200

08004cb4 <LL_USART_IsEnabled>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <LL_USART_IsEnabled+0x18>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <LL_USART_IsEnabled+0x1a>
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_USART_SetStopBitsLength>:
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	605a      	str	r2, [r3, #4]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_USART_SetHWFlowCtrl>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_USART_SetBaudRate>:
{
 8004d26:	b480      	push	{r7}
 8004d28:	b087      	sub	sp, #28
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d11a      	bne.n	8004d72 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	005a      	lsls	r2, r3, #1
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	441a      	add	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	60da      	str	r2, [r3, #12]
}
 8004d70:	e00a      	b.n	8004d88 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	085a      	lsrs	r2, r3, #1
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	441a      	add	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	60da      	str	r2, [r3, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff ff84 	bl	8004cb4 <LL_USART_IsEnabled>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d15b      	bne.n	8004e6a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <LL_USART_Init+0xe0>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	6851      	ldr	r1, [r2, #4]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	6912      	ldr	r2, [r2, #16]
 8004dc8:	4311      	orrs	r1, r2
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	6992      	ldr	r2, [r2, #24]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff7c 	bl	8004cda <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff89 	bl	8004d00 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <LL_USART_Init+0xe4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d104      	bne.n	8004e00 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004df6:	2003      	movs	r0, #3
 8004df8:	f7ff fc86 	bl	8004708 <LL_RCC_GetUSARTClockFreq>
 8004dfc:	60b8      	str	r0, [r7, #8]
 8004dfe:	e023      	b.n	8004e48 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <LL_USART_Init+0xe8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d104      	bne.n	8004e12 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004e08:	200c      	movs	r0, #12
 8004e0a:	f7ff fc7d 	bl	8004708 <LL_RCC_GetUSARTClockFreq>
 8004e0e:	60b8      	str	r0, [r7, #8]
 8004e10:	e01a      	b.n	8004e48 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <LL_USART_Init+0xec>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d104      	bne.n	8004e24 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004e1a:	2030      	movs	r0, #48	; 0x30
 8004e1c:	f7ff fc74 	bl	8004708 <LL_RCC_GetUSARTClockFreq>
 8004e20:	60b8      	str	r0, [r7, #8]
 8004e22:	e011      	b.n	8004e48 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <LL_USART_Init+0xf0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d104      	bne.n	8004e36 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004e2c:	20c0      	movs	r0, #192	; 0xc0
 8004e2e:	f7ff fd4f 	bl	80048d0 <LL_RCC_GetUARTClockFreq>
 8004e32:	60b8      	str	r0, [r7, #8]
 8004e34:	e008      	b.n	8004e48 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <LL_USART_Init+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d104      	bne.n	8004e48 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004e3e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004e42:	f7ff fd45 	bl	80048d0 <LL_RCC_GetUARTClockFreq>
 8004e46:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff5e 	bl	8004d26 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	efff69f3 	.word	0xefff69f3
 8004e78:	40013800 	.word	0x40013800
 8004e7c:	40004400 	.word	0x40004400
 8004e80:	40004800 	.word	0x40004800
 8004e84:	40004c00 	.word	0x40004c00
 8004e88:	40005000 	.word	0x40005000

08004e8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	f107 001c 	add.w	r0, r7, #28
 8004e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa24 	bl	80052f8 <USB_CoreReset>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec6:	e005      	b.n	8004ed4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee0:	b004      	add	sp, #16
 8004ee2:	4770      	bx	lr

08004ee4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 0201 	bic.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]
 8004f30:	e00b      	b.n	8004f4a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e001      	b.n	8004f4a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e003      	b.n	8004f52 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f4a:	2032      	movs	r0, #50	; 0x32
 8004f4c:	f7fc fc7c 	bl	8001848 <HAL_Delay>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	e009      	b.n	8004f90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	3340      	adds	r3, #64	; 0x40
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b0e      	cmp	r3, #14
 8004f94:	d9f2      	bls.n	8004f7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d11c      	bne.n	8004fd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004faa:	f043 0302 	orr.w	r3, r3, #2
 8004fae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e005      	b.n	8004fe2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2300      	movs	r3, #0
 8004fec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	680b      	ldr	r3, [r1, #0]
 8005000:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005002:	2103      	movs	r1, #3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f93d 	bl	8005284 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800500a:	2110      	movs	r1, #16
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f8f1 	bl	80051f4 <USB_FlushTxFifo>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f90f 	bl	8005240 <USB_FlushRxFifo>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	461a      	mov	r2, r3
 8005034:	2300      	movs	r3, #0
 8005036:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	461a      	mov	r2, r3
 800504c:	2300      	movs	r3, #0
 800504e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	e043      	b.n	80050de <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800506c:	d118      	bne.n	80050a0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	461a      	mov	r2, r3
 8005082:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e013      	b.n	80050b2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005096:	461a      	mov	r2, r3
 8005098:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e008      	b.n	80050b2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	461a      	mov	r2, r3
 80050c0:	2300      	movs	r3, #0
 80050c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3301      	adds	r3, #1
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3b7      	bcc.n	8005056 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	e043      	b.n	8005174 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005102:	d118      	bne.n	8005136 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	461a      	mov	r2, r3
 8005118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e013      	b.n	8005148 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512c:	461a      	mov	r2, r3
 800512e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	e008      	b.n	8005148 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	461a      	mov	r2, r3
 8005144:	2300      	movs	r3, #0
 8005146:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	461a      	mov	r2, r3
 8005156:	2300      	movs	r3, #0
 8005158:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800516c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3301      	adds	r3, #1
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	429a      	cmp	r2, r3
 800517a:	d3b7      	bcc.n	80050ec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800519c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f043 0210 	orr.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <USB_DevInit+0x294>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f043 0208 	orr.w	r2, r3, #8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d107      	bne.n	80051de <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d6:	f043 0304 	orr.w	r3, r3, #4
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ea:	b004      	add	sp, #16
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	803c3800 	.word	0x803c3800

080051f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	019b      	lsls	r3, r3, #6
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <USB_FlushTxFifo+0x48>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e006      	b.n	800522e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d0f0      	beq.n	800520e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	00030d40 	.word	0x00030d40

08005240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2210      	movs	r2, #16
 8005250:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a09      	ldr	r2, [pc, #36]	; (8005280 <USB_FlushRxFifo+0x40>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e006      	b.n	8005272 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b10      	cmp	r3, #16
 800526e:	d0f0      	beq.n	8005252 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	00030d40 	.word	0x00030d40

08005284 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a4:	4313      	orrs	r3, r2
 80052a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052d0:	f023 0303 	bic.w	r3, r3, #3
 80052d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a13      	ldr	r2, [pc, #76]	; (800535c <USB_CoreReset+0x64>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e01b      	b.n	800534e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	daf2      	bge.n	8005304 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <USB_CoreReset+0x64>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d0f0      	beq.n	800532e <USB_CoreReset+0x36>

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	00030d40 	.word	0x00030d40

08005360 <__libc_init_array>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4d0d      	ldr	r5, [pc, #52]	; (8005398 <__libc_init_array+0x38>)
 8005364:	4c0d      	ldr	r4, [pc, #52]	; (800539c <__libc_init_array+0x3c>)
 8005366:	1b64      	subs	r4, r4, r5
 8005368:	10a4      	asrs	r4, r4, #2
 800536a:	2600      	movs	r6, #0
 800536c:	42a6      	cmp	r6, r4
 800536e:	d109      	bne.n	8005384 <__libc_init_array+0x24>
 8005370:	4d0b      	ldr	r5, [pc, #44]	; (80053a0 <__libc_init_array+0x40>)
 8005372:	4c0c      	ldr	r4, [pc, #48]	; (80053a4 <__libc_init_array+0x44>)
 8005374:	f000 f820 	bl	80053b8 <_init>
 8005378:	1b64      	subs	r4, r4, r5
 800537a:	10a4      	asrs	r4, r4, #2
 800537c:	2600      	movs	r6, #0
 800537e:	42a6      	cmp	r6, r4
 8005380:	d105      	bne.n	800538e <__libc_init_array+0x2e>
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	f855 3b04 	ldr.w	r3, [r5], #4
 8005388:	4798      	blx	r3
 800538a:	3601      	adds	r6, #1
 800538c:	e7ee      	b.n	800536c <__libc_init_array+0xc>
 800538e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005392:	4798      	blx	r3
 8005394:	3601      	adds	r6, #1
 8005396:	e7f2      	b.n	800537e <__libc_init_array+0x1e>
 8005398:	08005418 	.word	0x08005418
 800539c:	08005418 	.word	0x08005418
 80053a0:	08005418 	.word	0x08005418
 80053a4:	0800541c 	.word	0x0800541c

080053a8 <memset>:
 80053a8:	4402      	add	r2, r0
 80053aa:	4603      	mov	r3, r0
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d100      	bne.n	80053b2 <memset+0xa>
 80053b0:	4770      	bx	lr
 80053b2:	f803 1b01 	strb.w	r1, [r3], #1
 80053b6:	e7f9      	b.n	80053ac <memset+0x4>

080053b8 <_init>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr

080053c4 <_fini>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr
